/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the ValueDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueDTO{}

// ValueDTO struct for ValueDTO
type ValueDTO struct {
	// Unit Number
	UnitNo *int32 `json:"unitNo,omitempty"`
	// Unit Abbreviation
	UnitAbbreviation *string `json:"unitAbbreviation,omitempty"`
	// Decimals
	Decimals *int32 `json:"decimals,omitempty"`
	// Rounding Decimals
	RoundingDecimals *int32 `json:"roundingDecimals,omitempty"`
	// Value
	Value *float64 `json:"value,omitempty"`
}

// NewValueDTO instantiates a new ValueDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueDTO() *ValueDTO {
	this := ValueDTO{}
	return &this
}

// NewValueDTOWithDefaults instantiates a new ValueDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueDTOWithDefaults() *ValueDTO {
	this := ValueDTO{}
	return &this
}

// GetUnitNo returns the UnitNo field value if set, zero value otherwise.
func (o *ValueDTO) GetUnitNo() int32 {
	if o == nil || IsNil(o.UnitNo) {
		var ret int32
		return ret
	}
	return *o.UnitNo
}

// GetUnitNoOk returns a tuple with the UnitNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueDTO) GetUnitNoOk() (*int32, bool) {
	if o == nil || IsNil(o.UnitNo) {
		return nil, false
	}
	return o.UnitNo, true
}

// HasUnitNo returns a boolean if a field has been set.
func (o *ValueDTO) HasUnitNo() bool {
	if o != nil && !IsNil(o.UnitNo) {
		return true
	}

	return false
}

// SetUnitNo gets a reference to the given int32 and assigns it to the UnitNo field.
func (o *ValueDTO) SetUnitNo(v int32) {
	o.UnitNo = &v
}

// GetUnitAbbreviation returns the UnitAbbreviation field value if set, zero value otherwise.
func (o *ValueDTO) GetUnitAbbreviation() string {
	if o == nil || IsNil(o.UnitAbbreviation) {
		var ret string
		return ret
	}
	return *o.UnitAbbreviation
}

// GetUnitAbbreviationOk returns a tuple with the UnitAbbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueDTO) GetUnitAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.UnitAbbreviation) {
		return nil, false
	}
	return o.UnitAbbreviation, true
}

// HasUnitAbbreviation returns a boolean if a field has been set.
func (o *ValueDTO) HasUnitAbbreviation() bool {
	if o != nil && !IsNil(o.UnitAbbreviation) {
		return true
	}

	return false
}

// SetUnitAbbreviation gets a reference to the given string and assigns it to the UnitAbbreviation field.
func (o *ValueDTO) SetUnitAbbreviation(v string) {
	o.UnitAbbreviation = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *ValueDTO) GetDecimals() int32 {
	if o == nil || IsNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueDTO) GetDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *ValueDTO) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *ValueDTO) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetRoundingDecimals returns the RoundingDecimals field value if set, zero value otherwise.
func (o *ValueDTO) GetRoundingDecimals() int32 {
	if o == nil || IsNil(o.RoundingDecimals) {
		var ret int32
		return ret
	}
	return *o.RoundingDecimals
}

// GetRoundingDecimalsOk returns a tuple with the RoundingDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueDTO) GetRoundingDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoundingDecimals) {
		return nil, false
	}
	return o.RoundingDecimals, true
}

// HasRoundingDecimals returns a boolean if a field has been set.
func (o *ValueDTO) HasRoundingDecimals() bool {
	if o != nil && !IsNil(o.RoundingDecimals) {
		return true
	}

	return false
}

// SetRoundingDecimals gets a reference to the given int32 and assigns it to the RoundingDecimals field.
func (o *ValueDTO) SetRoundingDecimals(v int32) {
	o.RoundingDecimals = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ValueDTO) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueDTO) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ValueDTO) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *ValueDTO) SetValue(v float64) {
	o.Value = &v
}

func (o ValueDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitNo) {
		toSerialize["unitNo"] = o.UnitNo
	}
	if !IsNil(o.UnitAbbreviation) {
		toSerialize["unitAbbreviation"] = o.UnitAbbreviation
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.RoundingDecimals) {
		toSerialize["roundingDecimals"] = o.RoundingDecimals
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableValueDTO struct {
	value *ValueDTO
	isSet bool
}

func (v NullableValueDTO) Get() *ValueDTO {
	return v.value
}

func (v *NullableValueDTO) Set(val *ValueDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableValueDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableValueDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueDTO(val *ValueDTO) *NullableValueDTO {
	return &NullableValueDTO{value: val, isSet: true}
}

func (v NullableValueDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


