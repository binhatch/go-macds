/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the Recommendation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Recommendation{}

// Recommendation The response object \"recommendation\" can return 2 different text versions:\"dashboard\": The recommendation is optimised for end users that mostly navigate a fleet dashboard.\"driver\": The recommendation is optimised for the driver of the vehicle.
type Recommendation struct {
	// Identifier
	Id *string `json:"id,omitempty"`
	// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
	Language *string `json:"language,omitempty"`
	// Translation text
	Text *string `json:"text,omitempty"`
	// The dashboard related text
	Dashboard *string `json:"dashboard,omitempty"`
	// The driver related text
	Driver *string `json:"driver,omitempty"`
}

// NewRecommendation instantiates a new Recommendation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendation() *Recommendation {
	this := Recommendation{}
	return &this
}

// NewRecommendationWithDefaults instantiates a new Recommendation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendationWithDefaults() *Recommendation {
	this := Recommendation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Recommendation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recommendation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Recommendation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Recommendation) SetId(v string) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Recommendation) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recommendation) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Recommendation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Recommendation) SetLanguage(v string) {
	o.Language = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Recommendation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recommendation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Recommendation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Recommendation) SetText(v string) {
	o.Text = &v
}

// GetDashboard returns the Dashboard field value if set, zero value otherwise.
func (o *Recommendation) GetDashboard() string {
	if o == nil || IsNil(o.Dashboard) {
		var ret string
		return ret
	}
	return *o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recommendation) GetDashboardOk() (*string, bool) {
	if o == nil || IsNil(o.Dashboard) {
		return nil, false
	}
	return o.Dashboard, true
}

// HasDashboard returns a boolean if a field has been set.
func (o *Recommendation) HasDashboard() bool {
	if o != nil && !IsNil(o.Dashboard) {
		return true
	}

	return false
}

// SetDashboard gets a reference to the given string and assigns it to the Dashboard field.
func (o *Recommendation) SetDashboard(v string) {
	o.Dashboard = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *Recommendation) GetDriver() string {
	if o == nil || IsNil(o.Driver) {
		var ret string
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recommendation) GetDriverOk() (*string, bool) {
	if o == nil || IsNil(o.Driver) {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *Recommendation) HasDriver() bool {
	if o != nil && !IsNil(o.Driver) {
		return true
	}

	return false
}

// SetDriver gets a reference to the given string and assigns it to the Driver field.
func (o *Recommendation) SetDriver(v string) {
	o.Driver = &v
}

func (o Recommendation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Recommendation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Dashboard) {
		toSerialize["dashboard"] = o.Dashboard
	}
	if !IsNil(o.Driver) {
		toSerialize["driver"] = o.Driver
	}
	return toSerialize, nil
}

type NullableRecommendation struct {
	value *Recommendation
	isSet bool
}

func (v NullableRecommendation) Get() *Recommendation {
	return v.value
}

func (v *NullableRecommendation) Set(val *Recommendation) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendation) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendation(val *Recommendation) *NullableRecommendation {
	return &NullableRecommendation{value: val, isSet: true}
}

func (v NullableRecommendation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


