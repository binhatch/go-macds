/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the DataInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInput{}

// DataInput struct for DataInput
type DataInput struct {
	// Data Input Type Id
	DataInputTypeId *string `json:"dataInputTypeId,omitempty"`
	Name *NameReference `json:"name,omitempty"`
	// Data Input Type
	DataInputType *string `json:"dataInputType,omitempty"`
	// List of Units
	Units []Unit `json:"units,omitempty"`
	// Labour Time
	LabourTime *int32 `json:"labourTime,omitempty"`
	// Is mandatory
	IsMandatory *bool `json:"isMandatory,omitempty"`
}

// NewDataInput instantiates a new DataInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInput() *DataInput {
	this := DataInput{}
	return &this
}

// NewDataInputWithDefaults instantiates a new DataInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInputWithDefaults() *DataInput {
	this := DataInput{}
	return &this
}

// GetDataInputTypeId returns the DataInputTypeId field value if set, zero value otherwise.
func (o *DataInput) GetDataInputTypeId() string {
	if o == nil || IsNil(o.DataInputTypeId) {
		var ret string
		return ret
	}
	return *o.DataInputTypeId
}

// GetDataInputTypeIdOk returns a tuple with the DataInputTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetDataInputTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataInputTypeId) {
		return nil, false
	}
	return o.DataInputTypeId, true
}

// HasDataInputTypeId returns a boolean if a field has been set.
func (o *DataInput) HasDataInputTypeId() bool {
	if o != nil && !IsNil(o.DataInputTypeId) {
		return true
	}

	return false
}

// SetDataInputTypeId gets a reference to the given string and assigns it to the DataInputTypeId field.
func (o *DataInput) SetDataInputTypeId(v string) {
	o.DataInputTypeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataInput) GetName() NameReference {
	if o == nil || IsNil(o.Name) {
		var ret NameReference
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetNameOk() (*NameReference, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given NameReference and assigns it to the Name field.
func (o *DataInput) SetName(v NameReference) {
	o.Name = &v
}

// GetDataInputType returns the DataInputType field value if set, zero value otherwise.
func (o *DataInput) GetDataInputType() string {
	if o == nil || IsNil(o.DataInputType) {
		var ret string
		return ret
	}
	return *o.DataInputType
}

// GetDataInputTypeOk returns a tuple with the DataInputType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetDataInputTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataInputType) {
		return nil, false
	}
	return o.DataInputType, true
}

// HasDataInputType returns a boolean if a field has been set.
func (o *DataInput) HasDataInputType() bool {
	if o != nil && !IsNil(o.DataInputType) {
		return true
	}

	return false
}

// SetDataInputType gets a reference to the given string and assigns it to the DataInputType field.
func (o *DataInput) SetDataInputType(v string) {
	o.DataInputType = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *DataInput) GetUnits() []Unit {
	if o == nil || IsNil(o.Units) {
		var ret []Unit
		return ret
	}
	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetUnitsOk() ([]Unit, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *DataInput) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []Unit and assigns it to the Units field.
func (o *DataInput) SetUnits(v []Unit) {
	o.Units = v
}

// GetLabourTime returns the LabourTime field value if set, zero value otherwise.
func (o *DataInput) GetLabourTime() int32 {
	if o == nil || IsNil(o.LabourTime) {
		var ret int32
		return ret
	}
	return *o.LabourTime
}

// GetLabourTimeOk returns a tuple with the LabourTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetLabourTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LabourTime) {
		return nil, false
	}
	return o.LabourTime, true
}

// HasLabourTime returns a boolean if a field has been set.
func (o *DataInput) HasLabourTime() bool {
	if o != nil && !IsNil(o.LabourTime) {
		return true
	}

	return false
}

// SetLabourTime gets a reference to the given int32 and assigns it to the LabourTime field.
func (o *DataInput) SetLabourTime(v int32) {
	o.LabourTime = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *DataInput) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInput) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *DataInput) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *DataInput) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

func (o DataInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataInputTypeId) {
		toSerialize["dataInputTypeId"] = o.DataInputTypeId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DataInputType) {
		toSerialize["dataInputType"] = o.DataInputType
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.LabourTime) {
		toSerialize["labourTime"] = o.LabourTime
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	return toSerialize, nil
}

type NullableDataInput struct {
	value *DataInput
	isSet bool
}

func (v NullableDataInput) Get() *DataInput {
	return v.value
}

func (v *NullableDataInput) Set(val *DataInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInput(val *DataInput) *NullableDataInput {
	return &NullableDataInput{value: val, isSet: true}
}

func (v NullableDataInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


