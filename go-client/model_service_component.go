/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the ServiceComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceComponent{}

// ServiceComponent struct for ServiceComponent
type ServiceComponent struct {
	// Id
	Id *string `json:"id,omitempty"`
	Name *NameReference `json:"name,omitempty"`
	// Default Amount
	DefaultAmount *int32 `json:"defaultAmount,omitempty"`
	// Generic Article Number
	GenArtNo *int64 `json:"genArtNo,omitempty"`
}

// NewServiceComponent instantiates a new ServiceComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceComponent() *ServiceComponent {
	this := ServiceComponent{}
	return &this
}

// NewServiceComponentWithDefaults instantiates a new ServiceComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceComponentWithDefaults() *ServiceComponent {
	this := ServiceComponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceComponent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceComponent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceComponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServiceComponent) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceComponent) GetName() NameReference {
	if o == nil || IsNil(o.Name) {
		var ret NameReference
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceComponent) GetNameOk() (*NameReference, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given NameReference and assigns it to the Name field.
func (o *ServiceComponent) SetName(v NameReference) {
	o.Name = &v
}

// GetDefaultAmount returns the DefaultAmount field value if set, zero value otherwise.
func (o *ServiceComponent) GetDefaultAmount() int32 {
	if o == nil || IsNil(o.DefaultAmount) {
		var ret int32
		return ret
	}
	return *o.DefaultAmount
}

// GetDefaultAmountOk returns a tuple with the DefaultAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceComponent) GetDefaultAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultAmount) {
		return nil, false
	}
	return o.DefaultAmount, true
}

// HasDefaultAmount returns a boolean if a field has been set.
func (o *ServiceComponent) HasDefaultAmount() bool {
	if o != nil && !IsNil(o.DefaultAmount) {
		return true
	}

	return false
}

// SetDefaultAmount gets a reference to the given int32 and assigns it to the DefaultAmount field.
func (o *ServiceComponent) SetDefaultAmount(v int32) {
	o.DefaultAmount = &v
}

// GetGenArtNo returns the GenArtNo field value if set, zero value otherwise.
func (o *ServiceComponent) GetGenArtNo() int64 {
	if o == nil || IsNil(o.GenArtNo) {
		var ret int64
		return ret
	}
	return *o.GenArtNo
}

// GetGenArtNoOk returns a tuple with the GenArtNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceComponent) GetGenArtNoOk() (*int64, bool) {
	if o == nil || IsNil(o.GenArtNo) {
		return nil, false
	}
	return o.GenArtNo, true
}

// HasGenArtNo returns a boolean if a field has been set.
func (o *ServiceComponent) HasGenArtNo() bool {
	if o != nil && !IsNil(o.GenArtNo) {
		return true
	}

	return false
}

// SetGenArtNo gets a reference to the given int64 and assigns it to the GenArtNo field.
func (o *ServiceComponent) SetGenArtNo(v int64) {
	o.GenArtNo = &v
}

func (o ServiceComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DefaultAmount) {
		toSerialize["defaultAmount"] = o.DefaultAmount
	}
	if !IsNil(o.GenArtNo) {
		toSerialize["genArtNo"] = o.GenArtNo
	}
	return toSerialize, nil
}

type NullableServiceComponent struct {
	value *ServiceComponent
	isSet bool
}

func (v NullableServiceComponent) Get() *ServiceComponent {
	return v.value
}

func (v *NullableServiceComponent) Set(val *ServiceComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceComponent(val *ServiceComponent) *NullableServiceComponent {
	return &NullableServiceComponent{value: val, isSet: true}
}

func (v NullableServiceComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


