/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the IdTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdTranslation{}

// IdTranslation struct for IdTranslation
type IdTranslation struct {
	// Id
	Id *int64 `json:"id,omitempty"`
	Translations *Translation `json:"translations,omitempty"`
}

// NewIdTranslation instantiates a new IdTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdTranslation() *IdTranslation {
	this := IdTranslation{}
	return &this
}

// NewIdTranslationWithDefaults instantiates a new IdTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdTranslationWithDefaults() *IdTranslation {
	this := IdTranslation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdTranslation) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdTranslation) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdTranslation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IdTranslation) SetId(v int64) {
	o.Id = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *IdTranslation) GetTranslations() Translation {
	if o == nil || IsNil(o.Translations) {
		var ret Translation
		return ret
	}
	return *o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdTranslation) GetTranslationsOk() (*Translation, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *IdTranslation) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given Translation and assigns it to the Translations field.
func (o *IdTranslation) SetTranslations(v Translation) {
	o.Translations = &v
}

func (o IdTranslation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

type NullableIdTranslation struct {
	value *IdTranslation
	isSet bool
}

func (v NullableIdTranslation) Get() *IdTranslation {
	return v.value
}

func (v *NullableIdTranslation) Set(val *IdTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableIdTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableIdTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdTranslation(val *IdTranslation) *NullableIdTranslation {
	return &NullableIdTranslation{value: val, isSet: true}
}

func (v NullableIdTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


