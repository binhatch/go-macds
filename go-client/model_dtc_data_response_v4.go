/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the DtcDataResponseV4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcDataResponseV4{}

// DtcDataResponseV4 struct for DtcDataResponseV4
type DtcDataResponseV4 struct {
	DtcInput *InputedData `json:"dtcInput,omitempty"`
	Codes *Codes `json:"codes,omitempty"`
	// Code
	Code *string `json:"code,omitempty"`
	// DTC Text Id
	DtcTextId *string `json:"dtcTextId,omitempty"`
	Category *DtcTranslation `json:"category,omitempty"`
	Subcategory *DtcTranslation `json:"subcategory,omitempty"`
	Information *DtcTranslation `json:"information,omitempty"`
	Warning *Warning `json:"warning,omitempty"`
	Cause *DtcTranslation `json:"cause,omitempty"`
	Effect *DtcTranslation `json:"effect,omitempty"`
	// Classification
	Classification *string `json:"classification,omitempty"`
	Recommendation *Recommendation `json:"recommendation,omitempty"`
	// An array of all ECU system were the found DTC might exist
	EcuSystems []DtcTranslation `json:"ecuSystems,omitempty"`
	Error *Error `json:"error,omitempty"`
	// If multiple results are found, a ranking (based on statistical relevance) might be shown.
	Relevance *string `json:"relevance,omitempty"`
}

// NewDtcDataResponseV4 instantiates a new DtcDataResponseV4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcDataResponseV4() *DtcDataResponseV4 {
	this := DtcDataResponseV4{}
	return &this
}

// NewDtcDataResponseV4WithDefaults instantiates a new DtcDataResponseV4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcDataResponseV4WithDefaults() *DtcDataResponseV4 {
	this := DtcDataResponseV4{}
	return &this
}

// GetDtcInput returns the DtcInput field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetDtcInput() InputedData {
	if o == nil || IsNil(o.DtcInput) {
		var ret InputedData
		return ret
	}
	return *o.DtcInput
}

// GetDtcInputOk returns a tuple with the DtcInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetDtcInputOk() (*InputedData, bool) {
	if o == nil || IsNil(o.DtcInput) {
		return nil, false
	}
	return o.DtcInput, true
}

// HasDtcInput returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasDtcInput() bool {
	if o != nil && !IsNil(o.DtcInput) {
		return true
	}

	return false
}

// SetDtcInput gets a reference to the given InputedData and assigns it to the DtcInput field.
func (o *DtcDataResponseV4) SetDtcInput(v InputedData) {
	o.DtcInput = &v
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetCodes() Codes {
	if o == nil || IsNil(o.Codes) {
		var ret Codes
		return ret
	}
	return *o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetCodesOk() (*Codes, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given Codes and assigns it to the Codes field.
func (o *DtcDataResponseV4) SetCodes(v Codes) {
	o.Codes = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DtcDataResponseV4) SetCode(v string) {
	o.Code = &v
}

// GetDtcTextId returns the DtcTextId field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetDtcTextId() string {
	if o == nil || IsNil(o.DtcTextId) {
		var ret string
		return ret
	}
	return *o.DtcTextId
}

// GetDtcTextIdOk returns a tuple with the DtcTextId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetDtcTextIdOk() (*string, bool) {
	if o == nil || IsNil(o.DtcTextId) {
		return nil, false
	}
	return o.DtcTextId, true
}

// HasDtcTextId returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasDtcTextId() bool {
	if o != nil && !IsNil(o.DtcTextId) {
		return true
	}

	return false
}

// SetDtcTextId gets a reference to the given string and assigns it to the DtcTextId field.
func (o *DtcDataResponseV4) SetDtcTextId(v string) {
	o.DtcTextId = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetCategory() DtcTranslation {
	if o == nil || IsNil(o.Category) {
		var ret DtcTranslation
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetCategoryOk() (*DtcTranslation, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given DtcTranslation and assigns it to the Category field.
func (o *DtcDataResponseV4) SetCategory(v DtcTranslation) {
	o.Category = &v
}

// GetSubcategory returns the Subcategory field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetSubcategory() DtcTranslation {
	if o == nil || IsNil(o.Subcategory) {
		var ret DtcTranslation
		return ret
	}
	return *o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetSubcategoryOk() (*DtcTranslation, bool) {
	if o == nil || IsNil(o.Subcategory) {
		return nil, false
	}
	return o.Subcategory, true
}

// HasSubcategory returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasSubcategory() bool {
	if o != nil && !IsNil(o.Subcategory) {
		return true
	}

	return false
}

// SetSubcategory gets a reference to the given DtcTranslation and assigns it to the Subcategory field.
func (o *DtcDataResponseV4) SetSubcategory(v DtcTranslation) {
	o.Subcategory = &v
}

// GetInformation returns the Information field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetInformation() DtcTranslation {
	if o == nil || IsNil(o.Information) {
		var ret DtcTranslation
		return ret
	}
	return *o.Information
}

// GetInformationOk returns a tuple with the Information field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetInformationOk() (*DtcTranslation, bool) {
	if o == nil || IsNil(o.Information) {
		return nil, false
	}
	return o.Information, true
}

// HasInformation returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasInformation() bool {
	if o != nil && !IsNil(o.Information) {
		return true
	}

	return false
}

// SetInformation gets a reference to the given DtcTranslation and assigns it to the Information field.
func (o *DtcDataResponseV4) SetInformation(v DtcTranslation) {
	o.Information = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetWarning() Warning {
	if o == nil || IsNil(o.Warning) {
		var ret Warning
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetWarningOk() (*Warning, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given Warning and assigns it to the Warning field.
func (o *DtcDataResponseV4) SetWarning(v Warning) {
	o.Warning = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetCause() DtcTranslation {
	if o == nil || IsNil(o.Cause) {
		var ret DtcTranslation
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetCauseOk() (*DtcTranslation, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given DtcTranslation and assigns it to the Cause field.
func (o *DtcDataResponseV4) SetCause(v DtcTranslation) {
	o.Cause = &v
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetEffect() DtcTranslation {
	if o == nil || IsNil(o.Effect) {
		var ret DtcTranslation
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetEffectOk() (*DtcTranslation, bool) {
	if o == nil || IsNil(o.Effect) {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasEffect() bool {
	if o != nil && !IsNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given DtcTranslation and assigns it to the Effect field.
func (o *DtcDataResponseV4) SetEffect(v DtcTranslation) {
	o.Effect = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetClassification() string {
	if o == nil || IsNil(o.Classification) {
		var ret string
		return ret
	}
	return *o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.Classification) {
		return nil, false
	}
	return o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasClassification() bool {
	if o != nil && !IsNil(o.Classification) {
		return true
	}

	return false
}

// SetClassification gets a reference to the given string and assigns it to the Classification field.
func (o *DtcDataResponseV4) SetClassification(v string) {
	o.Classification = &v
}

// GetRecommendation returns the Recommendation field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetRecommendation() Recommendation {
	if o == nil || IsNil(o.Recommendation) {
		var ret Recommendation
		return ret
	}
	return *o.Recommendation
}

// GetRecommendationOk returns a tuple with the Recommendation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetRecommendationOk() (*Recommendation, bool) {
	if o == nil || IsNil(o.Recommendation) {
		return nil, false
	}
	return o.Recommendation, true
}

// HasRecommendation returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasRecommendation() bool {
	if o != nil && !IsNil(o.Recommendation) {
		return true
	}

	return false
}

// SetRecommendation gets a reference to the given Recommendation and assigns it to the Recommendation field.
func (o *DtcDataResponseV4) SetRecommendation(v Recommendation) {
	o.Recommendation = &v
}

// GetEcuSystems returns the EcuSystems field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetEcuSystems() []DtcTranslation {
	if o == nil || IsNil(o.EcuSystems) {
		var ret []DtcTranslation
		return ret
	}
	return o.EcuSystems
}

// GetEcuSystemsOk returns a tuple with the EcuSystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetEcuSystemsOk() ([]DtcTranslation, bool) {
	if o == nil || IsNil(o.EcuSystems) {
		return nil, false
	}
	return o.EcuSystems, true
}

// HasEcuSystems returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasEcuSystems() bool {
	if o != nil && !IsNil(o.EcuSystems) {
		return true
	}

	return false
}

// SetEcuSystems gets a reference to the given []DtcTranslation and assigns it to the EcuSystems field.
func (o *DtcDataResponseV4) SetEcuSystems(v []DtcTranslation) {
	o.EcuSystems = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *DtcDataResponseV4) SetError(v Error) {
	o.Error = &v
}

// GetRelevance returns the Relevance field value if set, zero value otherwise.
func (o *DtcDataResponseV4) GetRelevance() string {
	if o == nil || IsNil(o.Relevance) {
		var ret string
		return ret
	}
	return *o.Relevance
}

// GetRelevanceOk returns a tuple with the Relevance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcDataResponseV4) GetRelevanceOk() (*string, bool) {
	if o == nil || IsNil(o.Relevance) {
		return nil, false
	}
	return o.Relevance, true
}

// HasRelevance returns a boolean if a field has been set.
func (o *DtcDataResponseV4) HasRelevance() bool {
	if o != nil && !IsNil(o.Relevance) {
		return true
	}

	return false
}

// SetRelevance gets a reference to the given string and assigns it to the Relevance field.
func (o *DtcDataResponseV4) SetRelevance(v string) {
	o.Relevance = &v
}

func (o DtcDataResponseV4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcDataResponseV4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DtcInput) {
		toSerialize["dtcInput"] = o.DtcInput
	}
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DtcTextId) {
		toSerialize["dtcTextId"] = o.DtcTextId
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Subcategory) {
		toSerialize["subcategory"] = o.Subcategory
	}
	if !IsNil(o.Information) {
		toSerialize["information"] = o.Information
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	if !IsNil(o.Classification) {
		toSerialize["classification"] = o.Classification
	}
	if !IsNil(o.Recommendation) {
		toSerialize["recommendation"] = o.Recommendation
	}
	if !IsNil(o.EcuSystems) {
		toSerialize["ecuSystems"] = o.EcuSystems
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Relevance) {
		toSerialize["relevance"] = o.Relevance
	}
	return toSerialize, nil
}

type NullableDtcDataResponseV4 struct {
	value *DtcDataResponseV4
	isSet bool
}

func (v NullableDtcDataResponseV4) Get() *DtcDataResponseV4 {
	return v.value
}

func (v *NullableDtcDataResponseV4) Set(val *DtcDataResponseV4) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcDataResponseV4) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcDataResponseV4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcDataResponseV4(val *DtcDataResponseV4) *NullableDtcDataResponseV4 {
	return &NullableDtcDataResponseV4{value: val, isSet: true}
}

func (v NullableDtcDataResponseV4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcDataResponseV4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


