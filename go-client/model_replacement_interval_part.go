/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the ReplacementIntervalPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacementIntervalPart{}

// ReplacementIntervalPart struct for ReplacementIntervalPart
type ReplacementIntervalPart struct {
	Name *ReplacementNameReference `json:"name,omitempty"`
	// a list of GenArt (Generic Article) numbers
	GenArtNos []int32 `json:"genArtNos,omitempty"`
}

// NewReplacementIntervalPart instantiates a new ReplacementIntervalPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacementIntervalPart() *ReplacementIntervalPart {
	this := ReplacementIntervalPart{}
	return &this
}

// NewReplacementIntervalPartWithDefaults instantiates a new ReplacementIntervalPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacementIntervalPartWithDefaults() *ReplacementIntervalPart {
	this := ReplacementIntervalPart{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReplacementIntervalPart) GetName() ReplacementNameReference {
	if o == nil || IsNil(o.Name) {
		var ret ReplacementNameReference
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementIntervalPart) GetNameOk() (*ReplacementNameReference, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReplacementIntervalPart) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given ReplacementNameReference and assigns it to the Name field.
func (o *ReplacementIntervalPart) SetName(v ReplacementNameReference) {
	o.Name = &v
}

// GetGenArtNos returns the GenArtNos field value if set, zero value otherwise.
func (o *ReplacementIntervalPart) GetGenArtNos() []int32 {
	if o == nil || IsNil(o.GenArtNos) {
		var ret []int32
		return ret
	}
	return o.GenArtNos
}

// GetGenArtNosOk returns a tuple with the GenArtNos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementIntervalPart) GetGenArtNosOk() ([]int32, bool) {
	if o == nil || IsNil(o.GenArtNos) {
		return nil, false
	}
	return o.GenArtNos, true
}

// HasGenArtNos returns a boolean if a field has been set.
func (o *ReplacementIntervalPart) HasGenArtNos() bool {
	if o != nil && !IsNil(o.GenArtNos) {
		return true
	}

	return false
}

// SetGenArtNos gets a reference to the given []int32 and assigns it to the GenArtNos field.
func (o *ReplacementIntervalPart) SetGenArtNos(v []int32) {
	o.GenArtNos = v
}

func (o ReplacementIntervalPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacementIntervalPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.GenArtNos) {
		toSerialize["genArtNos"] = o.GenArtNos
	}
	return toSerialize, nil
}

type NullableReplacementIntervalPart struct {
	value *ReplacementIntervalPart
	isSet bool
}

func (v NullableReplacementIntervalPart) Get() *ReplacementIntervalPart {
	return v.value
}

func (v *NullableReplacementIntervalPart) Set(val *ReplacementIntervalPart) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacementIntervalPart) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacementIntervalPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacementIntervalPart(val *ReplacementIntervalPart) *NullableReplacementIntervalPart {
	return &NullableReplacementIntervalPart{value: val, isSet: true}
}

func (v NullableReplacementIntervalPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacementIntervalPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


