/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the YearMonth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YearMonth{}

// YearMonth struct for YearMonth
type YearMonth struct {
	// Year
	Year *int32 `json:"year,omitempty"`
	// Month
	Month *int32 `json:"month,omitempty"`
}

// NewYearMonth instantiates a new YearMonth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYearMonth() *YearMonth {
	this := YearMonth{}
	return &this
}

// NewYearMonthWithDefaults instantiates a new YearMonth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYearMonthWithDefaults() *YearMonth {
	this := YearMonth{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *YearMonth) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearMonth) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *YearMonth) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *YearMonth) SetYear(v int32) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *YearMonth) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearMonth) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *YearMonth) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *YearMonth) SetMonth(v int32) {
	o.Month = &v
}

func (o YearMonth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YearMonth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	return toSerialize, nil
}

type NullableYearMonth struct {
	value *YearMonth
	isSet bool
}

func (v NullableYearMonth) Get() *YearMonth {
	return v.value
}

func (v *NullableYearMonth) Set(val *YearMonth) {
	v.value = val
	v.isSet = true
}

func (v NullableYearMonth) IsSet() bool {
	return v.isSet
}

func (v *NullableYearMonth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearMonth(val *YearMonth) *NullableYearMonth {
	return &NullableYearMonth{value: val, isSet: true}
}

func (v NullableYearMonth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearMonth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


