/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the RepairTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepairTime{}

// RepairTime struct for RepairTime
type RepairTime struct {
	// This is unique for each job. This node contains a string which is Alphanumeric in nature.
	Code *string `json:"code,omitempty"`
	// uniquely identifies a job
	Id *int32 `json:"id,omitempty"`
	// Represents the type of labor value. Each code corresponds to a specific type of work. - EK (= Electronic work) - EL (= Electrical work) - KA (= Body work) - LA (= Paint work) - WS (= Workshop work) - ZB (= Accessory work)  The related textual values are found in the property 'variantText'.
	VariantCode *string `json:"variantCode,omitempty"`
	// Provides the text description of the labor value as specified by the 'variantCode': - Electronic work, - Electrical work, - Body work, - Paint work, - Workshop work, - Accessory work
	VariantText *string `json:"variantText,omitempty"`
	// This node tells you about the title of the job like: \"Check leak-tightness of engine *\".
	Name *string `json:"name,omitempty"`
	// List of Generic Article Numbers for a particular job, through which we can find the Spare Parts information.
	GenericArticleNo []int32 `json:"genericArticleNo,omitempty"`
	// This node tells you about Calculation Mode, whether this job needs to be taken into account to calculate the total repair time. It can be one of these: 0 = do not calculate, 1 = Minimum remains, 2 = Maximum remains
	CalcMode *int32 `json:"calcMode,omitempty"`
	// List of the linked jobs associated with a repair time element
	JobLinks []RepairTimesJobLink `json:"jobLinks,omitempty"`
}

// NewRepairTime instantiates a new RepairTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepairTime() *RepairTime {
	this := RepairTime{}
	return &this
}

// NewRepairTimeWithDefaults instantiates a new RepairTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepairTimeWithDefaults() *RepairTime {
	this := RepairTime{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RepairTime) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RepairTime) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RepairTime) SetCode(v string) {
	o.Code = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RepairTime) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RepairTime) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RepairTime) SetId(v int32) {
	o.Id = &v
}

// GetVariantCode returns the VariantCode field value if set, zero value otherwise.
func (o *RepairTime) GetVariantCode() string {
	if o == nil || IsNil(o.VariantCode) {
		var ret string
		return ret
	}
	return *o.VariantCode
}

// GetVariantCodeOk returns a tuple with the VariantCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetVariantCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VariantCode) {
		return nil, false
	}
	return o.VariantCode, true
}

// HasVariantCode returns a boolean if a field has been set.
func (o *RepairTime) HasVariantCode() bool {
	if o != nil && !IsNil(o.VariantCode) {
		return true
	}

	return false
}

// SetVariantCode gets a reference to the given string and assigns it to the VariantCode field.
func (o *RepairTime) SetVariantCode(v string) {
	o.VariantCode = &v
}

// GetVariantText returns the VariantText field value if set, zero value otherwise.
func (o *RepairTime) GetVariantText() string {
	if o == nil || IsNil(o.VariantText) {
		var ret string
		return ret
	}
	return *o.VariantText
}

// GetVariantTextOk returns a tuple with the VariantText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetVariantTextOk() (*string, bool) {
	if o == nil || IsNil(o.VariantText) {
		return nil, false
	}
	return o.VariantText, true
}

// HasVariantText returns a boolean if a field has been set.
func (o *RepairTime) HasVariantText() bool {
	if o != nil && !IsNil(o.VariantText) {
		return true
	}

	return false
}

// SetVariantText gets a reference to the given string and assigns it to the VariantText field.
func (o *RepairTime) SetVariantText(v string) {
	o.VariantText = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RepairTime) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RepairTime) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RepairTime) SetName(v string) {
	o.Name = &v
}

// GetGenericArticleNo returns the GenericArticleNo field value if set, zero value otherwise.
func (o *RepairTime) GetGenericArticleNo() []int32 {
	if o == nil || IsNil(o.GenericArticleNo) {
		var ret []int32
		return ret
	}
	return o.GenericArticleNo
}

// GetGenericArticleNoOk returns a tuple with the GenericArticleNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetGenericArticleNoOk() ([]int32, bool) {
	if o == nil || IsNil(o.GenericArticleNo) {
		return nil, false
	}
	return o.GenericArticleNo, true
}

// HasGenericArticleNo returns a boolean if a field has been set.
func (o *RepairTime) HasGenericArticleNo() bool {
	if o != nil && !IsNil(o.GenericArticleNo) {
		return true
	}

	return false
}

// SetGenericArticleNo gets a reference to the given []int32 and assigns it to the GenericArticleNo field.
func (o *RepairTime) SetGenericArticleNo(v []int32) {
	o.GenericArticleNo = v
}

// GetCalcMode returns the CalcMode field value if set, zero value otherwise.
func (o *RepairTime) GetCalcMode() int32 {
	if o == nil || IsNil(o.CalcMode) {
		var ret int32
		return ret
	}
	return *o.CalcMode
}

// GetCalcModeOk returns a tuple with the CalcMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetCalcModeOk() (*int32, bool) {
	if o == nil || IsNil(o.CalcMode) {
		return nil, false
	}
	return o.CalcMode, true
}

// HasCalcMode returns a boolean if a field has been set.
func (o *RepairTime) HasCalcMode() bool {
	if o != nil && !IsNil(o.CalcMode) {
		return true
	}

	return false
}

// SetCalcMode gets a reference to the given int32 and assigns it to the CalcMode field.
func (o *RepairTime) SetCalcMode(v int32) {
	o.CalcMode = &v
}

// GetJobLinks returns the JobLinks field value if set, zero value otherwise.
func (o *RepairTime) GetJobLinks() []RepairTimesJobLink {
	if o == nil || IsNil(o.JobLinks) {
		var ret []RepairTimesJobLink
		return ret
	}
	return o.JobLinks
}

// GetJobLinksOk returns a tuple with the JobLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTime) GetJobLinksOk() ([]RepairTimesJobLink, bool) {
	if o == nil || IsNil(o.JobLinks) {
		return nil, false
	}
	return o.JobLinks, true
}

// HasJobLinks returns a boolean if a field has been set.
func (o *RepairTime) HasJobLinks() bool {
	if o != nil && !IsNil(o.JobLinks) {
		return true
	}

	return false
}

// SetJobLinks gets a reference to the given []RepairTimesJobLink and assigns it to the JobLinks field.
func (o *RepairTime) SetJobLinks(v []RepairTimesJobLink) {
	o.JobLinks = v
}

func (o RepairTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepairTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.VariantCode) {
		toSerialize["variantCode"] = o.VariantCode
	}
	if !IsNil(o.VariantText) {
		toSerialize["variantText"] = o.VariantText
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.GenericArticleNo) {
		toSerialize["genericArticleNo"] = o.GenericArticleNo
	}
	if !IsNil(o.CalcMode) {
		toSerialize["calcMode"] = o.CalcMode
	}
	if !IsNil(o.JobLinks) {
		toSerialize["jobLinks"] = o.JobLinks
	}
	return toSerialize, nil
}

type NullableRepairTime struct {
	value *RepairTime
	isSet bool
}

func (v NullableRepairTime) Get() *RepairTime {
	return v.value
}

func (v *NullableRepairTime) Set(val *RepairTime) {
	v.value = val
	v.isSet = true
}

func (v NullableRepairTime) IsSet() bool {
	return v.isSet
}

func (v *NullableRepairTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepairTime(val *RepairTime) *NullableRepairTime {
	return &NullableRepairTime{value: val, isSet: true}
}

func (v NullableRepairTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepairTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


