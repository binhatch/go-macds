/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the ComponentDataV3ResponseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentDataV3ResponseDTO{}

// ComponentDataV3ResponseDTO struct for ComponentDataV3ResponseDTO
type ComponentDataV3ResponseDTO struct {
	// KType number
	Ktypeno *int32 `json:"ktypeno,omitempty"`
	System *SystemDTO `json:"system,omitempty"`
	// Subsystem
	SubSystem *string `json:"subSystem,omitempty"`
	ComponentName *ComponentNameDTO `json:"componentName,omitempty"`
	// ID ECU Image
	IdImageECU *int32 `json:"idImageECU,omitempty"`
	// Pin From
	PinFrom *string `json:"pinFrom,omitempty"`
	PinTo *TranslationDTO `json:"pinTo,omitempty"`
	ValueFrom *ValueDTO `json:"valueFrom,omitempty"`
	ValueTo *ValueDTO `json:"valueTo,omitempty"`
	PinMeasurementFunction *TranslationDTO `json:"pinMeasurementFunction,omitempty"`
	PinMeasurementType *TranslationDTO `json:"pinMeasurementType,omitempty"`
	VehicleState *TranslationDTO `json:"vehicleState,omitempty"`
	MeasurementCondition *TranslationDTO `json:"measurementCondition,omitempty"`
	// Image Pin From X1
	ImagePinFromX1 *int32 `json:"imagePinFromX1,omitempty"`
	// Image Pin From Y1
	ImagePinFromY1 *int32 `json:"imagePinFromY1,omitempty"`
	// Image Pin From Width
	ImagePinFromWidth *int32 `json:"imagePinFromWidth,omitempty"`
	// Image Pin From Heught
	ImagePinFromHeight *int32 `json:"imagePinFromHeight,omitempty"`
	// Image Pin To X
	ImagePinToX *int32 `json:"imagePinToX,omitempty"`
	// Image Pin To Y
	ImagePinToY *int32 `json:"imagePinToY,omitempty"`
	// Image Pin To Width
	ImagePinToWidth *int32 `json:"imagePinToWidth,omitempty"`
	// Image Pin To Height
	ImagePinToHeight *int32 `json:"imagePinToHeight,omitempty"`
	// Id Scope Imag
	IdScopeImage *int32 `json:"idScopeImage,omitempty"`
	// Division X Value
	DivisionXValue *float64 `json:"divisionXValue,omitempty"`
	DivisionXUnit *TranslationDTO `json:"divisionXUnit,omitempty"`
	// Division Y Value
	DivisionYValue *float64 `json:"divisionYValue,omitempty"`
	DivisionYUnit *TranslationDTO `json:"divisionYUnit,omitempty"`
	// Offset Y Axis
	OffsetYAxis *int32 `json:"offsetYAxis,omitempty"`
	// Pin Scope Coupling Type
	PinScopeCouplingType *string `json:"pinScopeCouplingType,omitempty"`
	ScopeSettingsFunctionType *TranslationDTO `json:"scopeSettingsFunctionType,omitempty"`
	// Component Pin From
	ComponentPinFrom *string `json:"componentPinFrom,omitempty"`
	// Component Pin To
	ComponentPinTo *string `json:"componentPinTo,omitempty"`
	// Cable Identifier From
	CableIdentifierFrom *string `json:"cableIdentifierFrom,omitempty"`
	// Cable Identifier To
	CableIdentifierTo *string `json:"cableIdentifierTo,omitempty"`
	// Year From
	YearFrom *string `json:"yearFrom,omitempty"`
	// Year To
	YearTo *string `json:"yearTo,omitempty"`
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
}

// NewComponentDataV3ResponseDTO instantiates a new ComponentDataV3ResponseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentDataV3ResponseDTO() *ComponentDataV3ResponseDTO {
	this := ComponentDataV3ResponseDTO{}
	return &this
}

// NewComponentDataV3ResponseDTOWithDefaults instantiates a new ComponentDataV3ResponseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentDataV3ResponseDTOWithDefaults() *ComponentDataV3ResponseDTO {
	this := ComponentDataV3ResponseDTO{}
	return &this
}

// GetKtypeno returns the Ktypeno field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetKtypeno() int32 {
	if o == nil || IsNil(o.Ktypeno) {
		var ret int32
		return ret
	}
	return *o.Ktypeno
}

// GetKtypenoOk returns a tuple with the Ktypeno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetKtypenoOk() (*int32, bool) {
	if o == nil || IsNil(o.Ktypeno) {
		return nil, false
	}
	return o.Ktypeno, true
}

// HasKtypeno returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasKtypeno() bool {
	if o != nil && !IsNil(o.Ktypeno) {
		return true
	}

	return false
}

// SetKtypeno gets a reference to the given int32 and assigns it to the Ktypeno field.
func (o *ComponentDataV3ResponseDTO) SetKtypeno(v int32) {
	o.Ktypeno = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetSystem() SystemDTO {
	if o == nil || IsNil(o.System) {
		var ret SystemDTO
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetSystemOk() (*SystemDTO, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given SystemDTO and assigns it to the System field.
func (o *ComponentDataV3ResponseDTO) SetSystem(v SystemDTO) {
	o.System = &v
}

// GetSubSystem returns the SubSystem field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetSubSystem() string {
	if o == nil || IsNil(o.SubSystem) {
		var ret string
		return ret
	}
	return *o.SubSystem
}

// GetSubSystemOk returns a tuple with the SubSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetSubSystemOk() (*string, bool) {
	if o == nil || IsNil(o.SubSystem) {
		return nil, false
	}
	return o.SubSystem, true
}

// HasSubSystem returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasSubSystem() bool {
	if o != nil && !IsNil(o.SubSystem) {
		return true
	}

	return false
}

// SetSubSystem gets a reference to the given string and assigns it to the SubSystem field.
func (o *ComponentDataV3ResponseDTO) SetSubSystem(v string) {
	o.SubSystem = &v
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetComponentName() ComponentNameDTO {
	if o == nil || IsNil(o.ComponentName) {
		var ret ComponentNameDTO
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetComponentNameOk() (*ComponentNameDTO, bool) {
	if o == nil || IsNil(o.ComponentName) {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasComponentName() bool {
	if o != nil && !IsNil(o.ComponentName) {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given ComponentNameDTO and assigns it to the ComponentName field.
func (o *ComponentDataV3ResponseDTO) SetComponentName(v ComponentNameDTO) {
	o.ComponentName = &v
}

// GetIdImageECU returns the IdImageECU field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetIdImageECU() int32 {
	if o == nil || IsNil(o.IdImageECU) {
		var ret int32
		return ret
	}
	return *o.IdImageECU
}

// GetIdImageECUOk returns a tuple with the IdImageECU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetIdImageECUOk() (*int32, bool) {
	if o == nil || IsNil(o.IdImageECU) {
		return nil, false
	}
	return o.IdImageECU, true
}

// HasIdImageECU returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasIdImageECU() bool {
	if o != nil && !IsNil(o.IdImageECU) {
		return true
	}

	return false
}

// SetIdImageECU gets a reference to the given int32 and assigns it to the IdImageECU field.
func (o *ComponentDataV3ResponseDTO) SetIdImageECU(v int32) {
	o.IdImageECU = &v
}

// GetPinFrom returns the PinFrom field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetPinFrom() string {
	if o == nil || IsNil(o.PinFrom) {
		var ret string
		return ret
	}
	return *o.PinFrom
}

// GetPinFromOk returns a tuple with the PinFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetPinFromOk() (*string, bool) {
	if o == nil || IsNil(o.PinFrom) {
		return nil, false
	}
	return o.PinFrom, true
}

// HasPinFrom returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasPinFrom() bool {
	if o != nil && !IsNil(o.PinFrom) {
		return true
	}

	return false
}

// SetPinFrom gets a reference to the given string and assigns it to the PinFrom field.
func (o *ComponentDataV3ResponseDTO) SetPinFrom(v string) {
	o.PinFrom = &v
}

// GetPinTo returns the PinTo field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetPinTo() TranslationDTO {
	if o == nil || IsNil(o.PinTo) {
		var ret TranslationDTO
		return ret
	}
	return *o.PinTo
}

// GetPinToOk returns a tuple with the PinTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetPinToOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.PinTo) {
		return nil, false
	}
	return o.PinTo, true
}

// HasPinTo returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasPinTo() bool {
	if o != nil && !IsNil(o.PinTo) {
		return true
	}

	return false
}

// SetPinTo gets a reference to the given TranslationDTO and assigns it to the PinTo field.
func (o *ComponentDataV3ResponseDTO) SetPinTo(v TranslationDTO) {
	o.PinTo = &v
}

// GetValueFrom returns the ValueFrom field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetValueFrom() ValueDTO {
	if o == nil || IsNil(o.ValueFrom) {
		var ret ValueDTO
		return ret
	}
	return *o.ValueFrom
}

// GetValueFromOk returns a tuple with the ValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetValueFromOk() (*ValueDTO, bool) {
	if o == nil || IsNil(o.ValueFrom) {
		return nil, false
	}
	return o.ValueFrom, true
}

// HasValueFrom returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasValueFrom() bool {
	if o != nil && !IsNil(o.ValueFrom) {
		return true
	}

	return false
}

// SetValueFrom gets a reference to the given ValueDTO and assigns it to the ValueFrom field.
func (o *ComponentDataV3ResponseDTO) SetValueFrom(v ValueDTO) {
	o.ValueFrom = &v
}

// GetValueTo returns the ValueTo field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetValueTo() ValueDTO {
	if o == nil || IsNil(o.ValueTo) {
		var ret ValueDTO
		return ret
	}
	return *o.ValueTo
}

// GetValueToOk returns a tuple with the ValueTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetValueToOk() (*ValueDTO, bool) {
	if o == nil || IsNil(o.ValueTo) {
		return nil, false
	}
	return o.ValueTo, true
}

// HasValueTo returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasValueTo() bool {
	if o != nil && !IsNil(o.ValueTo) {
		return true
	}

	return false
}

// SetValueTo gets a reference to the given ValueDTO and assigns it to the ValueTo field.
func (o *ComponentDataV3ResponseDTO) SetValueTo(v ValueDTO) {
	o.ValueTo = &v
}

// GetPinMeasurementFunction returns the PinMeasurementFunction field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetPinMeasurementFunction() TranslationDTO {
	if o == nil || IsNil(o.PinMeasurementFunction) {
		var ret TranslationDTO
		return ret
	}
	return *o.PinMeasurementFunction
}

// GetPinMeasurementFunctionOk returns a tuple with the PinMeasurementFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetPinMeasurementFunctionOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.PinMeasurementFunction) {
		return nil, false
	}
	return o.PinMeasurementFunction, true
}

// HasPinMeasurementFunction returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasPinMeasurementFunction() bool {
	if o != nil && !IsNil(o.PinMeasurementFunction) {
		return true
	}

	return false
}

// SetPinMeasurementFunction gets a reference to the given TranslationDTO and assigns it to the PinMeasurementFunction field.
func (o *ComponentDataV3ResponseDTO) SetPinMeasurementFunction(v TranslationDTO) {
	o.PinMeasurementFunction = &v
}

// GetPinMeasurementType returns the PinMeasurementType field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetPinMeasurementType() TranslationDTO {
	if o == nil || IsNil(o.PinMeasurementType) {
		var ret TranslationDTO
		return ret
	}
	return *o.PinMeasurementType
}

// GetPinMeasurementTypeOk returns a tuple with the PinMeasurementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetPinMeasurementTypeOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.PinMeasurementType) {
		return nil, false
	}
	return o.PinMeasurementType, true
}

// HasPinMeasurementType returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasPinMeasurementType() bool {
	if o != nil && !IsNil(o.PinMeasurementType) {
		return true
	}

	return false
}

// SetPinMeasurementType gets a reference to the given TranslationDTO and assigns it to the PinMeasurementType field.
func (o *ComponentDataV3ResponseDTO) SetPinMeasurementType(v TranslationDTO) {
	o.PinMeasurementType = &v
}

// GetVehicleState returns the VehicleState field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetVehicleState() TranslationDTO {
	if o == nil || IsNil(o.VehicleState) {
		var ret TranslationDTO
		return ret
	}
	return *o.VehicleState
}

// GetVehicleStateOk returns a tuple with the VehicleState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetVehicleStateOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.VehicleState) {
		return nil, false
	}
	return o.VehicleState, true
}

// HasVehicleState returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasVehicleState() bool {
	if o != nil && !IsNil(o.VehicleState) {
		return true
	}

	return false
}

// SetVehicleState gets a reference to the given TranslationDTO and assigns it to the VehicleState field.
func (o *ComponentDataV3ResponseDTO) SetVehicleState(v TranslationDTO) {
	o.VehicleState = &v
}

// GetMeasurementCondition returns the MeasurementCondition field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetMeasurementCondition() TranslationDTO {
	if o == nil || IsNil(o.MeasurementCondition) {
		var ret TranslationDTO
		return ret
	}
	return *o.MeasurementCondition
}

// GetMeasurementConditionOk returns a tuple with the MeasurementCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetMeasurementConditionOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.MeasurementCondition) {
		return nil, false
	}
	return o.MeasurementCondition, true
}

// HasMeasurementCondition returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasMeasurementCondition() bool {
	if o != nil && !IsNil(o.MeasurementCondition) {
		return true
	}

	return false
}

// SetMeasurementCondition gets a reference to the given TranslationDTO and assigns it to the MeasurementCondition field.
func (o *ComponentDataV3ResponseDTO) SetMeasurementCondition(v TranslationDTO) {
	o.MeasurementCondition = &v
}

// GetImagePinFromX1 returns the ImagePinFromX1 field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromX1() int32 {
	if o == nil || IsNil(o.ImagePinFromX1) {
		var ret int32
		return ret
	}
	return *o.ImagePinFromX1
}

// GetImagePinFromX1Ok returns a tuple with the ImagePinFromX1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromX1Ok() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinFromX1) {
		return nil, false
	}
	return o.ImagePinFromX1, true
}

// HasImagePinFromX1 returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinFromX1() bool {
	if o != nil && !IsNil(o.ImagePinFromX1) {
		return true
	}

	return false
}

// SetImagePinFromX1 gets a reference to the given int32 and assigns it to the ImagePinFromX1 field.
func (o *ComponentDataV3ResponseDTO) SetImagePinFromX1(v int32) {
	o.ImagePinFromX1 = &v
}

// GetImagePinFromY1 returns the ImagePinFromY1 field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromY1() int32 {
	if o == nil || IsNil(o.ImagePinFromY1) {
		var ret int32
		return ret
	}
	return *o.ImagePinFromY1
}

// GetImagePinFromY1Ok returns a tuple with the ImagePinFromY1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromY1Ok() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinFromY1) {
		return nil, false
	}
	return o.ImagePinFromY1, true
}

// HasImagePinFromY1 returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinFromY1() bool {
	if o != nil && !IsNil(o.ImagePinFromY1) {
		return true
	}

	return false
}

// SetImagePinFromY1 gets a reference to the given int32 and assigns it to the ImagePinFromY1 field.
func (o *ComponentDataV3ResponseDTO) SetImagePinFromY1(v int32) {
	o.ImagePinFromY1 = &v
}

// GetImagePinFromWidth returns the ImagePinFromWidth field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromWidth() int32 {
	if o == nil || IsNil(o.ImagePinFromWidth) {
		var ret int32
		return ret
	}
	return *o.ImagePinFromWidth
}

// GetImagePinFromWidthOk returns a tuple with the ImagePinFromWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinFromWidth) {
		return nil, false
	}
	return o.ImagePinFromWidth, true
}

// HasImagePinFromWidth returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinFromWidth() bool {
	if o != nil && !IsNil(o.ImagePinFromWidth) {
		return true
	}

	return false
}

// SetImagePinFromWidth gets a reference to the given int32 and assigns it to the ImagePinFromWidth field.
func (o *ComponentDataV3ResponseDTO) SetImagePinFromWidth(v int32) {
	o.ImagePinFromWidth = &v
}

// GetImagePinFromHeight returns the ImagePinFromHeight field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromHeight() int32 {
	if o == nil || IsNil(o.ImagePinFromHeight) {
		var ret int32
		return ret
	}
	return *o.ImagePinFromHeight
}

// GetImagePinFromHeightOk returns a tuple with the ImagePinFromHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinFromHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinFromHeight) {
		return nil, false
	}
	return o.ImagePinFromHeight, true
}

// HasImagePinFromHeight returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinFromHeight() bool {
	if o != nil && !IsNil(o.ImagePinFromHeight) {
		return true
	}

	return false
}

// SetImagePinFromHeight gets a reference to the given int32 and assigns it to the ImagePinFromHeight field.
func (o *ComponentDataV3ResponseDTO) SetImagePinFromHeight(v int32) {
	o.ImagePinFromHeight = &v
}

// GetImagePinToX returns the ImagePinToX field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinToX() int32 {
	if o == nil || IsNil(o.ImagePinToX) {
		var ret int32
		return ret
	}
	return *o.ImagePinToX
}

// GetImagePinToXOk returns a tuple with the ImagePinToX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinToXOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinToX) {
		return nil, false
	}
	return o.ImagePinToX, true
}

// HasImagePinToX returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinToX() bool {
	if o != nil && !IsNil(o.ImagePinToX) {
		return true
	}

	return false
}

// SetImagePinToX gets a reference to the given int32 and assigns it to the ImagePinToX field.
func (o *ComponentDataV3ResponseDTO) SetImagePinToX(v int32) {
	o.ImagePinToX = &v
}

// GetImagePinToY returns the ImagePinToY field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinToY() int32 {
	if o == nil || IsNil(o.ImagePinToY) {
		var ret int32
		return ret
	}
	return *o.ImagePinToY
}

// GetImagePinToYOk returns a tuple with the ImagePinToY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinToYOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinToY) {
		return nil, false
	}
	return o.ImagePinToY, true
}

// HasImagePinToY returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinToY() bool {
	if o != nil && !IsNil(o.ImagePinToY) {
		return true
	}

	return false
}

// SetImagePinToY gets a reference to the given int32 and assigns it to the ImagePinToY field.
func (o *ComponentDataV3ResponseDTO) SetImagePinToY(v int32) {
	o.ImagePinToY = &v
}

// GetImagePinToWidth returns the ImagePinToWidth field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinToWidth() int32 {
	if o == nil || IsNil(o.ImagePinToWidth) {
		var ret int32
		return ret
	}
	return *o.ImagePinToWidth
}

// GetImagePinToWidthOk returns a tuple with the ImagePinToWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinToWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinToWidth) {
		return nil, false
	}
	return o.ImagePinToWidth, true
}

// HasImagePinToWidth returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinToWidth() bool {
	if o != nil && !IsNil(o.ImagePinToWidth) {
		return true
	}

	return false
}

// SetImagePinToWidth gets a reference to the given int32 and assigns it to the ImagePinToWidth field.
func (o *ComponentDataV3ResponseDTO) SetImagePinToWidth(v int32) {
	o.ImagePinToWidth = &v
}

// GetImagePinToHeight returns the ImagePinToHeight field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetImagePinToHeight() int32 {
	if o == nil || IsNil(o.ImagePinToHeight) {
		var ret int32
		return ret
	}
	return *o.ImagePinToHeight
}

// GetImagePinToHeightOk returns a tuple with the ImagePinToHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetImagePinToHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.ImagePinToHeight) {
		return nil, false
	}
	return o.ImagePinToHeight, true
}

// HasImagePinToHeight returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasImagePinToHeight() bool {
	if o != nil && !IsNil(o.ImagePinToHeight) {
		return true
	}

	return false
}

// SetImagePinToHeight gets a reference to the given int32 and assigns it to the ImagePinToHeight field.
func (o *ComponentDataV3ResponseDTO) SetImagePinToHeight(v int32) {
	o.ImagePinToHeight = &v
}

// GetIdScopeImage returns the IdScopeImage field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetIdScopeImage() int32 {
	if o == nil || IsNil(o.IdScopeImage) {
		var ret int32
		return ret
	}
	return *o.IdScopeImage
}

// GetIdScopeImageOk returns a tuple with the IdScopeImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetIdScopeImageOk() (*int32, bool) {
	if o == nil || IsNil(o.IdScopeImage) {
		return nil, false
	}
	return o.IdScopeImage, true
}

// HasIdScopeImage returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasIdScopeImage() bool {
	if o != nil && !IsNil(o.IdScopeImage) {
		return true
	}

	return false
}

// SetIdScopeImage gets a reference to the given int32 and assigns it to the IdScopeImage field.
func (o *ComponentDataV3ResponseDTO) SetIdScopeImage(v int32) {
	o.IdScopeImage = &v
}

// GetDivisionXValue returns the DivisionXValue field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetDivisionXValue() float64 {
	if o == nil || IsNil(o.DivisionXValue) {
		var ret float64
		return ret
	}
	return *o.DivisionXValue
}

// GetDivisionXValueOk returns a tuple with the DivisionXValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetDivisionXValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DivisionXValue) {
		return nil, false
	}
	return o.DivisionXValue, true
}

// HasDivisionXValue returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasDivisionXValue() bool {
	if o != nil && !IsNil(o.DivisionXValue) {
		return true
	}

	return false
}

// SetDivisionXValue gets a reference to the given float64 and assigns it to the DivisionXValue field.
func (o *ComponentDataV3ResponseDTO) SetDivisionXValue(v float64) {
	o.DivisionXValue = &v
}

// GetDivisionXUnit returns the DivisionXUnit field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetDivisionXUnit() TranslationDTO {
	if o == nil || IsNil(o.DivisionXUnit) {
		var ret TranslationDTO
		return ret
	}
	return *o.DivisionXUnit
}

// GetDivisionXUnitOk returns a tuple with the DivisionXUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetDivisionXUnitOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.DivisionXUnit) {
		return nil, false
	}
	return o.DivisionXUnit, true
}

// HasDivisionXUnit returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasDivisionXUnit() bool {
	if o != nil && !IsNil(o.DivisionXUnit) {
		return true
	}

	return false
}

// SetDivisionXUnit gets a reference to the given TranslationDTO and assigns it to the DivisionXUnit field.
func (o *ComponentDataV3ResponseDTO) SetDivisionXUnit(v TranslationDTO) {
	o.DivisionXUnit = &v
}

// GetDivisionYValue returns the DivisionYValue field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetDivisionYValue() float64 {
	if o == nil || IsNil(o.DivisionYValue) {
		var ret float64
		return ret
	}
	return *o.DivisionYValue
}

// GetDivisionYValueOk returns a tuple with the DivisionYValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetDivisionYValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DivisionYValue) {
		return nil, false
	}
	return o.DivisionYValue, true
}

// HasDivisionYValue returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasDivisionYValue() bool {
	if o != nil && !IsNil(o.DivisionYValue) {
		return true
	}

	return false
}

// SetDivisionYValue gets a reference to the given float64 and assigns it to the DivisionYValue field.
func (o *ComponentDataV3ResponseDTO) SetDivisionYValue(v float64) {
	o.DivisionYValue = &v
}

// GetDivisionYUnit returns the DivisionYUnit field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetDivisionYUnit() TranslationDTO {
	if o == nil || IsNil(o.DivisionYUnit) {
		var ret TranslationDTO
		return ret
	}
	return *o.DivisionYUnit
}

// GetDivisionYUnitOk returns a tuple with the DivisionYUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetDivisionYUnitOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.DivisionYUnit) {
		return nil, false
	}
	return o.DivisionYUnit, true
}

// HasDivisionYUnit returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasDivisionYUnit() bool {
	if o != nil && !IsNil(o.DivisionYUnit) {
		return true
	}

	return false
}

// SetDivisionYUnit gets a reference to the given TranslationDTO and assigns it to the DivisionYUnit field.
func (o *ComponentDataV3ResponseDTO) SetDivisionYUnit(v TranslationDTO) {
	o.DivisionYUnit = &v
}

// GetOffsetYAxis returns the OffsetYAxis field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetOffsetYAxis() int32 {
	if o == nil || IsNil(o.OffsetYAxis) {
		var ret int32
		return ret
	}
	return *o.OffsetYAxis
}

// GetOffsetYAxisOk returns a tuple with the OffsetYAxis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetOffsetYAxisOk() (*int32, bool) {
	if o == nil || IsNil(o.OffsetYAxis) {
		return nil, false
	}
	return o.OffsetYAxis, true
}

// HasOffsetYAxis returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasOffsetYAxis() bool {
	if o != nil && !IsNil(o.OffsetYAxis) {
		return true
	}

	return false
}

// SetOffsetYAxis gets a reference to the given int32 and assigns it to the OffsetYAxis field.
func (o *ComponentDataV3ResponseDTO) SetOffsetYAxis(v int32) {
	o.OffsetYAxis = &v
}

// GetPinScopeCouplingType returns the PinScopeCouplingType field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetPinScopeCouplingType() string {
	if o == nil || IsNil(o.PinScopeCouplingType) {
		var ret string
		return ret
	}
	return *o.PinScopeCouplingType
}

// GetPinScopeCouplingTypeOk returns a tuple with the PinScopeCouplingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetPinScopeCouplingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PinScopeCouplingType) {
		return nil, false
	}
	return o.PinScopeCouplingType, true
}

// HasPinScopeCouplingType returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasPinScopeCouplingType() bool {
	if o != nil && !IsNil(o.PinScopeCouplingType) {
		return true
	}

	return false
}

// SetPinScopeCouplingType gets a reference to the given string and assigns it to the PinScopeCouplingType field.
func (o *ComponentDataV3ResponseDTO) SetPinScopeCouplingType(v string) {
	o.PinScopeCouplingType = &v
}

// GetScopeSettingsFunctionType returns the ScopeSettingsFunctionType field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetScopeSettingsFunctionType() TranslationDTO {
	if o == nil || IsNil(o.ScopeSettingsFunctionType) {
		var ret TranslationDTO
		return ret
	}
	return *o.ScopeSettingsFunctionType
}

// GetScopeSettingsFunctionTypeOk returns a tuple with the ScopeSettingsFunctionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetScopeSettingsFunctionTypeOk() (*TranslationDTO, bool) {
	if o == nil || IsNil(o.ScopeSettingsFunctionType) {
		return nil, false
	}
	return o.ScopeSettingsFunctionType, true
}

// HasScopeSettingsFunctionType returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasScopeSettingsFunctionType() bool {
	if o != nil && !IsNil(o.ScopeSettingsFunctionType) {
		return true
	}

	return false
}

// SetScopeSettingsFunctionType gets a reference to the given TranslationDTO and assigns it to the ScopeSettingsFunctionType field.
func (o *ComponentDataV3ResponseDTO) SetScopeSettingsFunctionType(v TranslationDTO) {
	o.ScopeSettingsFunctionType = &v
}

// GetComponentPinFrom returns the ComponentPinFrom field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetComponentPinFrom() string {
	if o == nil || IsNil(o.ComponentPinFrom) {
		var ret string
		return ret
	}
	return *o.ComponentPinFrom
}

// GetComponentPinFromOk returns a tuple with the ComponentPinFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetComponentPinFromOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentPinFrom) {
		return nil, false
	}
	return o.ComponentPinFrom, true
}

// HasComponentPinFrom returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasComponentPinFrom() bool {
	if o != nil && !IsNil(o.ComponentPinFrom) {
		return true
	}

	return false
}

// SetComponentPinFrom gets a reference to the given string and assigns it to the ComponentPinFrom field.
func (o *ComponentDataV3ResponseDTO) SetComponentPinFrom(v string) {
	o.ComponentPinFrom = &v
}

// GetComponentPinTo returns the ComponentPinTo field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetComponentPinTo() string {
	if o == nil || IsNil(o.ComponentPinTo) {
		var ret string
		return ret
	}
	return *o.ComponentPinTo
}

// GetComponentPinToOk returns a tuple with the ComponentPinTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetComponentPinToOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentPinTo) {
		return nil, false
	}
	return o.ComponentPinTo, true
}

// HasComponentPinTo returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasComponentPinTo() bool {
	if o != nil && !IsNil(o.ComponentPinTo) {
		return true
	}

	return false
}

// SetComponentPinTo gets a reference to the given string and assigns it to the ComponentPinTo field.
func (o *ComponentDataV3ResponseDTO) SetComponentPinTo(v string) {
	o.ComponentPinTo = &v
}

// GetCableIdentifierFrom returns the CableIdentifierFrom field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetCableIdentifierFrom() string {
	if o == nil || IsNil(o.CableIdentifierFrom) {
		var ret string
		return ret
	}
	return *o.CableIdentifierFrom
}

// GetCableIdentifierFromOk returns a tuple with the CableIdentifierFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetCableIdentifierFromOk() (*string, bool) {
	if o == nil || IsNil(o.CableIdentifierFrom) {
		return nil, false
	}
	return o.CableIdentifierFrom, true
}

// HasCableIdentifierFrom returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasCableIdentifierFrom() bool {
	if o != nil && !IsNil(o.CableIdentifierFrom) {
		return true
	}

	return false
}

// SetCableIdentifierFrom gets a reference to the given string and assigns it to the CableIdentifierFrom field.
func (o *ComponentDataV3ResponseDTO) SetCableIdentifierFrom(v string) {
	o.CableIdentifierFrom = &v
}

// GetCableIdentifierTo returns the CableIdentifierTo field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetCableIdentifierTo() string {
	if o == nil || IsNil(o.CableIdentifierTo) {
		var ret string
		return ret
	}
	return *o.CableIdentifierTo
}

// GetCableIdentifierToOk returns a tuple with the CableIdentifierTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetCableIdentifierToOk() (*string, bool) {
	if o == nil || IsNil(o.CableIdentifierTo) {
		return nil, false
	}
	return o.CableIdentifierTo, true
}

// HasCableIdentifierTo returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasCableIdentifierTo() bool {
	if o != nil && !IsNil(o.CableIdentifierTo) {
		return true
	}

	return false
}

// SetCableIdentifierTo gets a reference to the given string and assigns it to the CableIdentifierTo field.
func (o *ComponentDataV3ResponseDTO) SetCableIdentifierTo(v string) {
	o.CableIdentifierTo = &v
}

// GetYearFrom returns the YearFrom field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetYearFrom() string {
	if o == nil || IsNil(o.YearFrom) {
		var ret string
		return ret
	}
	return *o.YearFrom
}

// GetYearFromOk returns a tuple with the YearFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetYearFromOk() (*string, bool) {
	if o == nil || IsNil(o.YearFrom) {
		return nil, false
	}
	return o.YearFrom, true
}

// HasYearFrom returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasYearFrom() bool {
	if o != nil && !IsNil(o.YearFrom) {
		return true
	}

	return false
}

// SetYearFrom gets a reference to the given string and assigns it to the YearFrom field.
func (o *ComponentDataV3ResponseDTO) SetYearFrom(v string) {
	o.YearFrom = &v
}

// GetYearTo returns the YearTo field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetYearTo() string {
	if o == nil || IsNil(o.YearTo) {
		var ret string
		return ret
	}
	return *o.YearTo
}

// GetYearToOk returns a tuple with the YearTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetYearToOk() (*string, bool) {
	if o == nil || IsNil(o.YearTo) {
		return nil, false
	}
	return o.YearTo, true
}

// HasYearTo returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasYearTo() bool {
	if o != nil && !IsNil(o.YearTo) {
		return true
	}

	return false
}

// SetYearTo gets a reference to the given string and assigns it to the YearTo field.
func (o *ComponentDataV3ResponseDTO) SetYearTo(v string) {
	o.YearTo = &v
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *ComponentDataV3ResponseDTO) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentDataV3ResponseDTO) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *ComponentDataV3ResponseDTO) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *ComponentDataV3ResponseDTO) SetEngineCode(v string) {
	o.EngineCode = &v
}

func (o ComponentDataV3ResponseDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentDataV3ResponseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ktypeno) {
		toSerialize["ktypeno"] = o.Ktypeno
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.SubSystem) {
		toSerialize["subSystem"] = o.SubSystem
	}
	if !IsNil(o.ComponentName) {
		toSerialize["componentName"] = o.ComponentName
	}
	if !IsNil(o.IdImageECU) {
		toSerialize["idImageECU"] = o.IdImageECU
	}
	if !IsNil(o.PinFrom) {
		toSerialize["pinFrom"] = o.PinFrom
	}
	if !IsNil(o.PinTo) {
		toSerialize["pinTo"] = o.PinTo
	}
	if !IsNil(o.ValueFrom) {
		toSerialize["valueFrom"] = o.ValueFrom
	}
	if !IsNil(o.ValueTo) {
		toSerialize["valueTo"] = o.ValueTo
	}
	if !IsNil(o.PinMeasurementFunction) {
		toSerialize["pinMeasurementFunction"] = o.PinMeasurementFunction
	}
	if !IsNil(o.PinMeasurementType) {
		toSerialize["pinMeasurementType"] = o.PinMeasurementType
	}
	if !IsNil(o.VehicleState) {
		toSerialize["vehicleState"] = o.VehicleState
	}
	if !IsNil(o.MeasurementCondition) {
		toSerialize["measurementCondition"] = o.MeasurementCondition
	}
	if !IsNil(o.ImagePinFromX1) {
		toSerialize["imagePinFromX1"] = o.ImagePinFromX1
	}
	if !IsNil(o.ImagePinFromY1) {
		toSerialize["imagePinFromY1"] = o.ImagePinFromY1
	}
	if !IsNil(o.ImagePinFromWidth) {
		toSerialize["imagePinFromWidth"] = o.ImagePinFromWidth
	}
	if !IsNil(o.ImagePinFromHeight) {
		toSerialize["imagePinFromHeight"] = o.ImagePinFromHeight
	}
	if !IsNil(o.ImagePinToX) {
		toSerialize["imagePinToX"] = o.ImagePinToX
	}
	if !IsNil(o.ImagePinToY) {
		toSerialize["imagePinToY"] = o.ImagePinToY
	}
	if !IsNil(o.ImagePinToWidth) {
		toSerialize["imagePinToWidth"] = o.ImagePinToWidth
	}
	if !IsNil(o.ImagePinToHeight) {
		toSerialize["imagePinToHeight"] = o.ImagePinToHeight
	}
	if !IsNil(o.IdScopeImage) {
		toSerialize["idScopeImage"] = o.IdScopeImage
	}
	if !IsNil(o.DivisionXValue) {
		toSerialize["divisionXValue"] = o.DivisionXValue
	}
	if !IsNil(o.DivisionXUnit) {
		toSerialize["divisionXUnit"] = o.DivisionXUnit
	}
	if !IsNil(o.DivisionYValue) {
		toSerialize["divisionYValue"] = o.DivisionYValue
	}
	if !IsNil(o.DivisionYUnit) {
		toSerialize["divisionYUnit"] = o.DivisionYUnit
	}
	if !IsNil(o.OffsetYAxis) {
		toSerialize["offsetYAxis"] = o.OffsetYAxis
	}
	if !IsNil(o.PinScopeCouplingType) {
		toSerialize["pinScopeCouplingType"] = o.PinScopeCouplingType
	}
	if !IsNil(o.ScopeSettingsFunctionType) {
		toSerialize["scopeSettingsFunctionType"] = o.ScopeSettingsFunctionType
	}
	if !IsNil(o.ComponentPinFrom) {
		toSerialize["componentPinFrom"] = o.ComponentPinFrom
	}
	if !IsNil(o.ComponentPinTo) {
		toSerialize["componentPinTo"] = o.ComponentPinTo
	}
	if !IsNil(o.CableIdentifierFrom) {
		toSerialize["cableIdentifierFrom"] = o.CableIdentifierFrom
	}
	if !IsNil(o.CableIdentifierTo) {
		toSerialize["cableIdentifierTo"] = o.CableIdentifierTo
	}
	if !IsNil(o.YearFrom) {
		toSerialize["yearFrom"] = o.YearFrom
	}
	if !IsNil(o.YearTo) {
		toSerialize["yearTo"] = o.YearTo
	}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	return toSerialize, nil
}

type NullableComponentDataV3ResponseDTO struct {
	value *ComponentDataV3ResponseDTO
	isSet bool
}

func (v NullableComponentDataV3ResponseDTO) Get() *ComponentDataV3ResponseDTO {
	return v.value
}

func (v *NullableComponentDataV3ResponseDTO) Set(val *ComponentDataV3ResponseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentDataV3ResponseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentDataV3ResponseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentDataV3ResponseDTO(val *ComponentDataV3ResponseDTO) *NullableComponentDataV3ResponseDTO {
	return &NullableComponentDataV3ResponseDTO{value: val, isSet: true}
}

func (v NullableComponentDataV3ResponseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentDataV3ResponseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


