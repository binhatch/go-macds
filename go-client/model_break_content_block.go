/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the BreakContentBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BreakContentBlock{}

// BreakContentBlock struct for BreakContentBlock
type BreakContentBlock struct {
	// Order
	Order *int32 `json:"order,omitempty"`
	// Suggestion of the text format for the respective content block. Values can be \"break-line\" or \"break-page\".
	TextFormatType *string `json:"textFormatType,omitempty"`
	// Break Type
	Type *string `json:"type,omitempty"`
}

// NewBreakContentBlock instantiates a new BreakContentBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBreakContentBlock() *BreakContentBlock {
	this := BreakContentBlock{}
	return &this
}

// NewBreakContentBlockWithDefaults instantiates a new BreakContentBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBreakContentBlockWithDefaults() *BreakContentBlock {
	this := BreakContentBlock{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *BreakContentBlock) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakContentBlock) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *BreakContentBlock) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *BreakContentBlock) SetOrder(v int32) {
	o.Order = &v
}

// GetTextFormatType returns the TextFormatType field value if set, zero value otherwise.
func (o *BreakContentBlock) GetTextFormatType() string {
	if o == nil || IsNil(o.TextFormatType) {
		var ret string
		return ret
	}
	return *o.TextFormatType
}

// GetTextFormatTypeOk returns a tuple with the TextFormatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakContentBlock) GetTextFormatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TextFormatType) {
		return nil, false
	}
	return o.TextFormatType, true
}

// HasTextFormatType returns a boolean if a field has been set.
func (o *BreakContentBlock) HasTextFormatType() bool {
	if o != nil && !IsNil(o.TextFormatType) {
		return true
	}

	return false
}

// SetTextFormatType gets a reference to the given string and assigns it to the TextFormatType field.
func (o *BreakContentBlock) SetTextFormatType(v string) {
	o.TextFormatType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BreakContentBlock) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakContentBlock) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BreakContentBlock) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BreakContentBlock) SetType(v string) {
	o.Type = &v
}

func (o BreakContentBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BreakContentBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.TextFormatType) {
		toSerialize["textFormatType"] = o.TextFormatType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBreakContentBlock struct {
	value *BreakContentBlock
	isSet bool
}

func (v NullableBreakContentBlock) Get() *BreakContentBlock {
	return v.value
}

func (v *NullableBreakContentBlock) Set(val *BreakContentBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableBreakContentBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBreakContentBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBreakContentBlock(val *BreakContentBlock) *NullableBreakContentBlock {
	return &NullableBreakContentBlock{value: val, isSet: true}
}

func (v NullableBreakContentBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBreakContentBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


