/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the KtypNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KtypNumber{}

// KtypNumber struct for KtypNumber
type KtypNumber struct {
	// KType Number
	KtypNumber *int32 `json:"ktypNumber,omitempty"`
}

// NewKtypNumber instantiates a new KtypNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKtypNumber() *KtypNumber {
	this := KtypNumber{}
	return &this
}

// NewKtypNumberWithDefaults instantiates a new KtypNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKtypNumberWithDefaults() *KtypNumber {
	this := KtypNumber{}
	return &this
}

// GetKtypNumber returns the KtypNumber field value if set, zero value otherwise.
func (o *KtypNumber) GetKtypNumber() int32 {
	if o == nil || IsNil(o.KtypNumber) {
		var ret int32
		return ret
	}
	return *o.KtypNumber
}

// GetKtypNumberOk returns a tuple with the KtypNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KtypNumber) GetKtypNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.KtypNumber) {
		return nil, false
	}
	return o.KtypNumber, true
}

// HasKtypNumber returns a boolean if a field has been set.
func (o *KtypNumber) HasKtypNumber() bool {
	if o != nil && !IsNil(o.KtypNumber) {
		return true
	}

	return false
}

// SetKtypNumber gets a reference to the given int32 and assigns it to the KtypNumber field.
func (o *KtypNumber) SetKtypNumber(v int32) {
	o.KtypNumber = &v
}

func (o KtypNumber) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KtypNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KtypNumber) {
		toSerialize["ktypNumber"] = o.KtypNumber
	}
	return toSerialize, nil
}

type NullableKtypNumber struct {
	value *KtypNumber
	isSet bool
}

func (v NullableKtypNumber) Get() *KtypNumber {
	return v.value
}

func (v *NullableKtypNumber) Set(val *KtypNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableKtypNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableKtypNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKtypNumber(val *KtypNumber) *NullableKtypNumber {
	return &NullableKtypNumber{value: val, isSet: true}
}

func (v NullableKtypNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKtypNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


