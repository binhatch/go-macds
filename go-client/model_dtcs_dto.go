/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DtcsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtcsDto{}

// DtcsDto struct for DtcsDto
type DtcsDto struct {
	// The exact code that was inputted
	Code string `json:"code"`
	// The exact code format that was inputted, if provided
	Format *string `json:"format,omitempty"`
	// The exact ECU system that was inputted, if provided; Mapping as per the following:<table><tbody><tr><td>MO</td><td>Engine</td></tr><tr><td>AB</td><td>ABS</td></tr><tr><td>AI</td><td>Airbag</td></tr><tr><td>KL</td><td>Air conditioning</td></tr><tr><td>KO</td><td>Comfort</td></tr><tr><td>GE</td><td>Transmission</td></tr><tr><td>DI</td><td>Anti-theft device</td></tr><tr><td>FA</td><td>Suspension</td></tr><tr><td>LE</td><td>Steering</td></tr><tr><td>AV</td><td>Audio/Video</td></tr><tr><td>RD</td><td>Tire pressure monitoring</td></tr><tr><td>OB</td><td>OBD</td></tr><tr><td>SI</td><td>Safety</td></tr><tr><td>RI</td><td>Readiness code</td></tr><tr><td>GW</td><td>Gateway</td></tr></tbody></table>
	EcuSystem *string `json:"ecuSystem,omitempty"`
	// The pageId, if provided (internal)
	PageId *string `json:"pageId,omitempty"`
	// The tableId, if provided (internal)
	TableId *string `json:"tableId,omitempty"`
	// additional information from the vehicle byte stream for a particular DTC such as request/response ID (txid, rxid) and ecu Id
	DtcMetaInfo *string `json:"dtcMetaInfo,omitempty"`
	// Set to true if the trouble code is a temporary or intermittent code; used for calculating the criticality index
	IsTemporary *bool `json:"isTemporary,omitempty"`
}

type _DtcsDto DtcsDto

// NewDtcsDto instantiates a new DtcsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtcsDto(code string) *DtcsDto {
	this := DtcsDto{}
	this.Code = code
	return &this
}

// NewDtcsDtoWithDefaults instantiates a new DtcsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtcsDtoWithDefaults() *DtcsDto {
	this := DtcsDto{}
	return &this
}

// GetCode returns the Code field value
func (o *DtcsDto) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DtcsDto) SetCode(v string) {
	o.Code = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *DtcsDto) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *DtcsDto) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *DtcsDto) SetFormat(v string) {
	o.Format = &v
}

// GetEcuSystem returns the EcuSystem field value if set, zero value otherwise.
func (o *DtcsDto) GetEcuSystem() string {
	if o == nil || IsNil(o.EcuSystem) {
		var ret string
		return ret
	}
	return *o.EcuSystem
}

// GetEcuSystemOk returns a tuple with the EcuSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetEcuSystemOk() (*string, bool) {
	if o == nil || IsNil(o.EcuSystem) {
		return nil, false
	}
	return o.EcuSystem, true
}

// HasEcuSystem returns a boolean if a field has been set.
func (o *DtcsDto) HasEcuSystem() bool {
	if o != nil && !IsNil(o.EcuSystem) {
		return true
	}

	return false
}

// SetEcuSystem gets a reference to the given string and assigns it to the EcuSystem field.
func (o *DtcsDto) SetEcuSystem(v string) {
	o.EcuSystem = &v
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *DtcsDto) GetPageId() string {
	if o == nil || IsNil(o.PageId) {
		var ret string
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetPageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PageId) {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *DtcsDto) HasPageId() bool {
	if o != nil && !IsNil(o.PageId) {
		return true
	}

	return false
}

// SetPageId gets a reference to the given string and assigns it to the PageId field.
func (o *DtcsDto) SetPageId(v string) {
	o.PageId = &v
}

// GetTableId returns the TableId field value if set, zero value otherwise.
func (o *DtcsDto) GetTableId() string {
	if o == nil || IsNil(o.TableId) {
		var ret string
		return ret
	}
	return *o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetTableIdOk() (*string, bool) {
	if o == nil || IsNil(o.TableId) {
		return nil, false
	}
	return o.TableId, true
}

// HasTableId returns a boolean if a field has been set.
func (o *DtcsDto) HasTableId() bool {
	if o != nil && !IsNil(o.TableId) {
		return true
	}

	return false
}

// SetTableId gets a reference to the given string and assigns it to the TableId field.
func (o *DtcsDto) SetTableId(v string) {
	o.TableId = &v
}

// GetDtcMetaInfo returns the DtcMetaInfo field value if set, zero value otherwise.
func (o *DtcsDto) GetDtcMetaInfo() string {
	if o == nil || IsNil(o.DtcMetaInfo) {
		var ret string
		return ret
	}
	return *o.DtcMetaInfo
}

// GetDtcMetaInfoOk returns a tuple with the DtcMetaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetDtcMetaInfoOk() (*string, bool) {
	if o == nil || IsNil(o.DtcMetaInfo) {
		return nil, false
	}
	return o.DtcMetaInfo, true
}

// HasDtcMetaInfo returns a boolean if a field has been set.
func (o *DtcsDto) HasDtcMetaInfo() bool {
	if o != nil && !IsNil(o.DtcMetaInfo) {
		return true
	}

	return false
}

// SetDtcMetaInfo gets a reference to the given string and assigns it to the DtcMetaInfo field.
func (o *DtcsDto) SetDtcMetaInfo(v string) {
	o.DtcMetaInfo = &v
}

// GetIsTemporary returns the IsTemporary field value if set, zero value otherwise.
func (o *DtcsDto) GetIsTemporary() bool {
	if o == nil || IsNil(o.IsTemporary) {
		var ret bool
		return ret
	}
	return *o.IsTemporary
}

// GetIsTemporaryOk returns a tuple with the IsTemporary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtcsDto) GetIsTemporaryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemporary) {
		return nil, false
	}
	return o.IsTemporary, true
}

// HasIsTemporary returns a boolean if a field has been set.
func (o *DtcsDto) HasIsTemporary() bool {
	if o != nil && !IsNil(o.IsTemporary) {
		return true
	}

	return false
}

// SetIsTemporary gets a reference to the given bool and assigns it to the IsTemporary field.
func (o *DtcsDto) SetIsTemporary(v bool) {
	o.IsTemporary = &v
}

func (o DtcsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtcsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.EcuSystem) {
		toSerialize["ecuSystem"] = o.EcuSystem
	}
	if !IsNil(o.PageId) {
		toSerialize["pageId"] = o.PageId
	}
	if !IsNil(o.TableId) {
		toSerialize["tableId"] = o.TableId
	}
	if !IsNil(o.DtcMetaInfo) {
		toSerialize["dtcMetaInfo"] = o.DtcMetaInfo
	}
	if !IsNil(o.IsTemporary) {
		toSerialize["isTemporary"] = o.IsTemporary
	}
	return toSerialize, nil
}

func (o *DtcsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtcsDto := _DtcsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtcsDto)

	if err != nil {
		return err
	}

	*o = DtcsDto(varDtcsDto)

	return err
}

type NullableDtcsDto struct {
	value *DtcsDto
	isSet bool
}

func (v NullableDtcsDto) Get() *DtcsDto {
	return v.value
}

func (v *NullableDtcsDto) Set(val *DtcsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDtcsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDtcsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtcsDto(val *DtcsDto) *NullableDtcsDto {
	return &NullableDtcsDto{value: val, isSet: true}
}

func (v NullableDtcsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtcsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


