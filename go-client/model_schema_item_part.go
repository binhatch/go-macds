/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the SchemaItemPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaItemPart{}

// SchemaItemPart struct for SchemaItemPart
type SchemaItemPart struct {
	// Id
	Id *string `json:"id,omitempty"`
	// List of Data Inputs
	DataInputs []DataInput `json:"dataInputs,omitempty"`
	// List of Service Components
	ServiceComponents []ServiceComponent `json:"serviceComponents,omitempty"`
	// List of Display Groups
	DisplayGroups []ObjectReferenceContainer `json:"displayGroups,omitempty"`
	// Labour Time
	LabourTime *int32 `json:"labourTime,omitempty"`
	// AW Id
	Awid *string `json:"awid,omitempty"`
	// List of related Tech Data
	RelatedTechData []Group `json:"relatedTechData,omitempty"`
}

// NewSchemaItemPart instantiates a new SchemaItemPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaItemPart() *SchemaItemPart {
	this := SchemaItemPart{}
	return &this
}

// NewSchemaItemPartWithDefaults instantiates a new SchemaItemPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaItemPartWithDefaults() *SchemaItemPart {
	this := SchemaItemPart{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaItemPart) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaItemPart) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaItemPart) SetId(v string) {
	o.Id = &v
}

// GetDataInputs returns the DataInputs field value if set, zero value otherwise.
func (o *SchemaItemPart) GetDataInputs() []DataInput {
	if o == nil || IsNil(o.DataInputs) {
		var ret []DataInput
		return ret
	}
	return o.DataInputs
}

// GetDataInputsOk returns a tuple with the DataInputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetDataInputsOk() ([]DataInput, bool) {
	if o == nil || IsNil(o.DataInputs) {
		return nil, false
	}
	return o.DataInputs, true
}

// HasDataInputs returns a boolean if a field has been set.
func (o *SchemaItemPart) HasDataInputs() bool {
	if o != nil && !IsNil(o.DataInputs) {
		return true
	}

	return false
}

// SetDataInputs gets a reference to the given []DataInput and assigns it to the DataInputs field.
func (o *SchemaItemPart) SetDataInputs(v []DataInput) {
	o.DataInputs = v
}

// GetServiceComponents returns the ServiceComponents field value if set, zero value otherwise.
func (o *SchemaItemPart) GetServiceComponents() []ServiceComponent {
	if o == nil || IsNil(o.ServiceComponents) {
		var ret []ServiceComponent
		return ret
	}
	return o.ServiceComponents
}

// GetServiceComponentsOk returns a tuple with the ServiceComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetServiceComponentsOk() ([]ServiceComponent, bool) {
	if o == nil || IsNil(o.ServiceComponents) {
		return nil, false
	}
	return o.ServiceComponents, true
}

// HasServiceComponents returns a boolean if a field has been set.
func (o *SchemaItemPart) HasServiceComponents() bool {
	if o != nil && !IsNil(o.ServiceComponents) {
		return true
	}

	return false
}

// SetServiceComponents gets a reference to the given []ServiceComponent and assigns it to the ServiceComponents field.
func (o *SchemaItemPart) SetServiceComponents(v []ServiceComponent) {
	o.ServiceComponents = v
}

// GetDisplayGroups returns the DisplayGroups field value if set, zero value otherwise.
func (o *SchemaItemPart) GetDisplayGroups() []ObjectReferenceContainer {
	if o == nil || IsNil(o.DisplayGroups) {
		var ret []ObjectReferenceContainer
		return ret
	}
	return o.DisplayGroups
}

// GetDisplayGroupsOk returns a tuple with the DisplayGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetDisplayGroupsOk() ([]ObjectReferenceContainer, bool) {
	if o == nil || IsNil(o.DisplayGroups) {
		return nil, false
	}
	return o.DisplayGroups, true
}

// HasDisplayGroups returns a boolean if a field has been set.
func (o *SchemaItemPart) HasDisplayGroups() bool {
	if o != nil && !IsNil(o.DisplayGroups) {
		return true
	}

	return false
}

// SetDisplayGroups gets a reference to the given []ObjectReferenceContainer and assigns it to the DisplayGroups field.
func (o *SchemaItemPart) SetDisplayGroups(v []ObjectReferenceContainer) {
	o.DisplayGroups = v
}

// GetLabourTime returns the LabourTime field value if set, zero value otherwise.
func (o *SchemaItemPart) GetLabourTime() int32 {
	if o == nil || IsNil(o.LabourTime) {
		var ret int32
		return ret
	}
	return *o.LabourTime
}

// GetLabourTimeOk returns a tuple with the LabourTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetLabourTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LabourTime) {
		return nil, false
	}
	return o.LabourTime, true
}

// HasLabourTime returns a boolean if a field has been set.
func (o *SchemaItemPart) HasLabourTime() bool {
	if o != nil && !IsNil(o.LabourTime) {
		return true
	}

	return false
}

// SetLabourTime gets a reference to the given int32 and assigns it to the LabourTime field.
func (o *SchemaItemPart) SetLabourTime(v int32) {
	o.LabourTime = &v
}

// GetAwid returns the Awid field value if set, zero value otherwise.
func (o *SchemaItemPart) GetAwid() string {
	if o == nil || IsNil(o.Awid) {
		var ret string
		return ret
	}
	return *o.Awid
}

// GetAwidOk returns a tuple with the Awid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetAwidOk() (*string, bool) {
	if o == nil || IsNil(o.Awid) {
		return nil, false
	}
	return o.Awid, true
}

// HasAwid returns a boolean if a field has been set.
func (o *SchemaItemPart) HasAwid() bool {
	if o != nil && !IsNil(o.Awid) {
		return true
	}

	return false
}

// SetAwid gets a reference to the given string and assigns it to the Awid field.
func (o *SchemaItemPart) SetAwid(v string) {
	o.Awid = &v
}

// GetRelatedTechData returns the RelatedTechData field value if set, zero value otherwise.
func (o *SchemaItemPart) GetRelatedTechData() []Group {
	if o == nil || IsNil(o.RelatedTechData) {
		var ret []Group
		return ret
	}
	return o.RelatedTechData
}

// GetRelatedTechDataOk returns a tuple with the RelatedTechData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemPart) GetRelatedTechDataOk() ([]Group, bool) {
	if o == nil || IsNil(o.RelatedTechData) {
		return nil, false
	}
	return o.RelatedTechData, true
}

// HasRelatedTechData returns a boolean if a field has been set.
func (o *SchemaItemPart) HasRelatedTechData() bool {
	if o != nil && !IsNil(o.RelatedTechData) {
		return true
	}

	return false
}

// SetRelatedTechData gets a reference to the given []Group and assigns it to the RelatedTechData field.
func (o *SchemaItemPart) SetRelatedTechData(v []Group) {
	o.RelatedTechData = v
}

func (o SchemaItemPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaItemPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DataInputs) {
		toSerialize["dataInputs"] = o.DataInputs
	}
	if !IsNil(o.ServiceComponents) {
		toSerialize["serviceComponents"] = o.ServiceComponents
	}
	if !IsNil(o.DisplayGroups) {
		toSerialize["displayGroups"] = o.DisplayGroups
	}
	if !IsNil(o.LabourTime) {
		toSerialize["labourTime"] = o.LabourTime
	}
	if !IsNil(o.Awid) {
		toSerialize["awid"] = o.Awid
	}
	if !IsNil(o.RelatedTechData) {
		toSerialize["relatedTechData"] = o.RelatedTechData
	}
	return toSerialize, nil
}

type NullableSchemaItemPart struct {
	value *SchemaItemPart
	isSet bool
}

func (v NullableSchemaItemPart) Get() *SchemaItemPart {
	return v.value
}

func (v *NullableSchemaItemPart) Set(val *SchemaItemPart) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaItemPart) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaItemPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaItemPart(val *SchemaItemPart) *NullableSchemaItemPart {
	return &NullableSchemaItemPart{value: val, isSet: true}
}

func (v NullableSchemaItemPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaItemPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


