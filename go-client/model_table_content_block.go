/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the TableContentBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableContentBlock{}

// TableContentBlock struct for TableContentBlock
type TableContentBlock struct {
	// Order
	Order *int32 `json:"order,omitempty"`
	// Cell Padding
	CellPadding *int32 `json:"cellPadding,omitempty"`
	// Cell Spacing
	CellSpacing *int32 `json:"cellSpacing,omitempty"`
	// Border
	Border *int32 `json:"border,omitempty"`
	// List of Table Rows
	TableRows []TableRow `json:"tableRows,omitempty"`
	// Type
	Type *string `json:"type,omitempty"`
}

// NewTableContentBlock instantiates a new TableContentBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableContentBlock() *TableContentBlock {
	this := TableContentBlock{}
	return &this
}

// NewTableContentBlockWithDefaults instantiates a new TableContentBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableContentBlockWithDefaults() *TableContentBlock {
	this := TableContentBlock{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *TableContentBlock) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *TableContentBlock) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *TableContentBlock) SetOrder(v int32) {
	o.Order = &v
}

// GetCellPadding returns the CellPadding field value if set, zero value otherwise.
func (o *TableContentBlock) GetCellPadding() int32 {
	if o == nil || IsNil(o.CellPadding) {
		var ret int32
		return ret
	}
	return *o.CellPadding
}

// GetCellPaddingOk returns a tuple with the CellPadding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetCellPaddingOk() (*int32, bool) {
	if o == nil || IsNil(o.CellPadding) {
		return nil, false
	}
	return o.CellPadding, true
}

// HasCellPadding returns a boolean if a field has been set.
func (o *TableContentBlock) HasCellPadding() bool {
	if o != nil && !IsNil(o.CellPadding) {
		return true
	}

	return false
}

// SetCellPadding gets a reference to the given int32 and assigns it to the CellPadding field.
func (o *TableContentBlock) SetCellPadding(v int32) {
	o.CellPadding = &v
}

// GetCellSpacing returns the CellSpacing field value if set, zero value otherwise.
func (o *TableContentBlock) GetCellSpacing() int32 {
	if o == nil || IsNil(o.CellSpacing) {
		var ret int32
		return ret
	}
	return *o.CellSpacing
}

// GetCellSpacingOk returns a tuple with the CellSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetCellSpacingOk() (*int32, bool) {
	if o == nil || IsNil(o.CellSpacing) {
		return nil, false
	}
	return o.CellSpacing, true
}

// HasCellSpacing returns a boolean if a field has been set.
func (o *TableContentBlock) HasCellSpacing() bool {
	if o != nil && !IsNil(o.CellSpacing) {
		return true
	}

	return false
}

// SetCellSpacing gets a reference to the given int32 and assigns it to the CellSpacing field.
func (o *TableContentBlock) SetCellSpacing(v int32) {
	o.CellSpacing = &v
}

// GetBorder returns the Border field value if set, zero value otherwise.
func (o *TableContentBlock) GetBorder() int32 {
	if o == nil || IsNil(o.Border) {
		var ret int32
		return ret
	}
	return *o.Border
}

// GetBorderOk returns a tuple with the Border field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetBorderOk() (*int32, bool) {
	if o == nil || IsNil(o.Border) {
		return nil, false
	}
	return o.Border, true
}

// HasBorder returns a boolean if a field has been set.
func (o *TableContentBlock) HasBorder() bool {
	if o != nil && !IsNil(o.Border) {
		return true
	}

	return false
}

// SetBorder gets a reference to the given int32 and assigns it to the Border field.
func (o *TableContentBlock) SetBorder(v int32) {
	o.Border = &v
}

// GetTableRows returns the TableRows field value if set, zero value otherwise.
func (o *TableContentBlock) GetTableRows() []TableRow {
	if o == nil || IsNil(o.TableRows) {
		var ret []TableRow
		return ret
	}
	return o.TableRows
}

// GetTableRowsOk returns a tuple with the TableRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetTableRowsOk() ([]TableRow, bool) {
	if o == nil || IsNil(o.TableRows) {
		return nil, false
	}
	return o.TableRows, true
}

// HasTableRows returns a boolean if a field has been set.
func (o *TableContentBlock) HasTableRows() bool {
	if o != nil && !IsNil(o.TableRows) {
		return true
	}

	return false
}

// SetTableRows gets a reference to the given []TableRow and assigns it to the TableRows field.
func (o *TableContentBlock) SetTableRows(v []TableRow) {
	o.TableRows = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TableContentBlock) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableContentBlock) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TableContentBlock) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TableContentBlock) SetType(v string) {
	o.Type = &v
}

func (o TableContentBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableContentBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.CellPadding) {
		toSerialize["cellPadding"] = o.CellPadding
	}
	if !IsNil(o.CellSpacing) {
		toSerialize["cellSpacing"] = o.CellSpacing
	}
	if !IsNil(o.Border) {
		toSerialize["border"] = o.Border
	}
	if !IsNil(o.TableRows) {
		toSerialize["tableRows"] = o.TableRows
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTableContentBlock struct {
	value *TableContentBlock
	isSet bool
}

func (v NullableTableContentBlock) Get() *TableContentBlock {
	return v.value
}

func (v *NullableTableContentBlock) Set(val *TableContentBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableTableContentBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableTableContentBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableContentBlock(val *TableContentBlock) *NullableTableContentBlock {
	return &NullableTableContentBlock{value: val, isSet: true}
}

func (v NullableTableContentBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableContentBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


