/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the VehicleReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleReference{}

// VehicleReference struct for VehicleReference
type VehicleReference struct {
	Hgs *Hgs `json:"hgs,omitempty"`
	TecDoc *TecDoc `json:"tecDoc,omitempty"`
}

// NewVehicleReference instantiates a new VehicleReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleReference() *VehicleReference {
	this := VehicleReference{}
	return &this
}

// NewVehicleReferenceWithDefaults instantiates a new VehicleReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleReferenceWithDefaults() *VehicleReference {
	this := VehicleReference{}
	return &this
}

// GetHgs returns the Hgs field value if set, zero value otherwise.
func (o *VehicleReference) GetHgs() Hgs {
	if o == nil || IsNil(o.Hgs) {
		var ret Hgs
		return ret
	}
	return *o.Hgs
}

// GetHgsOk returns a tuple with the Hgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleReference) GetHgsOk() (*Hgs, bool) {
	if o == nil || IsNil(o.Hgs) {
		return nil, false
	}
	return o.Hgs, true
}

// HasHgs returns a boolean if a field has been set.
func (o *VehicleReference) HasHgs() bool {
	if o != nil && !IsNil(o.Hgs) {
		return true
	}

	return false
}

// SetHgs gets a reference to the given Hgs and assigns it to the Hgs field.
func (o *VehicleReference) SetHgs(v Hgs) {
	o.Hgs = &v
}

// GetTecDoc returns the TecDoc field value if set, zero value otherwise.
func (o *VehicleReference) GetTecDoc() TecDoc {
	if o == nil || IsNil(o.TecDoc) {
		var ret TecDoc
		return ret
	}
	return *o.TecDoc
}

// GetTecDocOk returns a tuple with the TecDoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleReference) GetTecDocOk() (*TecDoc, bool) {
	if o == nil || IsNil(o.TecDoc) {
		return nil, false
	}
	return o.TecDoc, true
}

// HasTecDoc returns a boolean if a field has been set.
func (o *VehicleReference) HasTecDoc() bool {
	if o != nil && !IsNil(o.TecDoc) {
		return true
	}

	return false
}

// SetTecDoc gets a reference to the given TecDoc and assigns it to the TecDoc field.
func (o *VehicleReference) SetTecDoc(v TecDoc) {
	o.TecDoc = &v
}

func (o VehicleReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hgs) {
		toSerialize["hgs"] = o.Hgs
	}
	if !IsNil(o.TecDoc) {
		toSerialize["tecDoc"] = o.TecDoc
	}
	return toSerialize, nil
}

type NullableVehicleReference struct {
	value *VehicleReference
	isSet bool
}

func (v NullableVehicleReference) Get() *VehicleReference {
	return v.value
}

func (v *NullableVehicleReference) Set(val *VehicleReference) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleReference) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleReference(val *VehicleReference) *NullableVehicleReference {
	return &NullableVehicleReference{value: val, isSet: true}
}

func (v NullableVehicleReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


