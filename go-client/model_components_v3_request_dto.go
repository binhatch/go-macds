/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComponentsV3RequestDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentsV3RequestDTO{}

// ComponentsV3RequestDTO struct for ComponentsV3RequestDTO
type ComponentsV3RequestDTO struct {
	// KType
	Ktype int32 `json:"ktype"`
	// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
	Language string `json:"language"`
	// System identification
	SystemIdent *string `json:"systemIdent,omitempty"`
	// Year from limit
	YearFrom *string `json:"yearFrom,omitempty"`
	// Year to limit
	YearTo *string `json:"yearTo,omitempty"`
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
	// A list of components Ids
	ComponentIds []int32 `json:"componentIds,omitempty"`
}

type _ComponentsV3RequestDTO ComponentsV3RequestDTO

// NewComponentsV3RequestDTO instantiates a new ComponentsV3RequestDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentsV3RequestDTO(ktype int32, language string) *ComponentsV3RequestDTO {
	this := ComponentsV3RequestDTO{}
	this.Ktype = ktype
	this.Language = language
	return &this
}

// NewComponentsV3RequestDTOWithDefaults instantiates a new ComponentsV3RequestDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsV3RequestDTOWithDefaults() *ComponentsV3RequestDTO {
	this := ComponentsV3RequestDTO{}
	return &this
}

// GetKtype returns the Ktype field value
func (o *ComponentsV3RequestDTO) GetKtype() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ktype
}

// GetKtypeOk returns a tuple with the Ktype field value
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetKtypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ktype, true
}

// SetKtype sets field value
func (o *ComponentsV3RequestDTO) SetKtype(v int32) {
	o.Ktype = v
}

// GetLanguage returns the Language field value
func (o *ComponentsV3RequestDTO) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ComponentsV3RequestDTO) SetLanguage(v string) {
	o.Language = v
}

// GetSystemIdent returns the SystemIdent field value if set, zero value otherwise.
func (o *ComponentsV3RequestDTO) GetSystemIdent() string {
	if o == nil || IsNil(o.SystemIdent) {
		var ret string
		return ret
	}
	return *o.SystemIdent
}

// GetSystemIdentOk returns a tuple with the SystemIdent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetSystemIdentOk() (*string, bool) {
	if o == nil || IsNil(o.SystemIdent) {
		return nil, false
	}
	return o.SystemIdent, true
}

// HasSystemIdent returns a boolean if a field has been set.
func (o *ComponentsV3RequestDTO) HasSystemIdent() bool {
	if o != nil && !IsNil(o.SystemIdent) {
		return true
	}

	return false
}

// SetSystemIdent gets a reference to the given string and assigns it to the SystemIdent field.
func (o *ComponentsV3RequestDTO) SetSystemIdent(v string) {
	o.SystemIdent = &v
}

// GetYearFrom returns the YearFrom field value if set, zero value otherwise.
func (o *ComponentsV3RequestDTO) GetYearFrom() string {
	if o == nil || IsNil(o.YearFrom) {
		var ret string
		return ret
	}
	return *o.YearFrom
}

// GetYearFromOk returns a tuple with the YearFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetYearFromOk() (*string, bool) {
	if o == nil || IsNil(o.YearFrom) {
		return nil, false
	}
	return o.YearFrom, true
}

// HasYearFrom returns a boolean if a field has been set.
func (o *ComponentsV3RequestDTO) HasYearFrom() bool {
	if o != nil && !IsNil(o.YearFrom) {
		return true
	}

	return false
}

// SetYearFrom gets a reference to the given string and assigns it to the YearFrom field.
func (o *ComponentsV3RequestDTO) SetYearFrom(v string) {
	o.YearFrom = &v
}

// GetYearTo returns the YearTo field value if set, zero value otherwise.
func (o *ComponentsV3RequestDTO) GetYearTo() string {
	if o == nil || IsNil(o.YearTo) {
		var ret string
		return ret
	}
	return *o.YearTo
}

// GetYearToOk returns a tuple with the YearTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetYearToOk() (*string, bool) {
	if o == nil || IsNil(o.YearTo) {
		return nil, false
	}
	return o.YearTo, true
}

// HasYearTo returns a boolean if a field has been set.
func (o *ComponentsV3RequestDTO) HasYearTo() bool {
	if o != nil && !IsNil(o.YearTo) {
		return true
	}

	return false
}

// SetYearTo gets a reference to the given string and assigns it to the YearTo field.
func (o *ComponentsV3RequestDTO) SetYearTo(v string) {
	o.YearTo = &v
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *ComponentsV3RequestDTO) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *ComponentsV3RequestDTO) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *ComponentsV3RequestDTO) SetEngineCode(v string) {
	o.EngineCode = &v
}

// GetComponentIds returns the ComponentIds field value if set, zero value otherwise.
func (o *ComponentsV3RequestDTO) GetComponentIds() []int32 {
	if o == nil || IsNil(o.ComponentIds) {
		var ret []int32
		return ret
	}
	return o.ComponentIds
}

// GetComponentIdsOk returns a tuple with the ComponentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsV3RequestDTO) GetComponentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ComponentIds) {
		return nil, false
	}
	return o.ComponentIds, true
}

// HasComponentIds returns a boolean if a field has been set.
func (o *ComponentsV3RequestDTO) HasComponentIds() bool {
	if o != nil && !IsNil(o.ComponentIds) {
		return true
	}

	return false
}

// SetComponentIds gets a reference to the given []int32 and assigns it to the ComponentIds field.
func (o *ComponentsV3RequestDTO) SetComponentIds(v []int32) {
	o.ComponentIds = v
}

func (o ComponentsV3RequestDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentsV3RequestDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ktype"] = o.Ktype
	toSerialize["language"] = o.Language
	if !IsNil(o.SystemIdent) {
		toSerialize["systemIdent"] = o.SystemIdent
	}
	if !IsNil(o.YearFrom) {
		toSerialize["yearFrom"] = o.YearFrom
	}
	if !IsNil(o.YearTo) {
		toSerialize["yearTo"] = o.YearTo
	}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	if !IsNil(o.ComponentIds) {
		toSerialize["componentIds"] = o.ComponentIds
	}
	return toSerialize, nil
}

func (o *ComponentsV3RequestDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ktype",
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentsV3RequestDTO := _ComponentsV3RequestDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComponentsV3RequestDTO)

	if err != nil {
		return err
	}

	*o = ComponentsV3RequestDTO(varComponentsV3RequestDTO)

	return err
}

type NullableComponentsV3RequestDTO struct {
	value *ComponentsV3RequestDTO
	isSet bool
}

func (v NullableComponentsV3RequestDTO) Get() *ComponentsV3RequestDTO {
	return v.value
}

func (v *NullableComponentsV3RequestDTO) Set(val *ComponentsV3RequestDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentsV3RequestDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentsV3RequestDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentsV3RequestDTO(val *ComponentsV3RequestDTO) *NullableComponentsV3RequestDTO {
	return &NullableComponentsV3RequestDTO{value: val, isSet: true}
}

func (v NullableComponentsV3RequestDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentsV3RequestDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


