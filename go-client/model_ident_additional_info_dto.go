/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the IdentAdditionalInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentAdditionalInfoDTO{}

// IdentAdditionalInfoDTO Additional Information
type IdentAdditionalInfoDTO struct {
	// Manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Model Series
	ModelSeries *string `json:"modelSeries,omitempty"`
	// Short Name
	ShortName *string `json:"shortName,omitempty"`
	// Model Id
	ModelId *int32 `json:"modelId,omitempty"`
	// Model Type
	ModelTyp *string `json:"modelTyp,omitempty"`
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
	// Fuel Type
	FuelType *string `json:"fuelType,omitempty"`
	// Year From
	YearFrom *string `json:"yearFrom,omitempty"`
	// Year To
	YearTo *string `json:"yearTo,omitempty"`
	// CCM
	Ccm *string `json:"ccm,omitempty"`
	// kw
	Kw *string `json:"kw,omitempty"`
	// Cylinder
	Cylinder *string `json:"cylinder,omitempty"`
	// Body Type
	BodyType *string `json:"bodyType,omitempty"`
	// Model Year VIN
	ModelYearVin *string `json:"modelYearVin,omitempty"`
}

// NewIdentAdditionalInfoDTO instantiates a new IdentAdditionalInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentAdditionalInfoDTO() *IdentAdditionalInfoDTO {
	this := IdentAdditionalInfoDTO{}
	return &this
}

// NewIdentAdditionalInfoDTOWithDefaults instantiates a new IdentAdditionalInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentAdditionalInfoDTOWithDefaults() *IdentAdditionalInfoDTO {
	this := IdentAdditionalInfoDTO{}
	return &this
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetManufacturer() string {
	if o == nil || IsNil(o.Manufacturer) {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetManufacturerOk() (*string, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *IdentAdditionalInfoDTO) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetModelSeries returns the ModelSeries field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetModelSeries() string {
	if o == nil || IsNil(o.ModelSeries) {
		var ret string
		return ret
	}
	return *o.ModelSeries
}

// GetModelSeriesOk returns a tuple with the ModelSeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetModelSeriesOk() (*string, bool) {
	if o == nil || IsNil(o.ModelSeries) {
		return nil, false
	}
	return o.ModelSeries, true
}

// HasModelSeries returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasModelSeries() bool {
	if o != nil && !IsNil(o.ModelSeries) {
		return true
	}

	return false
}

// SetModelSeries gets a reference to the given string and assigns it to the ModelSeries field.
func (o *IdentAdditionalInfoDTO) SetModelSeries(v string) {
	o.ModelSeries = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *IdentAdditionalInfoDTO) SetShortName(v string) {
	o.ShortName = &v
}

// GetModelId returns the ModelId field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetModelId() int32 {
	if o == nil || IsNil(o.ModelId) {
		var ret int32
		return ret
	}
	return *o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetModelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ModelId) {
		return nil, false
	}
	return o.ModelId, true
}

// HasModelId returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasModelId() bool {
	if o != nil && !IsNil(o.ModelId) {
		return true
	}

	return false
}

// SetModelId gets a reference to the given int32 and assigns it to the ModelId field.
func (o *IdentAdditionalInfoDTO) SetModelId(v int32) {
	o.ModelId = &v
}

// GetModelTyp returns the ModelTyp field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetModelTyp() string {
	if o == nil || IsNil(o.ModelTyp) {
		var ret string
		return ret
	}
	return *o.ModelTyp
}

// GetModelTypOk returns a tuple with the ModelTyp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetModelTypOk() (*string, bool) {
	if o == nil || IsNil(o.ModelTyp) {
		return nil, false
	}
	return o.ModelTyp, true
}

// HasModelTyp returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasModelTyp() bool {
	if o != nil && !IsNil(o.ModelTyp) {
		return true
	}

	return false
}

// SetModelTyp gets a reference to the given string and assigns it to the ModelTyp field.
func (o *IdentAdditionalInfoDTO) SetModelTyp(v string) {
	o.ModelTyp = &v
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *IdentAdditionalInfoDTO) SetEngineCode(v string) {
	o.EngineCode = &v
}

// GetFuelType returns the FuelType field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetFuelType() string {
	if o == nil || IsNil(o.FuelType) {
		var ret string
		return ret
	}
	return *o.FuelType
}

// GetFuelTypeOk returns a tuple with the FuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetFuelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FuelType) {
		return nil, false
	}
	return o.FuelType, true
}

// HasFuelType returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasFuelType() bool {
	if o != nil && !IsNil(o.FuelType) {
		return true
	}

	return false
}

// SetFuelType gets a reference to the given string and assigns it to the FuelType field.
func (o *IdentAdditionalInfoDTO) SetFuelType(v string) {
	o.FuelType = &v
}

// GetYearFrom returns the YearFrom field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetYearFrom() string {
	if o == nil || IsNil(o.YearFrom) {
		var ret string
		return ret
	}
	return *o.YearFrom
}

// GetYearFromOk returns a tuple with the YearFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetYearFromOk() (*string, bool) {
	if o == nil || IsNil(o.YearFrom) {
		return nil, false
	}
	return o.YearFrom, true
}

// HasYearFrom returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasYearFrom() bool {
	if o != nil && !IsNil(o.YearFrom) {
		return true
	}

	return false
}

// SetYearFrom gets a reference to the given string and assigns it to the YearFrom field.
func (o *IdentAdditionalInfoDTO) SetYearFrom(v string) {
	o.YearFrom = &v
}

// GetYearTo returns the YearTo field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetYearTo() string {
	if o == nil || IsNil(o.YearTo) {
		var ret string
		return ret
	}
	return *o.YearTo
}

// GetYearToOk returns a tuple with the YearTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetYearToOk() (*string, bool) {
	if o == nil || IsNil(o.YearTo) {
		return nil, false
	}
	return o.YearTo, true
}

// HasYearTo returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasYearTo() bool {
	if o != nil && !IsNil(o.YearTo) {
		return true
	}

	return false
}

// SetYearTo gets a reference to the given string and assigns it to the YearTo field.
func (o *IdentAdditionalInfoDTO) SetYearTo(v string) {
	o.YearTo = &v
}

// GetCcm returns the Ccm field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetCcm() string {
	if o == nil || IsNil(o.Ccm) {
		var ret string
		return ret
	}
	return *o.Ccm
}

// GetCcmOk returns a tuple with the Ccm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetCcmOk() (*string, bool) {
	if o == nil || IsNil(o.Ccm) {
		return nil, false
	}
	return o.Ccm, true
}

// HasCcm returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasCcm() bool {
	if o != nil && !IsNil(o.Ccm) {
		return true
	}

	return false
}

// SetCcm gets a reference to the given string and assigns it to the Ccm field.
func (o *IdentAdditionalInfoDTO) SetCcm(v string) {
	o.Ccm = &v
}

// GetKw returns the Kw field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetKw() string {
	if o == nil || IsNil(o.Kw) {
		var ret string
		return ret
	}
	return *o.Kw
}

// GetKwOk returns a tuple with the Kw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetKwOk() (*string, bool) {
	if o == nil || IsNil(o.Kw) {
		return nil, false
	}
	return o.Kw, true
}

// HasKw returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasKw() bool {
	if o != nil && !IsNil(o.Kw) {
		return true
	}

	return false
}

// SetKw gets a reference to the given string and assigns it to the Kw field.
func (o *IdentAdditionalInfoDTO) SetKw(v string) {
	o.Kw = &v
}

// GetCylinder returns the Cylinder field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetCylinder() string {
	if o == nil || IsNil(o.Cylinder) {
		var ret string
		return ret
	}
	return *o.Cylinder
}

// GetCylinderOk returns a tuple with the Cylinder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetCylinderOk() (*string, bool) {
	if o == nil || IsNil(o.Cylinder) {
		return nil, false
	}
	return o.Cylinder, true
}

// HasCylinder returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasCylinder() bool {
	if o != nil && !IsNil(o.Cylinder) {
		return true
	}

	return false
}

// SetCylinder gets a reference to the given string and assigns it to the Cylinder field.
func (o *IdentAdditionalInfoDTO) SetCylinder(v string) {
	o.Cylinder = &v
}

// GetBodyType returns the BodyType field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetBodyType() string {
	if o == nil || IsNil(o.BodyType) {
		var ret string
		return ret
	}
	return *o.BodyType
}

// GetBodyTypeOk returns a tuple with the BodyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetBodyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BodyType) {
		return nil, false
	}
	return o.BodyType, true
}

// HasBodyType returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasBodyType() bool {
	if o != nil && !IsNil(o.BodyType) {
		return true
	}

	return false
}

// SetBodyType gets a reference to the given string and assigns it to the BodyType field.
func (o *IdentAdditionalInfoDTO) SetBodyType(v string) {
	o.BodyType = &v
}

// GetModelYearVin returns the ModelYearVin field value if set, zero value otherwise.
func (o *IdentAdditionalInfoDTO) GetModelYearVin() string {
	if o == nil || IsNil(o.ModelYearVin) {
		var ret string
		return ret
	}
	return *o.ModelYearVin
}

// GetModelYearVinOk returns a tuple with the ModelYearVin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentAdditionalInfoDTO) GetModelYearVinOk() (*string, bool) {
	if o == nil || IsNil(o.ModelYearVin) {
		return nil, false
	}
	return o.ModelYearVin, true
}

// HasModelYearVin returns a boolean if a field has been set.
func (o *IdentAdditionalInfoDTO) HasModelYearVin() bool {
	if o != nil && !IsNil(o.ModelYearVin) {
		return true
	}

	return false
}

// SetModelYearVin gets a reference to the given string and assigns it to the ModelYearVin field.
func (o *IdentAdditionalInfoDTO) SetModelYearVin(v string) {
	o.ModelYearVin = &v
}

func (o IdentAdditionalInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentAdditionalInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ModelSeries) {
		toSerialize["modelSeries"] = o.ModelSeries
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.ModelId) {
		toSerialize["modelId"] = o.ModelId
	}
	if !IsNil(o.ModelTyp) {
		toSerialize["modelTyp"] = o.ModelTyp
	}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	if !IsNil(o.FuelType) {
		toSerialize["fuelType"] = o.FuelType
	}
	if !IsNil(o.YearFrom) {
		toSerialize["yearFrom"] = o.YearFrom
	}
	if !IsNil(o.YearTo) {
		toSerialize["yearTo"] = o.YearTo
	}
	if !IsNil(o.Ccm) {
		toSerialize["ccm"] = o.Ccm
	}
	if !IsNil(o.Kw) {
		toSerialize["kw"] = o.Kw
	}
	if !IsNil(o.Cylinder) {
		toSerialize["cylinder"] = o.Cylinder
	}
	if !IsNil(o.BodyType) {
		toSerialize["bodyType"] = o.BodyType
	}
	if !IsNil(o.ModelYearVin) {
		toSerialize["modelYearVin"] = o.ModelYearVin
	}
	return toSerialize, nil
}

type NullableIdentAdditionalInfoDTO struct {
	value *IdentAdditionalInfoDTO
	isSet bool
}

func (v NullableIdentAdditionalInfoDTO) Get() *IdentAdditionalInfoDTO {
	return v.value
}

func (v *NullableIdentAdditionalInfoDTO) Set(val *IdentAdditionalInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentAdditionalInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentAdditionalInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentAdditionalInfoDTO(val *IdentAdditionalInfoDTO) *NullableIdentAdditionalInfoDTO {
	return &NullableIdentAdditionalInfoDTO{value: val, isSet: true}
}

func (v NullableIdentAdditionalInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentAdditionalInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


