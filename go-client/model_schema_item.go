/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the SchemaItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaItem{}

// SchemaItem struct for SchemaItem
type SchemaItem struct {
	// Id
	Id *string `json:"id,omitempty"`
	ShortText *ReplacementNameReference `json:"shortText,omitempty"`
	Operation *SchemaItemOperation `json:"operation,omitempty"`
	// List of Item Parts
	ItemParts []SchemaItemPart `json:"itemParts,omitempty"`
	// List of Service Components
	ServiceComponents []ServiceComponent `json:"serviceComponents,omitempty"`
	// Is additional
	IsAdditional *bool `json:"isAdditional,omitempty"`
	// Order
	Order *int32 `json:"order,omitempty"`
	// Aggregated Labour Time
	AggregatedLabourTime *int32 `json:"aggregatedLabourTime,omitempty"`
	// If mileage, date of production and possibly date and mileage of last service was provided, it is calculated when the related item is due in terms of distance left. Can also be negative, if the service is overdue.
	DueInDistance *int32 `json:"dueInDistance,omitempty"`
	// If mileage, date of production and possibly date and mileage of last service was provided, it is calculated when the related item is due in terms of days left. Can also be negative, if the service is overdue.
	DueInDays *int32 `json:"dueInDays,omitempty"`
}

// NewSchemaItem instantiates a new SchemaItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaItem() *SchemaItem {
	this := SchemaItem{}
	return &this
}

// NewSchemaItemWithDefaults instantiates a new SchemaItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaItemWithDefaults() *SchemaItem {
	this := SchemaItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaItem) SetId(v string) {
	o.Id = &v
}

// GetShortText returns the ShortText field value if set, zero value otherwise.
func (o *SchemaItem) GetShortText() ReplacementNameReference {
	if o == nil || IsNil(o.ShortText) {
		var ret ReplacementNameReference
		return ret
	}
	return *o.ShortText
}

// GetShortTextOk returns a tuple with the ShortText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetShortTextOk() (*ReplacementNameReference, bool) {
	if o == nil || IsNil(o.ShortText) {
		return nil, false
	}
	return o.ShortText, true
}

// HasShortText returns a boolean if a field has been set.
func (o *SchemaItem) HasShortText() bool {
	if o != nil && !IsNil(o.ShortText) {
		return true
	}

	return false
}

// SetShortText gets a reference to the given ReplacementNameReference and assigns it to the ShortText field.
func (o *SchemaItem) SetShortText(v ReplacementNameReference) {
	o.ShortText = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *SchemaItem) GetOperation() SchemaItemOperation {
	if o == nil || IsNil(o.Operation) {
		var ret SchemaItemOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetOperationOk() (*SchemaItemOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *SchemaItem) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given SchemaItemOperation and assigns it to the Operation field.
func (o *SchemaItem) SetOperation(v SchemaItemOperation) {
	o.Operation = &v
}

// GetItemParts returns the ItemParts field value if set, zero value otherwise.
func (o *SchemaItem) GetItemParts() []SchemaItemPart {
	if o == nil || IsNil(o.ItemParts) {
		var ret []SchemaItemPart
		return ret
	}
	return o.ItemParts
}

// GetItemPartsOk returns a tuple with the ItemParts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetItemPartsOk() ([]SchemaItemPart, bool) {
	if o == nil || IsNil(o.ItemParts) {
		return nil, false
	}
	return o.ItemParts, true
}

// HasItemParts returns a boolean if a field has been set.
func (o *SchemaItem) HasItemParts() bool {
	if o != nil && !IsNil(o.ItemParts) {
		return true
	}

	return false
}

// SetItemParts gets a reference to the given []SchemaItemPart and assigns it to the ItemParts field.
func (o *SchemaItem) SetItemParts(v []SchemaItemPart) {
	o.ItemParts = v
}

// GetServiceComponents returns the ServiceComponents field value if set, zero value otherwise.
func (o *SchemaItem) GetServiceComponents() []ServiceComponent {
	if o == nil || IsNil(o.ServiceComponents) {
		var ret []ServiceComponent
		return ret
	}
	return o.ServiceComponents
}

// GetServiceComponentsOk returns a tuple with the ServiceComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetServiceComponentsOk() ([]ServiceComponent, bool) {
	if o == nil || IsNil(o.ServiceComponents) {
		return nil, false
	}
	return o.ServiceComponents, true
}

// HasServiceComponents returns a boolean if a field has been set.
func (o *SchemaItem) HasServiceComponents() bool {
	if o != nil && !IsNil(o.ServiceComponents) {
		return true
	}

	return false
}

// SetServiceComponents gets a reference to the given []ServiceComponent and assigns it to the ServiceComponents field.
func (o *SchemaItem) SetServiceComponents(v []ServiceComponent) {
	o.ServiceComponents = v
}

// GetIsAdditional returns the IsAdditional field value if set, zero value otherwise.
func (o *SchemaItem) GetIsAdditional() bool {
	if o == nil || IsNil(o.IsAdditional) {
		var ret bool
		return ret
	}
	return *o.IsAdditional
}

// GetIsAdditionalOk returns a tuple with the IsAdditional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetIsAdditionalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdditional) {
		return nil, false
	}
	return o.IsAdditional, true
}

// HasIsAdditional returns a boolean if a field has been set.
func (o *SchemaItem) HasIsAdditional() bool {
	if o != nil && !IsNil(o.IsAdditional) {
		return true
	}

	return false
}

// SetIsAdditional gets a reference to the given bool and assigns it to the IsAdditional field.
func (o *SchemaItem) SetIsAdditional(v bool) {
	o.IsAdditional = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *SchemaItem) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *SchemaItem) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *SchemaItem) SetOrder(v int32) {
	o.Order = &v
}

// GetAggregatedLabourTime returns the AggregatedLabourTime field value if set, zero value otherwise.
func (o *SchemaItem) GetAggregatedLabourTime() int32 {
	if o == nil || IsNil(o.AggregatedLabourTime) {
		var ret int32
		return ret
	}
	return *o.AggregatedLabourTime
}

// GetAggregatedLabourTimeOk returns a tuple with the AggregatedLabourTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetAggregatedLabourTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AggregatedLabourTime) {
		return nil, false
	}
	return o.AggregatedLabourTime, true
}

// HasAggregatedLabourTime returns a boolean if a field has been set.
func (o *SchemaItem) HasAggregatedLabourTime() bool {
	if o != nil && !IsNil(o.AggregatedLabourTime) {
		return true
	}

	return false
}

// SetAggregatedLabourTime gets a reference to the given int32 and assigns it to the AggregatedLabourTime field.
func (o *SchemaItem) SetAggregatedLabourTime(v int32) {
	o.AggregatedLabourTime = &v
}

// GetDueInDistance returns the DueInDistance field value if set, zero value otherwise.
func (o *SchemaItem) GetDueInDistance() int32 {
	if o == nil || IsNil(o.DueInDistance) {
		var ret int32
		return ret
	}
	return *o.DueInDistance
}

// GetDueInDistanceOk returns a tuple with the DueInDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetDueInDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.DueInDistance) {
		return nil, false
	}
	return o.DueInDistance, true
}

// HasDueInDistance returns a boolean if a field has been set.
func (o *SchemaItem) HasDueInDistance() bool {
	if o != nil && !IsNil(o.DueInDistance) {
		return true
	}

	return false
}

// SetDueInDistance gets a reference to the given int32 and assigns it to the DueInDistance field.
func (o *SchemaItem) SetDueInDistance(v int32) {
	o.DueInDistance = &v
}

// GetDueInDays returns the DueInDays field value if set, zero value otherwise.
func (o *SchemaItem) GetDueInDays() int32 {
	if o == nil || IsNil(o.DueInDays) {
		var ret int32
		return ret
	}
	return *o.DueInDays
}

// GetDueInDaysOk returns a tuple with the DueInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItem) GetDueInDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.DueInDays) {
		return nil, false
	}
	return o.DueInDays, true
}

// HasDueInDays returns a boolean if a field has been set.
func (o *SchemaItem) HasDueInDays() bool {
	if o != nil && !IsNil(o.DueInDays) {
		return true
	}

	return false
}

// SetDueInDays gets a reference to the given int32 and assigns it to the DueInDays field.
func (o *SchemaItem) SetDueInDays(v int32) {
	o.DueInDays = &v
}

func (o SchemaItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ShortText) {
		toSerialize["shortText"] = o.ShortText
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.ItemParts) {
		toSerialize["itemParts"] = o.ItemParts
	}
	if !IsNil(o.ServiceComponents) {
		toSerialize["serviceComponents"] = o.ServiceComponents
	}
	if !IsNil(o.IsAdditional) {
		toSerialize["isAdditional"] = o.IsAdditional
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.AggregatedLabourTime) {
		toSerialize["aggregatedLabourTime"] = o.AggregatedLabourTime
	}
	if !IsNil(o.DueInDistance) {
		toSerialize["dueInDistance"] = o.DueInDistance
	}
	if !IsNil(o.DueInDays) {
		toSerialize["dueInDays"] = o.DueInDays
	}
	return toSerialize, nil
}

type NullableSchemaItem struct {
	value *SchemaItem
	isSet bool
}

func (v NullableSchemaItem) Get() *SchemaItem {
	return v.value
}

func (v *NullableSchemaItem) Set(val *SchemaItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaItem(val *SchemaItem) *NullableSchemaItem {
	return &NullableSchemaItem{value: val, isSet: true}
}

func (v NullableSchemaItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


