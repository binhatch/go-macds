/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the VehicleTechData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleTechData{}

// VehicleTechData struct for VehicleTechData
type VehicleTechData struct {
	VehicleReference *VehicleReference `json:"vehicleReference,omitempty"`
	TechData *TechData `json:"techData,omitempty"`
}

// NewVehicleTechData instantiates a new VehicleTechData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleTechData() *VehicleTechData {
	this := VehicleTechData{}
	return &this
}

// NewVehicleTechDataWithDefaults instantiates a new VehicleTechData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleTechDataWithDefaults() *VehicleTechData {
	this := VehicleTechData{}
	return &this
}

// GetVehicleReference returns the VehicleReference field value if set, zero value otherwise.
func (o *VehicleTechData) GetVehicleReference() VehicleReference {
	if o == nil || IsNil(o.VehicleReference) {
		var ret VehicleReference
		return ret
	}
	return *o.VehicleReference
}

// GetVehicleReferenceOk returns a tuple with the VehicleReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleTechData) GetVehicleReferenceOk() (*VehicleReference, bool) {
	if o == nil || IsNil(o.VehicleReference) {
		return nil, false
	}
	return o.VehicleReference, true
}

// HasVehicleReference returns a boolean if a field has been set.
func (o *VehicleTechData) HasVehicleReference() bool {
	if o != nil && !IsNil(o.VehicleReference) {
		return true
	}

	return false
}

// SetVehicleReference gets a reference to the given VehicleReference and assigns it to the VehicleReference field.
func (o *VehicleTechData) SetVehicleReference(v VehicleReference) {
	o.VehicleReference = &v
}

// GetTechData returns the TechData field value if set, zero value otherwise.
func (o *VehicleTechData) GetTechData() TechData {
	if o == nil || IsNil(o.TechData) {
		var ret TechData
		return ret
	}
	return *o.TechData
}

// GetTechDataOk returns a tuple with the TechData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleTechData) GetTechDataOk() (*TechData, bool) {
	if o == nil || IsNil(o.TechData) {
		return nil, false
	}
	return o.TechData, true
}

// HasTechData returns a boolean if a field has been set.
func (o *VehicleTechData) HasTechData() bool {
	if o != nil && !IsNil(o.TechData) {
		return true
	}

	return false
}

// SetTechData gets a reference to the given TechData and assigns it to the TechData field.
func (o *VehicleTechData) SetTechData(v TechData) {
	o.TechData = &v
}

func (o VehicleTechData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleTechData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VehicleReference) {
		toSerialize["vehicleReference"] = o.VehicleReference
	}
	if !IsNil(o.TechData) {
		toSerialize["techData"] = o.TechData
	}
	return toSerialize, nil
}

type NullableVehicleTechData struct {
	value *VehicleTechData
	isSet bool
}

func (v NullableVehicleTechData) Get() *VehicleTechData {
	return v.value
}

func (v *NullableVehicleTechData) Set(val *VehicleTechData) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleTechData) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleTechData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleTechData(val *VehicleTechData) *NullableVehicleTechData {
	return &NullableVehicleTechData{value: val, isSet: true}
}

func (v NullableVehicleTechData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleTechData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


