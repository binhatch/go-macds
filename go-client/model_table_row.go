/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the TableRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableRow{}

// TableRow struct for TableRow
type TableRow struct {
	// Order
	Order *int32 `json:"order,omitempty"`
	// List of Table Columns
	TableColumns []TableColumn `json:"tableColumns,omitempty"`
}

// NewTableRow instantiates a new TableRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableRow() *TableRow {
	this := TableRow{}
	return &this
}

// NewTableRowWithDefaults instantiates a new TableRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableRowWithDefaults() *TableRow {
	this := TableRow{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *TableRow) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableRow) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *TableRow) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *TableRow) SetOrder(v int32) {
	o.Order = &v
}

// GetTableColumns returns the TableColumns field value if set, zero value otherwise.
func (o *TableRow) GetTableColumns() []TableColumn {
	if o == nil || IsNil(o.TableColumns) {
		var ret []TableColumn
		return ret
	}
	return o.TableColumns
}

// GetTableColumnsOk returns a tuple with the TableColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableRow) GetTableColumnsOk() ([]TableColumn, bool) {
	if o == nil || IsNil(o.TableColumns) {
		return nil, false
	}
	return o.TableColumns, true
}

// HasTableColumns returns a boolean if a field has been set.
func (o *TableRow) HasTableColumns() bool {
	if o != nil && !IsNil(o.TableColumns) {
		return true
	}

	return false
}

// SetTableColumns gets a reference to the given []TableColumn and assigns it to the TableColumns field.
func (o *TableRow) SetTableColumns(v []TableColumn) {
	o.TableColumns = v
}

func (o TableRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.TableColumns) {
		toSerialize["tableColumns"] = o.TableColumns
	}
	return toSerialize, nil
}

type NullableTableRow struct {
	value *TableRow
	isSet bool
}

func (v NullableTableRow) Get() *TableRow {
	return v.value
}

func (v *NullableTableRow) Set(val *TableRow) {
	v.value = val
	v.isSet = true
}

func (v NullableTableRow) IsSet() bool {
	return v.isSet
}

func (v *NullableTableRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableRow(val *TableRow) *NullableTableRow {
	return &NullableTableRow{value: val, isSet: true}
}

func (v NullableTableRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


