/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the RecallGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecallGroup{}

// RecallGroup struct for RecallGroup
type RecallGroup struct {
	// List of Recall Items
	RecallItems []RecallItem `json:"recallItems,omitempty"`
}

// NewRecallGroup instantiates a new RecallGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecallGroup() *RecallGroup {
	this := RecallGroup{}
	return &this
}

// NewRecallGroupWithDefaults instantiates a new RecallGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecallGroupWithDefaults() *RecallGroup {
	this := RecallGroup{}
	return &this
}

// GetRecallItems returns the RecallItems field value if set, zero value otherwise.
func (o *RecallGroup) GetRecallItems() []RecallItem {
	if o == nil || IsNil(o.RecallItems) {
		var ret []RecallItem
		return ret
	}
	return o.RecallItems
}

// GetRecallItemsOk returns a tuple with the RecallItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecallGroup) GetRecallItemsOk() ([]RecallItem, bool) {
	if o == nil || IsNil(o.RecallItems) {
		return nil, false
	}
	return o.RecallItems, true
}

// HasRecallItems returns a boolean if a field has been set.
func (o *RecallGroup) HasRecallItems() bool {
	if o != nil && !IsNil(o.RecallItems) {
		return true
	}

	return false
}

// SetRecallItems gets a reference to the given []RecallItem and assigns it to the RecallItems field.
func (o *RecallGroup) SetRecallItems(v []RecallItem) {
	o.RecallItems = v
}

func (o RecallGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecallGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecallItems) {
		toSerialize["recallItems"] = o.RecallItems
	}
	return toSerialize, nil
}

type NullableRecallGroup struct {
	value *RecallGroup
	isSet bool
}

func (v NullableRecallGroup) Get() *RecallGroup {
	return v.value
}

func (v *NullableRecallGroup) Set(val *RecallGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRecallGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRecallGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecallGroup(val *RecallGroup) *NullableRecallGroup {
	return &NullableRecallGroup{value: val, isSet: true}
}

func (v NullableRecallGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecallGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


