/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// TechnicalDataAPIService TechnicalDataAPI service
type TechnicalDataAPIService service

type ApiTechnicalData1mainRequest struct {
	ctx context.Context
	ApiService *TechnicalDataAPIService
	language *string
	kType *string
	engineCode *string
	engineKw *string
	regionCode *string
	hgsManufId *string
	hgsModelId *string
	productionYear *string
	preview *string
}

// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
func (r ApiTechnicalData1mainRequest) Language(language string) ApiTechnicalData1mainRequest {
	r.language = &language
	return r
}

// KType
func (r ApiTechnicalData1mainRequest) KType(kType string) ApiTechnicalData1mainRequest {
	r.kType = &kType
	return r
}

// Engine Code
func (r ApiTechnicalData1mainRequest) EngineCode(engineCode string) ApiTechnicalData1mainRequest {
	r.engineCode = &engineCode
	return r
}

// Engine kW
func (r ApiTechnicalData1mainRequest) EngineKw(engineKw string) ApiTechnicalData1mainRequest {
	r.engineKw = &engineKw
	return r
}

// Region Code
func (r ApiTechnicalData1mainRequest) RegionCode(regionCode string) ApiTechnicalData1mainRequest {
	r.regionCode = &regionCode
	return r
}

// HGS Manufacturer Id
func (r ApiTechnicalData1mainRequest) HgsManufId(hgsManufId string) ApiTechnicalData1mainRequest {
	r.hgsManufId = &hgsManufId
	return r
}

// HGS Model Id
func (r ApiTechnicalData1mainRequest) HgsModelId(hgsModelId string) ApiTechnicalData1mainRequest {
	r.hgsModelId = &hgsModelId
	return r
}

// Production Year
func (r ApiTechnicalData1mainRequest) ProductionYear(productionYear string) ApiTechnicalData1mainRequest {
	r.productionYear = &productionYear
	return r
}

// Preview
func (r ApiTechnicalData1mainRequest) Preview(preview string) ApiTechnicalData1mainRequest {
	r.preview = &preview
	return r
}

func (r ApiTechnicalData1mainRequest) Execute() ([]VehicleTechData, *http.Response, error) {
	return r.ApiService.TechnicalData1mainExecute(r)
}

/*
TechnicalData1main Get technical data

Get technical data for a selected vehicle, such as engine oil specifications, brake disk dimensions, tire sizes etc. The request needs the KType or HGS Manufacturer Id and HGS Model Id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTechnicalData1mainRequest
*/
func (a *TechnicalDataAPIService) TechnicalData1main(ctx context.Context) ApiTechnicalData1mainRequest {
	return ApiTechnicalData1mainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []VehicleTechData
func (a *TechnicalDataAPIService) TechnicalData1mainExecute(r ApiTechnicalData1mainRequest) ([]VehicleTechData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []VehicleTechData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TechnicalDataAPIService.TechnicalData1main")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/techdata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.language == nil {
		return localVarReturnValue, nil, reportError("language is required and must be specified")
	}

	if r.kType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "kType", r.kType, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	if r.engineCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engineCode", r.engineCode, "")
	}
	if r.engineKw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engineKw", r.engineKw, "")
	}
	if r.regionCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "regionCode", r.regionCode, "")
	}
	if r.hgsManufId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hgsManufId", r.hgsManufId, "")
	}
	if r.hgsModelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hgsModelId", r.hgsModelId, "")
	}
	if r.productionYear != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productionYear", r.productionYear, "")
	}
	if r.preview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preview", r.preview, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
