/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the EngineCompartment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngineCompartment{}

// EngineCompartment struct for EngineCompartment
type EngineCompartment struct {
	// List of Systems
	Systems []LocationsSystemDTO `json:"systems,omitempty"`
}

// NewEngineCompartment instantiates a new EngineCompartment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngineCompartment() *EngineCompartment {
	this := EngineCompartment{}
	return &this
}

// NewEngineCompartmentWithDefaults instantiates a new EngineCompartment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineCompartmentWithDefaults() *EngineCompartment {
	this := EngineCompartment{}
	return &this
}

// GetSystems returns the Systems field value if set, zero value otherwise.
func (o *EngineCompartment) GetSystems() []LocationsSystemDTO {
	if o == nil || IsNil(o.Systems) {
		var ret []LocationsSystemDTO
		return ret
	}
	return o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngineCompartment) GetSystemsOk() ([]LocationsSystemDTO, bool) {
	if o == nil || IsNil(o.Systems) {
		return nil, false
	}
	return o.Systems, true
}

// HasSystems returns a boolean if a field has been set.
func (o *EngineCompartment) HasSystems() bool {
	if o != nil && !IsNil(o.Systems) {
		return true
	}

	return false
}

// SetSystems gets a reference to the given []LocationsSystemDTO and assigns it to the Systems field.
func (o *EngineCompartment) SetSystems(v []LocationsSystemDTO) {
	o.Systems = v
}

func (o EngineCompartment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngineCompartment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Systems) {
		toSerialize["systems"] = o.Systems
	}
	return toSerialize, nil
}

type NullableEngineCompartment struct {
	value *EngineCompartment
	isSet bool
}

func (v NullableEngineCompartment) Get() *EngineCompartment {
	return v.value
}

func (v *NullableEngineCompartment) Set(val *EngineCompartment) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineCompartment) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineCompartment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineCompartment(val *EngineCompartment) *NullableEngineCompartment {
	return &NullableEngineCompartment{value: val, isSet: true}
}

func (v NullableEngineCompartment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineCompartment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


