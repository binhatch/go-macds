/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the Periphery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Periphery{}

// Periphery struct for Periphery
type Periphery struct {
	// Can have values to further specify the data type presented. Can have values such as: flatrateunit (repair times), fuserelay, composition (placements and organisation of different elements on the vehicle), stco (ECU coding), periphery (relevant periphery components to the main component), wiringdiagram, techdata, \"techinfo\" (proprietary knowledge database of Hella Gutmann), \"componenttestvalues\", \"bulletin\", \"manual\", \"gdst\" (basic setting),  \"faultcode\", \"parameter\"
	Datatype *string `json:"datatype,omitempty"`
	// order
	Order *int32 `json:"order,omitempty"`
	// unique ID of the periphery
	IdPeriphery *int32 `json:"idPeriphery,omitempty"`
	// Text of the periphery
	Text *string `json:"text,omitempty"`
	// Contains structured texts to guide the interpretation of text values.
	Richtext []RichTextDTO `json:"richtext,omitempty"`
	// vehicleInfo
	VehicleInfo *string `json:"vehicleInfo,omitempty"`
}

// NewPeriphery instantiates a new Periphery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriphery() *Periphery {
	this := Periphery{}
	return &this
}

// NewPeripheryWithDefaults instantiates a new Periphery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeripheryWithDefaults() *Periphery {
	this := Periphery{}
	return &this
}

// GetDatatype returns the Datatype field value if set, zero value otherwise.
func (o *Periphery) GetDatatype() string {
	if o == nil || IsNil(o.Datatype) {
		var ret string
		return ret
	}
	return *o.Datatype
}

// GetDatatypeOk returns a tuple with the Datatype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetDatatypeOk() (*string, bool) {
	if o == nil || IsNil(o.Datatype) {
		return nil, false
	}
	return o.Datatype, true
}

// HasDatatype returns a boolean if a field has been set.
func (o *Periphery) HasDatatype() bool {
	if o != nil && !IsNil(o.Datatype) {
		return true
	}

	return false
}

// SetDatatype gets a reference to the given string and assigns it to the Datatype field.
func (o *Periphery) SetDatatype(v string) {
	o.Datatype = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Periphery) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Periphery) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *Periphery) SetOrder(v int32) {
	o.Order = &v
}

// GetIdPeriphery returns the IdPeriphery field value if set, zero value otherwise.
func (o *Periphery) GetIdPeriphery() int32 {
	if o == nil || IsNil(o.IdPeriphery) {
		var ret int32
		return ret
	}
	return *o.IdPeriphery
}

// GetIdPeripheryOk returns a tuple with the IdPeriphery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetIdPeripheryOk() (*int32, bool) {
	if o == nil || IsNil(o.IdPeriphery) {
		return nil, false
	}
	return o.IdPeriphery, true
}

// HasIdPeriphery returns a boolean if a field has been set.
func (o *Periphery) HasIdPeriphery() bool {
	if o != nil && !IsNil(o.IdPeriphery) {
		return true
	}

	return false
}

// SetIdPeriphery gets a reference to the given int32 and assigns it to the IdPeriphery field.
func (o *Periphery) SetIdPeriphery(v int32) {
	o.IdPeriphery = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Periphery) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Periphery) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Periphery) SetText(v string) {
	o.Text = &v
}

// GetRichtext returns the Richtext field value if set, zero value otherwise.
func (o *Periphery) GetRichtext() []RichTextDTO {
	if o == nil || IsNil(o.Richtext) {
		var ret []RichTextDTO
		return ret
	}
	return o.Richtext
}

// GetRichtextOk returns a tuple with the Richtext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetRichtextOk() ([]RichTextDTO, bool) {
	if o == nil || IsNil(o.Richtext) {
		return nil, false
	}
	return o.Richtext, true
}

// HasRichtext returns a boolean if a field has been set.
func (o *Periphery) HasRichtext() bool {
	if o != nil && !IsNil(o.Richtext) {
		return true
	}

	return false
}

// SetRichtext gets a reference to the given []RichTextDTO and assigns it to the Richtext field.
func (o *Periphery) SetRichtext(v []RichTextDTO) {
	o.Richtext = v
}

// GetVehicleInfo returns the VehicleInfo field value if set, zero value otherwise.
func (o *Periphery) GetVehicleInfo() string {
	if o == nil || IsNil(o.VehicleInfo) {
		var ret string
		return ret
	}
	return *o.VehicleInfo
}

// GetVehicleInfoOk returns a tuple with the VehicleInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Periphery) GetVehicleInfoOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleInfo) {
		return nil, false
	}
	return o.VehicleInfo, true
}

// HasVehicleInfo returns a boolean if a field has been set.
func (o *Periphery) HasVehicleInfo() bool {
	if o != nil && !IsNil(o.VehicleInfo) {
		return true
	}

	return false
}

// SetVehicleInfo gets a reference to the given string and assigns it to the VehicleInfo field.
func (o *Periphery) SetVehicleInfo(v string) {
	o.VehicleInfo = &v
}

func (o Periphery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Periphery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datatype) {
		toSerialize["datatype"] = o.Datatype
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.IdPeriphery) {
		toSerialize["idPeriphery"] = o.IdPeriphery
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Richtext) {
		toSerialize["richtext"] = o.Richtext
	}
	if !IsNil(o.VehicleInfo) {
		toSerialize["vehicleInfo"] = o.VehicleInfo
	}
	return toSerialize, nil
}

type NullablePeriphery struct {
	value *Periphery
	isSet bool
}

func (v NullablePeriphery) Get() *Periphery {
	return v.value
}

func (v *NullablePeriphery) Set(val *Periphery) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriphery) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriphery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriphery(val *Periphery) *NullablePeriphery {
	return &NullablePeriphery{value: val, isSet: true}
}

func (v NullablePeriphery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriphery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


