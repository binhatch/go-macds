/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the ComponentCoordinates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentCoordinates{}

// ComponentCoordinates struct for ComponentCoordinates
type ComponentCoordinates struct {
	Component *WiringComponent `json:"component,omitempty"`
	// The x-coordinate (horizontal position) of the starting point of a component in the diagram.
	X1 *float64 `json:"x1,omitempty"`
	// The y-coordinate (vertical position) of the starting point of a component in the diagram.
	Y1 *float64 `json:"y1,omitempty"`
	// The x-coordinate of the ending point of the component in the diagram.
	X2 *float64 `json:"x2,omitempty"`
	// The y-coordinate of the ending point of the component in the diagram.
	Y2 *float64 `json:"y2,omitempty"`
}

// NewComponentCoordinates instantiates a new ComponentCoordinates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentCoordinates() *ComponentCoordinates {
	this := ComponentCoordinates{}
	return &this
}

// NewComponentCoordinatesWithDefaults instantiates a new ComponentCoordinates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentCoordinatesWithDefaults() *ComponentCoordinates {
	this := ComponentCoordinates{}
	return &this
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *ComponentCoordinates) GetComponent() WiringComponent {
	if o == nil || IsNil(o.Component) {
		var ret WiringComponent
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentCoordinates) GetComponentOk() (*WiringComponent, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *ComponentCoordinates) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given WiringComponent and assigns it to the Component field.
func (o *ComponentCoordinates) SetComponent(v WiringComponent) {
	o.Component = &v
}

// GetX1 returns the X1 field value if set, zero value otherwise.
func (o *ComponentCoordinates) GetX1() float64 {
	if o == nil || IsNil(o.X1) {
		var ret float64
		return ret
	}
	return *o.X1
}

// GetX1Ok returns a tuple with the X1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentCoordinates) GetX1Ok() (*float64, bool) {
	if o == nil || IsNil(o.X1) {
		return nil, false
	}
	return o.X1, true
}

// HasX1 returns a boolean if a field has been set.
func (o *ComponentCoordinates) HasX1() bool {
	if o != nil && !IsNil(o.X1) {
		return true
	}

	return false
}

// SetX1 gets a reference to the given float64 and assigns it to the X1 field.
func (o *ComponentCoordinates) SetX1(v float64) {
	o.X1 = &v
}

// GetY1 returns the Y1 field value if set, zero value otherwise.
func (o *ComponentCoordinates) GetY1() float64 {
	if o == nil || IsNil(o.Y1) {
		var ret float64
		return ret
	}
	return *o.Y1
}

// GetY1Ok returns a tuple with the Y1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentCoordinates) GetY1Ok() (*float64, bool) {
	if o == nil || IsNil(o.Y1) {
		return nil, false
	}
	return o.Y1, true
}

// HasY1 returns a boolean if a field has been set.
func (o *ComponentCoordinates) HasY1() bool {
	if o != nil && !IsNil(o.Y1) {
		return true
	}

	return false
}

// SetY1 gets a reference to the given float64 and assigns it to the Y1 field.
func (o *ComponentCoordinates) SetY1(v float64) {
	o.Y1 = &v
}

// GetX2 returns the X2 field value if set, zero value otherwise.
func (o *ComponentCoordinates) GetX2() float64 {
	if o == nil || IsNil(o.X2) {
		var ret float64
		return ret
	}
	return *o.X2
}

// GetX2Ok returns a tuple with the X2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentCoordinates) GetX2Ok() (*float64, bool) {
	if o == nil || IsNil(o.X2) {
		return nil, false
	}
	return o.X2, true
}

// HasX2 returns a boolean if a field has been set.
func (o *ComponentCoordinates) HasX2() bool {
	if o != nil && !IsNil(o.X2) {
		return true
	}

	return false
}

// SetX2 gets a reference to the given float64 and assigns it to the X2 field.
func (o *ComponentCoordinates) SetX2(v float64) {
	o.X2 = &v
}

// GetY2 returns the Y2 field value if set, zero value otherwise.
func (o *ComponentCoordinates) GetY2() float64 {
	if o == nil || IsNil(o.Y2) {
		var ret float64
		return ret
	}
	return *o.Y2
}

// GetY2Ok returns a tuple with the Y2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentCoordinates) GetY2Ok() (*float64, bool) {
	if o == nil || IsNil(o.Y2) {
		return nil, false
	}
	return o.Y2, true
}

// HasY2 returns a boolean if a field has been set.
func (o *ComponentCoordinates) HasY2() bool {
	if o != nil && !IsNil(o.Y2) {
		return true
	}

	return false
}

// SetY2 gets a reference to the given float64 and assigns it to the Y2 field.
func (o *ComponentCoordinates) SetY2(v float64) {
	o.Y2 = &v
}

func (o ComponentCoordinates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentCoordinates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.X1) {
		toSerialize["x1"] = o.X1
	}
	if !IsNil(o.Y1) {
		toSerialize["y1"] = o.Y1
	}
	if !IsNil(o.X2) {
		toSerialize["x2"] = o.X2
	}
	if !IsNil(o.Y2) {
		toSerialize["y2"] = o.Y2
	}
	return toSerialize, nil
}

type NullableComponentCoordinates struct {
	value *ComponentCoordinates
	isSet bool
}

func (v NullableComponentCoordinates) Get() *ComponentCoordinates {
	return v.value
}

func (v *NullableComponentCoordinates) Set(val *ComponentCoordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentCoordinates(val *ComponentCoordinates) *NullableComponentCoordinates {
	return &NullableComponentCoordinates{value: val, isSet: true}
}

func (v NullableComponentCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


