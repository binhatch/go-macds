/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WiringDiagramsDiagramsRequestDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WiringDiagramsDiagramsRequestDTO{}

// WiringDiagramsDiagramsRequestDTO struct for WiringDiagramsDiagramsRequestDTO
type WiringDiagramsDiagramsRequestDTO struct {
	// id of the system of which a wiring exists. It is found in the response of the /systems endpoint, and required as input of the /diagram endpoint.
	SystemId string `json:"systemId"`
	// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
	Language string `json:"language"`
}

type _WiringDiagramsDiagramsRequestDTO WiringDiagramsDiagramsRequestDTO

// NewWiringDiagramsDiagramsRequestDTO instantiates a new WiringDiagramsDiagramsRequestDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWiringDiagramsDiagramsRequestDTO(systemId string, language string) *WiringDiagramsDiagramsRequestDTO {
	this := WiringDiagramsDiagramsRequestDTO{}
	this.SystemId = systemId
	this.Language = language
	return &this
}

// NewWiringDiagramsDiagramsRequestDTOWithDefaults instantiates a new WiringDiagramsDiagramsRequestDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWiringDiagramsDiagramsRequestDTOWithDefaults() *WiringDiagramsDiagramsRequestDTO {
	this := WiringDiagramsDiagramsRequestDTO{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *WiringDiagramsDiagramsRequestDTO) GetSystemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *WiringDiagramsDiagramsRequestDTO) GetSystemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *WiringDiagramsDiagramsRequestDTO) SetSystemId(v string) {
	o.SystemId = v
}

// GetLanguage returns the Language field value
func (o *WiringDiagramsDiagramsRequestDTO) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *WiringDiagramsDiagramsRequestDTO) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *WiringDiagramsDiagramsRequestDTO) SetLanguage(v string) {
	o.Language = v
}

func (o WiringDiagramsDiagramsRequestDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WiringDiagramsDiagramsRequestDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["systemId"] = o.SystemId
	toSerialize["language"] = o.Language
	return toSerialize, nil
}

func (o *WiringDiagramsDiagramsRequestDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"systemId",
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWiringDiagramsDiagramsRequestDTO := _WiringDiagramsDiagramsRequestDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWiringDiagramsDiagramsRequestDTO)

	if err != nil {
		return err
	}

	*o = WiringDiagramsDiagramsRequestDTO(varWiringDiagramsDiagramsRequestDTO)

	return err
}

type NullableWiringDiagramsDiagramsRequestDTO struct {
	value *WiringDiagramsDiagramsRequestDTO
	isSet bool
}

func (v NullableWiringDiagramsDiagramsRequestDTO) Get() *WiringDiagramsDiagramsRequestDTO {
	return v.value
}

func (v *NullableWiringDiagramsDiagramsRequestDTO) Set(val *WiringDiagramsDiagramsRequestDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWiringDiagramsDiagramsRequestDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWiringDiagramsDiagramsRequestDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWiringDiagramsDiagramsRequestDTO(val *WiringDiagramsDiagramsRequestDTO) *NullableWiringDiagramsDiagramsRequestDTO {
	return &NullableWiringDiagramsDiagramsRequestDTO{value: val, isSet: true}
}

func (v NullableWiringDiagramsDiagramsRequestDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWiringDiagramsDiagramsRequestDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


