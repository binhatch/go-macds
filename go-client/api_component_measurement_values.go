/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ComponentMeasurementValuesAPIService ComponentMeasurementValuesAPI service
type ComponentMeasurementValuesAPIService service

type ApiCompMeas31pinComponentsRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	componentsV3RequestDTO *ComponentsV3RequestDTO
}

// The request at least requires the specification of kType and language to get a list of PIN components.
func (r ApiCompMeas31pinComponentsRequest) ComponentsV3RequestDTO(componentsV3RequestDTO ComponentsV3RequestDTO) ApiCompMeas31pinComponentsRequest {
	r.componentsV3RequestDTO = &componentsV3RequestDTO
	return r
}

func (r ApiCompMeas31pinComponentsRequest) Execute() (*PinComponentsV3Response, *http.Response, error) {
	return r.ApiService.CompMeas31pinComponentsExecute(r)
}

/*
CompMeas31pinComponents Pin components V3

Get the available components of a specified Ktype for which pin data is available.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas31pinComponentsRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas31pinComponents(ctx context.Context) ApiCompMeas31pinComponentsRequest {
	return ApiCompMeas31pinComponentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PinComponentsV3Response
func (a *ComponentMeasurementValuesAPIService) CompMeas31pinComponentsExecute(r ApiCompMeas31pinComponentsRequest) (*PinComponentsV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PinComponentsV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas31pinComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/pin/components"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentsV3RequestDTO == nil {
		return localVarReturnValue, nil, reportError("componentsV3RequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentsV3RequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompMeas32pinDataRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	componentDataV3RequestDTO *ComponentDataV3RequestDTO
}

// The request at least requires the specification of kType and language to get a list of PIN data.
func (r ApiCompMeas32pinDataRequest) ComponentDataV3RequestDTO(componentDataV3RequestDTO ComponentDataV3RequestDTO) ApiCompMeas32pinDataRequest {
	r.componentDataV3RequestDTO = &componentDataV3RequestDTO
	return r
}

func (r ApiCompMeas32pinDataRequest) Execute() (*PinDataV3Response, *http.Response, error) {
	return r.ApiService.CompMeas32pinDataExecute(r)
}

/*
CompMeas32pinData Pin data V3

Get the Pin data of a specified component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas32pinDataRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas32pinData(ctx context.Context) ApiCompMeas32pinDataRequest {
	return ApiCompMeas32pinDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PinDataV3Response
func (a *ComponentMeasurementValuesAPIService) CompMeas32pinDataExecute(r ApiCompMeas32pinDataRequest) (*PinDataV3Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PinDataV3Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas32pinData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/pin/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentDataV3RequestDTO == nil {
		return localVarReturnValue, nil, reportError("componentDataV3RequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentDataV3RequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompMeas33pinEcuImageRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	ecuImageId *int32
}

// Id of the ECU Image
func (r ApiCompMeas33pinEcuImageRequest) EcuImageId(ecuImageId int32) ApiCompMeas33pinEcuImageRequest {
	r.ecuImageId = &ecuImageId
	return r
}

func (r ApiCompMeas33pinEcuImageRequest) Execute() (*UrlResponse, *http.Response, error) {
	return r.ApiService.CompMeas33pinEcuImageExecute(r)
}

/*
CompMeas33pinEcuImage ECU image V3

Get the ECU image of a component with pin data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas33pinEcuImageRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas33pinEcuImage(ctx context.Context) ApiCompMeas33pinEcuImageRequest {
	return ApiCompMeas33pinEcuImageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UrlResponse
func (a *ComponentMeasurementValuesAPIService) CompMeas33pinEcuImageExecute(r ApiCompMeas33pinEcuImageRequest) (*UrlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UrlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas33pinEcuImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v3/pin/ecu/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ecuImageId == nil {
		return localVarReturnValue, nil, reportError("ecuImageId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ecuImageId", r.ecuImageId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompMeas41pinComponentsRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	componentsV4RequestDTO *ComponentsV4RequestDTO
}

// The request at least requires the specification of kType and language to get a list of PIN components.
func (r ApiCompMeas41pinComponentsRequest) ComponentsV4RequestDTO(componentsV4RequestDTO ComponentsV4RequestDTO) ApiCompMeas41pinComponentsRequest {
	r.componentsV4RequestDTO = &componentsV4RequestDTO
	return r
}

func (r ApiCompMeas41pinComponentsRequest) Execute() (*PinComponentsV4Response, *http.Response, error) {
	return r.ApiService.CompMeas41pinComponentsExecute(r)
}

/*
CompMeas41pinComponents Pin components V4

Get the available components of a specified Ktype for which pin data is available.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas41pinComponentsRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas41pinComponents(ctx context.Context) ApiCompMeas41pinComponentsRequest {
	return ApiCompMeas41pinComponentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PinComponentsV4Response
func (a *ComponentMeasurementValuesAPIService) CompMeas41pinComponentsExecute(r ApiCompMeas41pinComponentsRequest) (*PinComponentsV4Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PinComponentsV4Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas41pinComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/pin/components"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentsV4RequestDTO == nil {
		return localVarReturnValue, nil, reportError("componentsV4RequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentsV4RequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompMeas42pinDataRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	componentDataV4RequestDTO *ComponentDataV4RequestDTO
}

// The request at least requires the specification of kType and language to get a list of PIN data.
func (r ApiCompMeas42pinDataRequest) ComponentDataV4RequestDTO(componentDataV4RequestDTO ComponentDataV4RequestDTO) ApiCompMeas42pinDataRequest {
	r.componentDataV4RequestDTO = &componentDataV4RequestDTO
	return r
}

func (r ApiCompMeas42pinDataRequest) Execute() (*PinDataV4Response, *http.Response, error) {
	return r.ApiService.CompMeas42pinDataExecute(r)
}

/*
CompMeas42pinData Pin data V4

Get the Pin data of a specified component.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas42pinDataRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas42pinData(ctx context.Context) ApiCompMeas42pinDataRequest {
	return ApiCompMeas42pinDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PinDataV4Response
func (a *ComponentMeasurementValuesAPIService) CompMeas42pinDataExecute(r ApiCompMeas42pinDataRequest) (*PinDataV4Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PinDataV4Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas42pinData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/pin/data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.componentDataV4RequestDTO == nil {
		return localVarReturnValue, nil, reportError("componentDataV4RequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.componentDataV4RequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCompMeas43pinEcuImageRequest struct {
	ctx context.Context
	ApiService *ComponentMeasurementValuesAPIService
	ecuImageId *int32
}

// Id of the ECU Image
func (r ApiCompMeas43pinEcuImageRequest) EcuImageId(ecuImageId int32) ApiCompMeas43pinEcuImageRequest {
	r.ecuImageId = &ecuImageId
	return r
}

func (r ApiCompMeas43pinEcuImageRequest) Execute() (*UrlResponse, *http.Response, error) {
	return r.ApiService.CompMeas43pinEcuImageExecute(r)
}

/*
CompMeas43pinEcuImage ECU image V4

Get the ECU image of a component with pin data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCompMeas43pinEcuImageRequest
*/
func (a *ComponentMeasurementValuesAPIService) CompMeas43pinEcuImage(ctx context.Context) ApiCompMeas43pinEcuImageRequest {
	return ApiCompMeas43pinEcuImageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UrlResponse
func (a *ComponentMeasurementValuesAPIService) CompMeas43pinEcuImageExecute(r ApiCompMeas43pinEcuImageRequest) (*UrlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UrlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentMeasurementValuesAPIService.CompMeas43pinEcuImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/pin/ecu/image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ecuImageId == nil {
		return localVarReturnValue, nil, reportError("ecuImageId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ecuImageId", r.ecuImageId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
