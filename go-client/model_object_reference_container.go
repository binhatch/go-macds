/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the ObjectReferenceContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectReferenceContainer{}

// ObjectReferenceContainer struct for ObjectReferenceContainer
type ObjectReferenceContainer struct {
	ObjectReference *ObjectReference `json:"objectReference,omitempty"`
}

// NewObjectReferenceContainer instantiates a new ObjectReferenceContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectReferenceContainer() *ObjectReferenceContainer {
	this := ObjectReferenceContainer{}
	return &this
}

// NewObjectReferenceContainerWithDefaults instantiates a new ObjectReferenceContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectReferenceContainerWithDefaults() *ObjectReferenceContainer {
	this := ObjectReferenceContainer{}
	return &this
}

// GetObjectReference returns the ObjectReference field value if set, zero value otherwise.
func (o *ObjectReferenceContainer) GetObjectReference() ObjectReference {
	if o == nil || IsNil(o.ObjectReference) {
		var ret ObjectReference
		return ret
	}
	return *o.ObjectReference
}

// GetObjectReferenceOk returns a tuple with the ObjectReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectReferenceContainer) GetObjectReferenceOk() (*ObjectReference, bool) {
	if o == nil || IsNil(o.ObjectReference) {
		return nil, false
	}
	return o.ObjectReference, true
}

// HasObjectReference returns a boolean if a field has been set.
func (o *ObjectReferenceContainer) HasObjectReference() bool {
	if o != nil && !IsNil(o.ObjectReference) {
		return true
	}

	return false
}

// SetObjectReference gets a reference to the given ObjectReference and assigns it to the ObjectReference field.
func (o *ObjectReferenceContainer) SetObjectReference(v ObjectReference) {
	o.ObjectReference = &v
}

func (o ObjectReferenceContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectReferenceContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectReference) {
		toSerialize["objectReference"] = o.ObjectReference
	}
	return toSerialize, nil
}

type NullableObjectReferenceContainer struct {
	value *ObjectReferenceContainer
	isSet bool
}

func (v NullableObjectReferenceContainer) Get() *ObjectReferenceContainer {
	return v.value
}

func (v *NullableObjectReferenceContainer) Set(val *ObjectReferenceContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectReferenceContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectReferenceContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectReferenceContainer(val *ObjectReferenceContainer) *NullableObjectReferenceContainer {
	return &NullableObjectReferenceContainer{value: val, isSet: true}
}

func (v NullableObjectReferenceContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectReferenceContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


