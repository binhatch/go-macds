/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the SystemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemType{}

// SystemType struct for SystemType
type SystemType struct {
	// id of the system of which a wiring exists. It is found in the response of the /systems endpoint, and required as input of the /diagram endpoint.
	SystemId *string `json:"systemId,omitempty"`
	Text *TextTranslation `json:"text,omitempty"`
	// if existent, indicates the start date of when the diagram is applicable
	From *string `json:"from,omitempty"`
	// if existent, indicates the end date of when the diagram is applicable
	To *string `json:"to,omitempty"`
	// if existent, indicates the start date of when the diagram is applicable
	DateFrom *string `json:"dateFrom,omitempty"`
	// if existent, indicates the end date of when the diagram is applicable
	DateTo *string `json:"dateTo,omitempty"`
}

// NewSystemType instantiates a new SystemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemType() *SystemType {
	this := SystemType{}
	return &this
}

// NewSystemTypeWithDefaults instantiates a new SystemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemTypeWithDefaults() *SystemType {
	this := SystemType{}
	return &this
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *SystemType) GetSystemId() string {
	if o == nil || IsNil(o.SystemId) {
		var ret string
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *SystemType) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given string and assigns it to the SystemId field.
func (o *SystemType) SetSystemId(v string) {
	o.SystemId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SystemType) GetText() TextTranslation {
	if o == nil || IsNil(o.Text) {
		var ret TextTranslation
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetTextOk() (*TextTranslation, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SystemType) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given TextTranslation and assigns it to the Text field.
func (o *SystemType) SetText(v TextTranslation) {
	o.Text = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SystemType) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SystemType) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *SystemType) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SystemType) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SystemType) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *SystemType) SetTo(v string) {
	o.To = &v
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *SystemType) GetDateFrom() string {
	if o == nil || IsNil(o.DateFrom) {
		var ret string
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetDateFromOk() (*string, bool) {
	if o == nil || IsNil(o.DateFrom) {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *SystemType) HasDateFrom() bool {
	if o != nil && !IsNil(o.DateFrom) {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given string and assigns it to the DateFrom field.
func (o *SystemType) SetDateFrom(v string) {
	o.DateFrom = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *SystemType) GetDateTo() string {
	if o == nil || IsNil(o.DateTo) {
		var ret string
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemType) GetDateToOk() (*string, bool) {
	if o == nil || IsNil(o.DateTo) {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *SystemType) HasDateTo() bool {
	if o != nil && !IsNil(o.DateTo) {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given string and assigns it to the DateTo field.
func (o *SystemType) SetDateTo(v string) {
	o.DateTo = &v
}

func (o SystemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemId) {
		toSerialize["systemId"] = o.SystemId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.DateFrom) {
		toSerialize["dateFrom"] = o.DateFrom
	}
	if !IsNil(o.DateTo) {
		toSerialize["dateTo"] = o.DateTo
	}
	return toSerialize, nil
}

type NullableSystemType struct {
	value *SystemType
	isSet bool
}

func (v NullableSystemType) Get() *SystemType {
	return v.value
}

func (v *NullableSystemType) Set(val *SystemType) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemType) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemType(val *SystemType) *NullableSystemType {
	return &NullableSystemType{value: val, isSet: true}
}

func (v NullableSystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


