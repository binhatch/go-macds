/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the RepairTimesJobResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepairTimesJobResponse{}

// RepairTimesJobResponse struct for RepairTimesJobResponse
type RepairTimesJobResponse struct {
	// KType
	Ktype *int32 `json:"ktype,omitempty"`
	// Category
	Category *string `json:"category,omitempty"`
	// Sub Category
	SubCategory *string `json:"subCategory,omitempty"`
	// Repair Times
	RepairTimes []RepairTime `json:"repairTimes,omitempty"`
}

// NewRepairTimesJobResponse instantiates a new RepairTimesJobResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepairTimesJobResponse() *RepairTimesJobResponse {
	this := RepairTimesJobResponse{}
	return &this
}

// NewRepairTimesJobResponseWithDefaults instantiates a new RepairTimesJobResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepairTimesJobResponseWithDefaults() *RepairTimesJobResponse {
	this := RepairTimesJobResponse{}
	return &this
}

// GetKtype returns the Ktype field value if set, zero value otherwise.
func (o *RepairTimesJobResponse) GetKtype() int32 {
	if o == nil || IsNil(o.Ktype) {
		var ret int32
		return ret
	}
	return *o.Ktype
}

// GetKtypeOk returns a tuple with the Ktype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTimesJobResponse) GetKtypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Ktype) {
		return nil, false
	}
	return o.Ktype, true
}

// HasKtype returns a boolean if a field has been set.
func (o *RepairTimesJobResponse) HasKtype() bool {
	if o != nil && !IsNil(o.Ktype) {
		return true
	}

	return false
}

// SetKtype gets a reference to the given int32 and assigns it to the Ktype field.
func (o *RepairTimesJobResponse) SetKtype(v int32) {
	o.Ktype = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *RepairTimesJobResponse) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTimesJobResponse) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *RepairTimesJobResponse) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *RepairTimesJobResponse) SetCategory(v string) {
	o.Category = &v
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *RepairTimesJobResponse) GetSubCategory() string {
	if o == nil || IsNil(o.SubCategory) {
		var ret string
		return ret
	}
	return *o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTimesJobResponse) GetSubCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.SubCategory) {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *RepairTimesJobResponse) HasSubCategory() bool {
	if o != nil && !IsNil(o.SubCategory) {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given string and assigns it to the SubCategory field.
func (o *RepairTimesJobResponse) SetSubCategory(v string) {
	o.SubCategory = &v
}

// GetRepairTimes returns the RepairTimes field value if set, zero value otherwise.
func (o *RepairTimesJobResponse) GetRepairTimes() []RepairTime {
	if o == nil || IsNil(o.RepairTimes) {
		var ret []RepairTime
		return ret
	}
	return o.RepairTimes
}

// GetRepairTimesOk returns a tuple with the RepairTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepairTimesJobResponse) GetRepairTimesOk() ([]RepairTime, bool) {
	if o == nil || IsNil(o.RepairTimes) {
		return nil, false
	}
	return o.RepairTimes, true
}

// HasRepairTimes returns a boolean if a field has been set.
func (o *RepairTimesJobResponse) HasRepairTimes() bool {
	if o != nil && !IsNil(o.RepairTimes) {
		return true
	}

	return false
}

// SetRepairTimes gets a reference to the given []RepairTime and assigns it to the RepairTimes field.
func (o *RepairTimesJobResponse) SetRepairTimes(v []RepairTime) {
	o.RepairTimes = v
}

func (o RepairTimesJobResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepairTimesJobResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ktype) {
		toSerialize["ktype"] = o.Ktype
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.SubCategory) {
		toSerialize["subCategory"] = o.SubCategory
	}
	if !IsNil(o.RepairTimes) {
		toSerialize["repairTimes"] = o.RepairTimes
	}
	return toSerialize, nil
}

type NullableRepairTimesJobResponse struct {
	value *RepairTimesJobResponse
	isSet bool
}

func (v NullableRepairTimesJobResponse) Get() *RepairTimesJobResponse {
	return v.value
}

func (v *NullableRepairTimesJobResponse) Set(val *RepairTimesJobResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRepairTimesJobResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRepairTimesJobResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepairTimesJobResponse(val *RepairTimesJobResponse) *NullableRepairTimesJobResponse {
	return &NullableRepairTimesJobResponse{value: val, isSet: true}
}

func (v NullableRepairTimesJobResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepairTimesJobResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


