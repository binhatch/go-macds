/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the TextTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextTranslation{}

// TextTranslation struct for TextTranslation
type TextTranslation struct {
	// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
	Language *string `json:"language,omitempty"`
	// Textual representation of a wiring diagram. May be concatenated with the date properties 'from' and 'to', if existent. May be 'null' in which case it is the default wiring of the related system group.
	SystemName *string `json:"systemName,omitempty"`
}

// NewTextTranslation instantiates a new TextTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextTranslation() *TextTranslation {
	this := TextTranslation{}
	return &this
}

// NewTextTranslationWithDefaults instantiates a new TextTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextTranslationWithDefaults() *TextTranslation {
	this := TextTranslation{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *TextTranslation) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextTranslation) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *TextTranslation) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *TextTranslation) SetLanguage(v string) {
	o.Language = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *TextTranslation) GetSystemName() string {
	if o == nil || IsNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextTranslation) GetSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.SystemName) {
		return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *TextTranslation) HasSystemName() bool {
	if o != nil && !IsNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *TextTranslation) SetSystemName(v string) {
	o.SystemName = &v
}

func (o TextTranslation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.SystemName) {
		toSerialize["systemName"] = o.SystemName
	}
	return toSerialize, nil
}

type NullableTextTranslation struct {
	value *TextTranslation
	isSet bool
}

func (v NullableTextTranslation) Get() *TextTranslation {
	return v.value
}

func (v *NullableTextTranslation) Set(val *TextTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableTextTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableTextTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextTranslation(val *TextTranslation) *NullableTextTranslation {
	return &NullableTextTranslation{value: val, isSet: true}
}

func (v NullableTextTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


