/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the LocationsVehicleDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsVehicleDTO{}

// LocationsVehicleDTO struct for LocationsVehicleDTO
type LocationsVehicleDTO struct {
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
	// Year From
	YearFrom *string `json:"yearFrom,omitempty"`
	// Year To
	YearTo *string `json:"yearTo,omitempty"`
	EngineCompartment *EngineCompartment `json:"engineCompartment,omitempty"`
	Interior *InteriorDTO `json:"interior,omitempty"`
}

// NewLocationsVehicleDTO instantiates a new LocationsVehicleDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsVehicleDTO() *LocationsVehicleDTO {
	this := LocationsVehicleDTO{}
	return &this
}

// NewLocationsVehicleDTOWithDefaults instantiates a new LocationsVehicleDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsVehicleDTOWithDefaults() *LocationsVehicleDTO {
	this := LocationsVehicleDTO{}
	return &this
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *LocationsVehicleDTO) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsVehicleDTO) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *LocationsVehicleDTO) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *LocationsVehicleDTO) SetEngineCode(v string) {
	o.EngineCode = &v
}

// GetYearFrom returns the YearFrom field value if set, zero value otherwise.
func (o *LocationsVehicleDTO) GetYearFrom() string {
	if o == nil || IsNil(o.YearFrom) {
		var ret string
		return ret
	}
	return *o.YearFrom
}

// GetYearFromOk returns a tuple with the YearFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsVehicleDTO) GetYearFromOk() (*string, bool) {
	if o == nil || IsNil(o.YearFrom) {
		return nil, false
	}
	return o.YearFrom, true
}

// HasYearFrom returns a boolean if a field has been set.
func (o *LocationsVehicleDTO) HasYearFrom() bool {
	if o != nil && !IsNil(o.YearFrom) {
		return true
	}

	return false
}

// SetYearFrom gets a reference to the given string and assigns it to the YearFrom field.
func (o *LocationsVehicleDTO) SetYearFrom(v string) {
	o.YearFrom = &v
}

// GetYearTo returns the YearTo field value if set, zero value otherwise.
func (o *LocationsVehicleDTO) GetYearTo() string {
	if o == nil || IsNil(o.YearTo) {
		var ret string
		return ret
	}
	return *o.YearTo
}

// GetYearToOk returns a tuple with the YearTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsVehicleDTO) GetYearToOk() (*string, bool) {
	if o == nil || IsNil(o.YearTo) {
		return nil, false
	}
	return o.YearTo, true
}

// HasYearTo returns a boolean if a field has been set.
func (o *LocationsVehicleDTO) HasYearTo() bool {
	if o != nil && !IsNil(o.YearTo) {
		return true
	}

	return false
}

// SetYearTo gets a reference to the given string and assigns it to the YearTo field.
func (o *LocationsVehicleDTO) SetYearTo(v string) {
	o.YearTo = &v
}

// GetEngineCompartment returns the EngineCompartment field value if set, zero value otherwise.
func (o *LocationsVehicleDTO) GetEngineCompartment() EngineCompartment {
	if o == nil || IsNil(o.EngineCompartment) {
		var ret EngineCompartment
		return ret
	}
	return *o.EngineCompartment
}

// GetEngineCompartmentOk returns a tuple with the EngineCompartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsVehicleDTO) GetEngineCompartmentOk() (*EngineCompartment, bool) {
	if o == nil || IsNil(o.EngineCompartment) {
		return nil, false
	}
	return o.EngineCompartment, true
}

// HasEngineCompartment returns a boolean if a field has been set.
func (o *LocationsVehicleDTO) HasEngineCompartment() bool {
	if o != nil && !IsNil(o.EngineCompartment) {
		return true
	}

	return false
}

// SetEngineCompartment gets a reference to the given EngineCompartment and assigns it to the EngineCompartment field.
func (o *LocationsVehicleDTO) SetEngineCompartment(v EngineCompartment) {
	o.EngineCompartment = &v
}

// GetInterior returns the Interior field value if set, zero value otherwise.
func (o *LocationsVehicleDTO) GetInterior() InteriorDTO {
	if o == nil || IsNil(o.Interior) {
		var ret InteriorDTO
		return ret
	}
	return *o.Interior
}

// GetInteriorOk returns a tuple with the Interior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsVehicleDTO) GetInteriorOk() (*InteriorDTO, bool) {
	if o == nil || IsNil(o.Interior) {
		return nil, false
	}
	return o.Interior, true
}

// HasInterior returns a boolean if a field has been set.
func (o *LocationsVehicleDTO) HasInterior() bool {
	if o != nil && !IsNil(o.Interior) {
		return true
	}

	return false
}

// SetInterior gets a reference to the given InteriorDTO and assigns it to the Interior field.
func (o *LocationsVehicleDTO) SetInterior(v InteriorDTO) {
	o.Interior = &v
}

func (o LocationsVehicleDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsVehicleDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	if !IsNil(o.YearFrom) {
		toSerialize["yearFrom"] = o.YearFrom
	}
	if !IsNil(o.YearTo) {
		toSerialize["yearTo"] = o.YearTo
	}
	if !IsNil(o.EngineCompartment) {
		toSerialize["engineCompartment"] = o.EngineCompartment
	}
	if !IsNil(o.Interior) {
		toSerialize["interior"] = o.Interior
	}
	return toSerialize, nil
}

type NullableLocationsVehicleDTO struct {
	value *LocationsVehicleDTO
	isSet bool
}

func (v NullableLocationsVehicleDTO) Get() *LocationsVehicleDTO {
	return v.value
}

func (v *NullableLocationsVehicleDTO) Set(val *LocationsVehicleDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsVehicleDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsVehicleDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsVehicleDTO(val *LocationsVehicleDTO) *NullableLocationsVehicleDTO {
	return &NullableLocationsVehicleDTO{value: val, isSet: true}
}

func (v NullableLocationsVehicleDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsVehicleDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


