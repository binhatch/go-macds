/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the IdTexts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdTexts{}

// IdTexts struct for IdTexts
type IdTexts struct {
	// Id
	Id *int32 `json:"id,omitempty"`
	// Translations
	Translations *map[string]string `json:"translations,omitempty"`
}

// NewIdTexts instantiates a new IdTexts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdTexts() *IdTexts {
	this := IdTexts{}
	return &this
}

// NewIdTextsWithDefaults instantiates a new IdTexts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdTextsWithDefaults() *IdTexts {
	this := IdTexts{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdTexts) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdTexts) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdTexts) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IdTexts) SetId(v int32) {
	o.Id = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *IdTexts) GetTranslations() map[string]string {
	if o == nil || IsNil(o.Translations) {
		var ret map[string]string
		return ret
	}
	return *o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdTexts) GetTranslationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *IdTexts) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given map[string]string and assigns it to the Translations field.
func (o *IdTexts) SetTranslations(v map[string]string) {
	o.Translations = &v
}

func (o IdTexts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdTexts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

type NullableIdTexts struct {
	value *IdTexts
	isSet bool
}

func (v NullableIdTexts) Get() *IdTexts {
	return v.value
}

func (v *NullableIdTexts) Set(val *IdTexts) {
	v.value = val
	v.isSet = true
}

func (v NullableIdTexts) IsSet() bool {
	return v.isSet
}

func (v *NullableIdTexts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdTexts(val *IdTexts) *NullableIdTexts {
	return &NullableIdTexts{value: val, isSet: true}
}

func (v NullableIdTexts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdTexts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


