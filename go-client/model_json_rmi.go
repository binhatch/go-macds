/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the JsonRmi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonRmi{}

// JsonRmi struct for JsonRmi
type JsonRmi struct {
	// Shows information relevant to the vehicle.
	VehicleInfos []VehicleInfo `json:"vehicleInfos,omitempty"`
	// diagnosesGdstStco
	DiagnosesGdstStco []Diagnoses `json:"diagnosesGdstStco,omitempty"`
	// Array of components or symptoms associated with the main component
	Peripheries []Periphery `json:"peripheries,omitempty"`
}

// NewJsonRmi instantiates a new JsonRmi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonRmi() *JsonRmi {
	this := JsonRmi{}
	return &this
}

// NewJsonRmiWithDefaults instantiates a new JsonRmi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonRmiWithDefaults() *JsonRmi {
	this := JsonRmi{}
	return &this
}

// GetVehicleInfos returns the VehicleInfos field value if set, zero value otherwise.
func (o *JsonRmi) GetVehicleInfos() []VehicleInfo {
	if o == nil || IsNil(o.VehicleInfos) {
		var ret []VehicleInfo
		return ret
	}
	return o.VehicleInfos
}

// GetVehicleInfosOk returns a tuple with the VehicleInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonRmi) GetVehicleInfosOk() ([]VehicleInfo, bool) {
	if o == nil || IsNil(o.VehicleInfos) {
		return nil, false
	}
	return o.VehicleInfos, true
}

// HasVehicleInfos returns a boolean if a field has been set.
func (o *JsonRmi) HasVehicleInfos() bool {
	if o != nil && !IsNil(o.VehicleInfos) {
		return true
	}

	return false
}

// SetVehicleInfos gets a reference to the given []VehicleInfo and assigns it to the VehicleInfos field.
func (o *JsonRmi) SetVehicleInfos(v []VehicleInfo) {
	o.VehicleInfos = v
}

// GetDiagnosesGdstStco returns the DiagnosesGdstStco field value if set, zero value otherwise.
func (o *JsonRmi) GetDiagnosesGdstStco() []Diagnoses {
	if o == nil || IsNil(o.DiagnosesGdstStco) {
		var ret []Diagnoses
		return ret
	}
	return o.DiagnosesGdstStco
}

// GetDiagnosesGdstStcoOk returns a tuple with the DiagnosesGdstStco field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonRmi) GetDiagnosesGdstStcoOk() ([]Diagnoses, bool) {
	if o == nil || IsNil(o.DiagnosesGdstStco) {
		return nil, false
	}
	return o.DiagnosesGdstStco, true
}

// HasDiagnosesGdstStco returns a boolean if a field has been set.
func (o *JsonRmi) HasDiagnosesGdstStco() bool {
	if o != nil && !IsNil(o.DiagnosesGdstStco) {
		return true
	}

	return false
}

// SetDiagnosesGdstStco gets a reference to the given []Diagnoses and assigns it to the DiagnosesGdstStco field.
func (o *JsonRmi) SetDiagnosesGdstStco(v []Diagnoses) {
	o.DiagnosesGdstStco = v
}

// GetPeripheries returns the Peripheries field value if set, zero value otherwise.
func (o *JsonRmi) GetPeripheries() []Periphery {
	if o == nil || IsNil(o.Peripheries) {
		var ret []Periphery
		return ret
	}
	return o.Peripheries
}

// GetPeripheriesOk returns a tuple with the Peripheries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonRmi) GetPeripheriesOk() ([]Periphery, bool) {
	if o == nil || IsNil(o.Peripheries) {
		return nil, false
	}
	return o.Peripheries, true
}

// HasPeripheries returns a boolean if a field has been set.
func (o *JsonRmi) HasPeripheries() bool {
	if o != nil && !IsNil(o.Peripheries) {
		return true
	}

	return false
}

// SetPeripheries gets a reference to the given []Periphery and assigns it to the Peripheries field.
func (o *JsonRmi) SetPeripheries(v []Periphery) {
	o.Peripheries = v
}

func (o JsonRmi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonRmi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VehicleInfos) {
		toSerialize["vehicleInfos"] = o.VehicleInfos
	}
	if !IsNil(o.DiagnosesGdstStco) {
		toSerialize["diagnosesGdstStco"] = o.DiagnosesGdstStco
	}
	if !IsNil(o.Peripheries) {
		toSerialize["peripheries"] = o.Peripheries
	}
	return toSerialize, nil
}

type NullableJsonRmi struct {
	value *JsonRmi
	isSet bool
}

func (v NullableJsonRmi) Get() *JsonRmi {
	return v.value
}

func (v *NullableJsonRmi) Set(val *JsonRmi) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonRmi) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonRmi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonRmi(val *JsonRmi) *NullableJsonRmi {
	return &NullableJsonRmi{value: val, isSet: true}
}

func (v NullableJsonRmi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonRmi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


