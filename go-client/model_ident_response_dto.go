/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the IdentResponseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentResponseDTO{}

// IdentResponseDTO struct for IdentResponseDTO
type IdentResponseDTO struct {
	// KBA
	Kba *string `json:"kba,omitempty"`
	// Probability
	Probability *float64 `json:"probability,omitempty"`
	// KType
	Ktype *int32 `json:"ktype,omitempty"`
	AdditionalInfo *IdentAdditionalInfoDTO `json:"additionalInfo,omitempty"`
}

// NewIdentResponseDTO instantiates a new IdentResponseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentResponseDTO() *IdentResponseDTO {
	this := IdentResponseDTO{}
	return &this
}

// NewIdentResponseDTOWithDefaults instantiates a new IdentResponseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentResponseDTOWithDefaults() *IdentResponseDTO {
	this := IdentResponseDTO{}
	return &this
}

// GetKba returns the Kba field value if set, zero value otherwise.
func (o *IdentResponseDTO) GetKba() string {
	if o == nil || IsNil(o.Kba) {
		var ret string
		return ret
	}
	return *o.Kba
}

// GetKbaOk returns a tuple with the Kba field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentResponseDTO) GetKbaOk() (*string, bool) {
	if o == nil || IsNil(o.Kba) {
		return nil, false
	}
	return o.Kba, true
}

// HasKba returns a boolean if a field has been set.
func (o *IdentResponseDTO) HasKba() bool {
	if o != nil && !IsNil(o.Kba) {
		return true
	}

	return false
}

// SetKba gets a reference to the given string and assigns it to the Kba field.
func (o *IdentResponseDTO) SetKba(v string) {
	o.Kba = &v
}

// GetProbability returns the Probability field value if set, zero value otherwise.
func (o *IdentResponseDTO) GetProbability() float64 {
	if o == nil || IsNil(o.Probability) {
		var ret float64
		return ret
	}
	return *o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentResponseDTO) GetProbabilityOk() (*float64, bool) {
	if o == nil || IsNil(o.Probability) {
		return nil, false
	}
	return o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *IdentResponseDTO) HasProbability() bool {
	if o != nil && !IsNil(o.Probability) {
		return true
	}

	return false
}

// SetProbability gets a reference to the given float64 and assigns it to the Probability field.
func (o *IdentResponseDTO) SetProbability(v float64) {
	o.Probability = &v
}

// GetKtype returns the Ktype field value if set, zero value otherwise.
func (o *IdentResponseDTO) GetKtype() int32 {
	if o == nil || IsNil(o.Ktype) {
		var ret int32
		return ret
	}
	return *o.Ktype
}

// GetKtypeOk returns a tuple with the Ktype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentResponseDTO) GetKtypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Ktype) {
		return nil, false
	}
	return o.Ktype, true
}

// HasKtype returns a boolean if a field has been set.
func (o *IdentResponseDTO) HasKtype() bool {
	if o != nil && !IsNil(o.Ktype) {
		return true
	}

	return false
}

// SetKtype gets a reference to the given int32 and assigns it to the Ktype field.
func (o *IdentResponseDTO) SetKtype(v int32) {
	o.Ktype = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *IdentResponseDTO) GetAdditionalInfo() IdentAdditionalInfoDTO {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret IdentAdditionalInfoDTO
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentResponseDTO) GetAdditionalInfoOk() (*IdentAdditionalInfoDTO, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *IdentResponseDTO) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given IdentAdditionalInfoDTO and assigns it to the AdditionalInfo field.
func (o *IdentResponseDTO) SetAdditionalInfo(v IdentAdditionalInfoDTO) {
	o.AdditionalInfo = &v
}

func (o IdentResponseDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentResponseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kba) {
		toSerialize["kba"] = o.Kba
	}
	if !IsNil(o.Probability) {
		toSerialize["probability"] = o.Probability
	}
	if !IsNil(o.Ktype) {
		toSerialize["ktype"] = o.Ktype
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

type NullableIdentResponseDTO struct {
	value *IdentResponseDTO
	isSet bool
}

func (v NullableIdentResponseDTO) Get() *IdentResponseDTO {
	return v.value
}

func (v *NullableIdentResponseDTO) Set(val *IdentResponseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentResponseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentResponseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentResponseDTO(val *IdentResponseDTO) *NullableIdentResponseDTO {
	return &NullableIdentResponseDTO{value: val, isSet: true}
}

func (v NullableIdentResponseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentResponseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


