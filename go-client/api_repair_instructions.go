/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RepairInstructionsAPIService RepairInstructionsAPI service
type RepairInstructionsAPIService service

type ApiRepairInstructions1treeRequest struct {
	ctx context.Context
	ApiService *RepairInstructionsAPIService
	kType *string
	language *string
	country *string
}

// KType
func (r ApiRepairInstructions1treeRequest) KType(kType string) ApiRepairInstructions1treeRequest {
	r.kType = &kType
	return r
}

// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
func (r ApiRepairInstructions1treeRequest) Language(language string) ApiRepairInstructions1treeRequest {
	r.language = &language
	return r
}

// Two characters defining the ISO country code
func (r ApiRepairInstructions1treeRequest) Country(country string) ApiRepairInstructions1treeRequest {
	r.country = &country
	return r
}

func (r ApiRepairInstructions1treeRequest) Execute() ([]MainGroup, *http.Response, error) {
	return r.ApiService.RepairInstructions1treeExecute(r)
}

/*
RepairInstructions1tree Get repair instructions manuals tree

Get the tree of the repair instructions manuals of a given vehicle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRepairInstructions1treeRequest
*/
func (a *RepairInstructionsAPIService) RepairInstructions1tree(ctx context.Context) ApiRepairInstructions1treeRequest {
	return ApiRepairInstructions1treeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MainGroup
func (a *RepairInstructionsAPIService) RepairInstructions1treeExecute(r ApiRepairInstructions1treeRequest) ([]MainGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MainGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepairInstructionsAPIService.RepairInstructions1tree")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repair-instructions/tree"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kType == nil {
		return localVarReturnValue, nil, reportError("kType is required and must be specified")
	}
	if r.language == nil {
		return localVarReturnValue, nil, reportError("language is required and must be specified")
	}
	if r.country == nil {
		return localVarReturnValue, nil, reportError("country is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "kType", r.kType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "country", r.country, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRepairInstructions2manualRequest struct {
	ctx context.Context
	ApiService *RepairInstructionsAPIService
	kType *string
	language *string
	country *string
	mainGroup *string
	subGroup *string
	manualGroup *string
	manual *string
	qualifier *string
}

// KType
func (r ApiRepairInstructions2manualRequest) KType(kType string) ApiRepairInstructions2manualRequest {
	r.kType = &kType
	return r
}

// Two characters defining the language code; allowed values: de, en, nl, zh, it, hu, hr, fr, fi, es, el, tr, da, sv, sk, cs, ru, ro, pt, pl
func (r ApiRepairInstructions2manualRequest) Language(language string) ApiRepairInstructions2manualRequest {
	r.language = &language
	return r
}

// Two characters defining the ISO country code
func (r ApiRepairInstructions2manualRequest) Country(country string) ApiRepairInstructions2manualRequest {
	r.country = &country
	return r
}

// Main Group
func (r ApiRepairInstructions2manualRequest) MainGroup(mainGroup string) ApiRepairInstructions2manualRequest {
	r.mainGroup = &mainGroup
	return r
}

// Sub Group
func (r ApiRepairInstructions2manualRequest) SubGroup(subGroup string) ApiRepairInstructions2manualRequest {
	r.subGroup = &subGroup
	return r
}

// Manual Group
func (r ApiRepairInstructions2manualRequest) ManualGroup(manualGroup string) ApiRepairInstructions2manualRequest {
	r.manualGroup = &manualGroup
	return r
}

// Manual
func (r ApiRepairInstructions2manualRequest) Manual(manual string) ApiRepairInstructions2manualRequest {
	r.manual = &manual
	return r
}

// Qualifier
func (r ApiRepairInstructions2manualRequest) Qualifier(qualifier string) ApiRepairInstructions2manualRequest {
	r.qualifier = &qualifier
	return r
}

func (r ApiRepairInstructions2manualRequest) Execute() (*TecManual, *http.Response, error) {
	return r.ApiService.RepairInstructions2manualExecute(r)
}

/*
RepairInstructions2manual Get repair instructions manual

Get available repair instructions manual of a given vehicle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRepairInstructions2manualRequest
*/
func (a *RepairInstructionsAPIService) RepairInstructions2manual(ctx context.Context) ApiRepairInstructions2manualRequest {
	return ApiRepairInstructions2manualRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TecManual
func (a *RepairInstructionsAPIService) RepairInstructions2manualExecute(r ApiRepairInstructions2manualRequest) (*TecManual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TecManual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepairInstructionsAPIService.RepairInstructions2manual")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repair-instructions/manual"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kType == nil {
		return localVarReturnValue, nil, reportError("kType is required and must be specified")
	}
	if r.language == nil {
		return localVarReturnValue, nil, reportError("language is required and must be specified")
	}
	if r.country == nil {
		return localVarReturnValue, nil, reportError("country is required and must be specified")
	}
	if r.mainGroup == nil {
		return localVarReturnValue, nil, reportError("mainGroup is required and must be specified")
	}
	if r.subGroup == nil {
		return localVarReturnValue, nil, reportError("subGroup is required and must be specified")
	}
	if r.manualGroup == nil {
		return localVarReturnValue, nil, reportError("manualGroup is required and must be specified")
	}
	if r.manual == nil {
		return localVarReturnValue, nil, reportError("manual is required and must be specified")
	}
	if r.qualifier == nil {
		return localVarReturnValue, nil, reportError("qualifier is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "kType", r.kType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "country", r.country, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "mainGroup", r.mainGroup, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "subGroup", r.subGroup, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "manualGroup", r.manualGroup, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "manual", r.manual, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "qualifier", r.qualifier, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
