/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
	"time"
)

// checks if the Result type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Result{}

// Result struct for Result
type Result struct {
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
	// Engine Power
	EnginePower *int32 `json:"enginePower,omitempty"`
	// Engine Size
	EngineSize *int32 `json:"engineSize,omitempty"`
	// Fuel System
	FuelSystem *string `json:"fuelSystem,omitempty"`
	// Fuel Type
	FuelType *string `json:"fuelType,omitempty"`
	// KType Numbers
	KtypNumbers []KtypNumber `json:"ktypNumbers,omitempty"`
	// Model Series
	ModelSeries *string `json:"modelSeries,omitempty"`
	// Name
	Name *string `json:"name,omitempty"`
	// Shortcut Name
	ShortcutName *string `json:"shortcutName,omitempty"`
	// Vehicle Type Id
	VehicleTypeId *int32 `json:"vehicleTypeId,omitempty"`
	// Vehicle Identification Number
	Vin *string `json:"vin,omitempty"`
	// Year From
	YearFrom *time.Time `json:"yearFrom,omitempty"`
	// Year To
	YearTo *time.Time `json:"yearTo,omitempty"`
}

// NewResult instantiates a new Result object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResult() *Result {
	this := Result{}
	return &this
}

// NewResultWithDefaults instantiates a new Result object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultWithDefaults() *Result {
	this := Result{}
	return &this
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *Result) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *Result) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *Result) SetEngineCode(v string) {
	o.EngineCode = &v
}

// GetEnginePower returns the EnginePower field value if set, zero value otherwise.
func (o *Result) GetEnginePower() int32 {
	if o == nil || IsNil(o.EnginePower) {
		var ret int32
		return ret
	}
	return *o.EnginePower
}

// GetEnginePowerOk returns a tuple with the EnginePower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetEnginePowerOk() (*int32, bool) {
	if o == nil || IsNil(o.EnginePower) {
		return nil, false
	}
	return o.EnginePower, true
}

// HasEnginePower returns a boolean if a field has been set.
func (o *Result) HasEnginePower() bool {
	if o != nil && !IsNil(o.EnginePower) {
		return true
	}

	return false
}

// SetEnginePower gets a reference to the given int32 and assigns it to the EnginePower field.
func (o *Result) SetEnginePower(v int32) {
	o.EnginePower = &v
}

// GetEngineSize returns the EngineSize field value if set, zero value otherwise.
func (o *Result) GetEngineSize() int32 {
	if o == nil || IsNil(o.EngineSize) {
		var ret int32
		return ret
	}
	return *o.EngineSize
}

// GetEngineSizeOk returns a tuple with the EngineSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetEngineSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.EngineSize) {
		return nil, false
	}
	return o.EngineSize, true
}

// HasEngineSize returns a boolean if a field has been set.
func (o *Result) HasEngineSize() bool {
	if o != nil && !IsNil(o.EngineSize) {
		return true
	}

	return false
}

// SetEngineSize gets a reference to the given int32 and assigns it to the EngineSize field.
func (o *Result) SetEngineSize(v int32) {
	o.EngineSize = &v
}

// GetFuelSystem returns the FuelSystem field value if set, zero value otherwise.
func (o *Result) GetFuelSystem() string {
	if o == nil || IsNil(o.FuelSystem) {
		var ret string
		return ret
	}
	return *o.FuelSystem
}

// GetFuelSystemOk returns a tuple with the FuelSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetFuelSystemOk() (*string, bool) {
	if o == nil || IsNil(o.FuelSystem) {
		return nil, false
	}
	return o.FuelSystem, true
}

// HasFuelSystem returns a boolean if a field has been set.
func (o *Result) HasFuelSystem() bool {
	if o != nil && !IsNil(o.FuelSystem) {
		return true
	}

	return false
}

// SetFuelSystem gets a reference to the given string and assigns it to the FuelSystem field.
func (o *Result) SetFuelSystem(v string) {
	o.FuelSystem = &v
}

// GetFuelType returns the FuelType field value if set, zero value otherwise.
func (o *Result) GetFuelType() string {
	if o == nil || IsNil(o.FuelType) {
		var ret string
		return ret
	}
	return *o.FuelType
}

// GetFuelTypeOk returns a tuple with the FuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetFuelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FuelType) {
		return nil, false
	}
	return o.FuelType, true
}

// HasFuelType returns a boolean if a field has been set.
func (o *Result) HasFuelType() bool {
	if o != nil && !IsNil(o.FuelType) {
		return true
	}

	return false
}

// SetFuelType gets a reference to the given string and assigns it to the FuelType field.
func (o *Result) SetFuelType(v string) {
	o.FuelType = &v
}

// GetKtypNumbers returns the KtypNumbers field value if set, zero value otherwise.
func (o *Result) GetKtypNumbers() []KtypNumber {
	if o == nil || IsNil(o.KtypNumbers) {
		var ret []KtypNumber
		return ret
	}
	return o.KtypNumbers
}

// GetKtypNumbersOk returns a tuple with the KtypNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetKtypNumbersOk() ([]KtypNumber, bool) {
	if o == nil || IsNil(o.KtypNumbers) {
		return nil, false
	}
	return o.KtypNumbers, true
}

// HasKtypNumbers returns a boolean if a field has been set.
func (o *Result) HasKtypNumbers() bool {
	if o != nil && !IsNil(o.KtypNumbers) {
		return true
	}

	return false
}

// SetKtypNumbers gets a reference to the given []KtypNumber and assigns it to the KtypNumbers field.
func (o *Result) SetKtypNumbers(v []KtypNumber) {
	o.KtypNumbers = v
}

// GetModelSeries returns the ModelSeries field value if set, zero value otherwise.
func (o *Result) GetModelSeries() string {
	if o == nil || IsNil(o.ModelSeries) {
		var ret string
		return ret
	}
	return *o.ModelSeries
}

// GetModelSeriesOk returns a tuple with the ModelSeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetModelSeriesOk() (*string, bool) {
	if o == nil || IsNil(o.ModelSeries) {
		return nil, false
	}
	return o.ModelSeries, true
}

// HasModelSeries returns a boolean if a field has been set.
func (o *Result) HasModelSeries() bool {
	if o != nil && !IsNil(o.ModelSeries) {
		return true
	}

	return false
}

// SetModelSeries gets a reference to the given string and assigns it to the ModelSeries field.
func (o *Result) SetModelSeries(v string) {
	o.ModelSeries = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Result) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Result) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Result) SetName(v string) {
	o.Name = &v
}

// GetShortcutName returns the ShortcutName field value if set, zero value otherwise.
func (o *Result) GetShortcutName() string {
	if o == nil || IsNil(o.ShortcutName) {
		var ret string
		return ret
	}
	return *o.ShortcutName
}

// GetShortcutNameOk returns a tuple with the ShortcutName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetShortcutNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortcutName) {
		return nil, false
	}
	return o.ShortcutName, true
}

// HasShortcutName returns a boolean if a field has been set.
func (o *Result) HasShortcutName() bool {
	if o != nil && !IsNil(o.ShortcutName) {
		return true
	}

	return false
}

// SetShortcutName gets a reference to the given string and assigns it to the ShortcutName field.
func (o *Result) SetShortcutName(v string) {
	o.ShortcutName = &v
}

// GetVehicleTypeId returns the VehicleTypeId field value if set, zero value otherwise.
func (o *Result) GetVehicleTypeId() int32 {
	if o == nil || IsNil(o.VehicleTypeId) {
		var ret int32
		return ret
	}
	return *o.VehicleTypeId
}

// GetVehicleTypeIdOk returns a tuple with the VehicleTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetVehicleTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VehicleTypeId) {
		return nil, false
	}
	return o.VehicleTypeId, true
}

// HasVehicleTypeId returns a boolean if a field has been set.
func (o *Result) HasVehicleTypeId() bool {
	if o != nil && !IsNil(o.VehicleTypeId) {
		return true
	}

	return false
}

// SetVehicleTypeId gets a reference to the given int32 and assigns it to the VehicleTypeId field.
func (o *Result) SetVehicleTypeId(v int32) {
	o.VehicleTypeId = &v
}

// GetVin returns the Vin field value if set, zero value otherwise.
func (o *Result) GetVin() string {
	if o == nil || IsNil(o.Vin) {
		var ret string
		return ret
	}
	return *o.Vin
}

// GetVinOk returns a tuple with the Vin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetVinOk() (*string, bool) {
	if o == nil || IsNil(o.Vin) {
		return nil, false
	}
	return o.Vin, true
}

// HasVin returns a boolean if a field has been set.
func (o *Result) HasVin() bool {
	if o != nil && !IsNil(o.Vin) {
		return true
	}

	return false
}

// SetVin gets a reference to the given string and assigns it to the Vin field.
func (o *Result) SetVin(v string) {
	o.Vin = &v
}

// GetYearFrom returns the YearFrom field value if set, zero value otherwise.
func (o *Result) GetYearFrom() time.Time {
	if o == nil || IsNil(o.YearFrom) {
		var ret time.Time
		return ret
	}
	return *o.YearFrom
}

// GetYearFromOk returns a tuple with the YearFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetYearFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.YearFrom) {
		return nil, false
	}
	return o.YearFrom, true
}

// HasYearFrom returns a boolean if a field has been set.
func (o *Result) HasYearFrom() bool {
	if o != nil && !IsNil(o.YearFrom) {
		return true
	}

	return false
}

// SetYearFrom gets a reference to the given time.Time and assigns it to the YearFrom field.
func (o *Result) SetYearFrom(v time.Time) {
	o.YearFrom = &v
}

// GetYearTo returns the YearTo field value if set, zero value otherwise.
func (o *Result) GetYearTo() time.Time {
	if o == nil || IsNil(o.YearTo) {
		var ret time.Time
		return ret
	}
	return *o.YearTo
}

// GetYearToOk returns a tuple with the YearTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Result) GetYearToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.YearTo) {
		return nil, false
	}
	return o.YearTo, true
}

// HasYearTo returns a boolean if a field has been set.
func (o *Result) HasYearTo() bool {
	if o != nil && !IsNil(o.YearTo) {
		return true
	}

	return false
}

// SetYearTo gets a reference to the given time.Time and assigns it to the YearTo field.
func (o *Result) SetYearTo(v time.Time) {
	o.YearTo = &v
}

func (o Result) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Result) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	if !IsNil(o.EnginePower) {
		toSerialize["enginePower"] = o.EnginePower
	}
	if !IsNil(o.EngineSize) {
		toSerialize["engineSize"] = o.EngineSize
	}
	if !IsNil(o.FuelSystem) {
		toSerialize["fuelSystem"] = o.FuelSystem
	}
	if !IsNil(o.FuelType) {
		toSerialize["fuelType"] = o.FuelType
	}
	if !IsNil(o.KtypNumbers) {
		toSerialize["ktypNumbers"] = o.KtypNumbers
	}
	if !IsNil(o.ModelSeries) {
		toSerialize["modelSeries"] = o.ModelSeries
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShortcutName) {
		toSerialize["shortcutName"] = o.ShortcutName
	}
	if !IsNil(o.VehicleTypeId) {
		toSerialize["vehicleTypeId"] = o.VehicleTypeId
	}
	if !IsNil(o.Vin) {
		toSerialize["vin"] = o.Vin
	}
	if !IsNil(o.YearFrom) {
		toSerialize["yearFrom"] = o.YearFrom
	}
	if !IsNil(o.YearTo) {
		toSerialize["yearTo"] = o.YearTo
	}
	return toSerialize, nil
}

type NullableResult struct {
	value *Result
	isSet bool
}

func (v NullableResult) Get() *Result {
	return v.value
}

func (v *NullableResult) Set(val *Result) {
	v.value = val
	v.isSet = true
}

func (v NullableResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResult(val *Result) *NullableResult {
	return &NullableResult{value: val, isSet: true}
}

func (v NullableResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


