/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the Note type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Note{}

// Note struct for Note
type Note struct {
	TextReference *TranslationContainer `json:"textReference,omitempty"`
}

// NewNote instantiates a new Note object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNote() *Note {
	this := Note{}
	return &this
}

// NewNoteWithDefaults instantiates a new Note object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWithDefaults() *Note {
	this := Note{}
	return &this
}

// GetTextReference returns the TextReference field value if set, zero value otherwise.
func (o *Note) GetTextReference() TranslationContainer {
	if o == nil || IsNil(o.TextReference) {
		var ret TranslationContainer
		return ret
	}
	return *o.TextReference
}

// GetTextReferenceOk returns a tuple with the TextReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetTextReferenceOk() (*TranslationContainer, bool) {
	if o == nil || IsNil(o.TextReference) {
		return nil, false
	}
	return o.TextReference, true
}

// HasTextReference returns a boolean if a field has been set.
func (o *Note) HasTextReference() bool {
	if o != nil && !IsNil(o.TextReference) {
		return true
	}

	return false
}

// SetTextReference gets a reference to the given TranslationContainer and assigns it to the TextReference field.
func (o *Note) SetTextReference(v TranslationContainer) {
	o.TextReference = &v
}

func (o Note) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Note) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TextReference) {
		toSerialize["textReference"] = o.TextReference
	}
	return toSerialize, nil
}

type NullableNote struct {
	value *Note
	isSet bool
}

func (v NullableNote) Get() *Note {
	return v.value
}

func (v *NullableNote) Set(val *Note) {
	v.value = val
	v.isSet = true
}

func (v NullableNote) IsSet() bool {
	return v.isSet
}

func (v *NullableNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNote(val *Note) *NullableNote {
	return &NullableNote{value: val, isSet: true}
}

func (v NullableNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


