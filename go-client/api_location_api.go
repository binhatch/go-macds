/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LocationAPIAPIService LocationAPIAPI service
type LocationAPIAPIService service

type LocationAPIAPILocation1componentRequest struct {
	ctx context.Context
	ApiService *LocationAPIAPIService
	locationsRequestDTO *LocationsRequestDTO
}

// The request at least requires the specification of kType and language to get a list of location components.
func (r LocationAPIAPILocation1componentRequest) LocationsRequestDTO(locationsRequestDTO LocationsRequestDTO) LocationAPIAPILocation1componentRequest {
	r.locationsRequestDTO = &locationsRequestDTO
	return r
}

func (r LocationAPIAPILocation1componentRequest) Execute() (*LocationsVehicleResponse, *http.Response, error) {
	return r.ApiService.Location1componentExecute(r)
}

/*
Location1component Component locations

The Component Location API returns information about the components of a vehicle and their location based on the KType. The endpoint shows information by giving an image of the position in the vehicle and the coordinates.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocationAPIAPILocation1componentRequest
*/
func (a *LocationAPIAPIService) Location1component(ctx context.Context) LocationAPIAPILocation1componentRequest {
	return LocationAPIAPILocation1componentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocationsVehicleResponse
func (a *LocationAPIAPIService) Location1componentExecute(r LocationAPIAPILocation1componentRequest) (*LocationsVehicleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocationsVehicleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationAPIAPIService.Location1component")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/location/components"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locationsRequestDTO == nil {
		return localVarReturnValue, nil, reportError("locationsRequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.locationsRequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LocationAPIAPILocation2fuseboxRequest struct {
	ctx context.Context
	ApiService *LocationAPIAPIService
	fuseBoxLocationsRequestDTO *FuseBoxLocationsRequestDTO
}

// The request requires the specification of kType and language to get the fusebox location.
func (r LocationAPIAPILocation2fuseboxRequest) FuseBoxLocationsRequestDTO(fuseBoxLocationsRequestDTO FuseBoxLocationsRequestDTO) LocationAPIAPILocation2fuseboxRequest {
	r.fuseBoxLocationsRequestDTO = &fuseBoxLocationsRequestDTO
	return r
}

func (r LocationAPIAPILocation2fuseboxRequest) Execute() (*FuseBoxLocationsResponse, *http.Response, error) {
	return r.ApiService.Location2fuseboxExecute(r)
}

/*
Location2fusebox Fuse and Fuse Box Locations

The Fuses API lists information about the fuse boxes, its location and relays upon specification of a KType.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LocationAPIAPILocation2fuseboxRequest
*/
func (a *LocationAPIAPIService) Location2fusebox(ctx context.Context) LocationAPIAPILocation2fuseboxRequest {
	return LocationAPIAPILocation2fuseboxRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FuseBoxLocationsResponse
func (a *LocationAPIAPIService) Location2fuseboxExecute(r LocationAPIAPILocation2fuseboxRequest) (*FuseBoxLocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FuseBoxLocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationAPIAPIService.Location2fusebox")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/location/fusebox"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fuseBoxLocationsRequestDTO == nil {
		return localVarReturnValue, nil, reportError("fuseBoxLocationsRequestDTO is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fuseBoxLocationsRequestDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
