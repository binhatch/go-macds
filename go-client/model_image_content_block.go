/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go-macds

import (
	"encoding/json"
)

// checks if the ImageContentBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageContentBlock{}

// ImageContentBlock struct for ImageContentBlock
type ImageContentBlock struct {
	// Order
	Order *int32 `json:"order,omitempty"`
	// Width
	Width *string `json:"width,omitempty"`
	// Image Name
	ImageName *string `json:"imageName,omitempty"`
	// Image Type
	ImageType *string `json:"imageType,omitempty"`
	// Image Type
	Type *string `json:"type,omitempty"`
}

// NewImageContentBlock instantiates a new ImageContentBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageContentBlock() *ImageContentBlock {
	this := ImageContentBlock{}
	return &this
}

// NewImageContentBlockWithDefaults instantiates a new ImageContentBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageContentBlockWithDefaults() *ImageContentBlock {
	this := ImageContentBlock{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ImageContentBlock) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentBlock) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ImageContentBlock) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *ImageContentBlock) SetOrder(v int32) {
	o.Order = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ImageContentBlock) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentBlock) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ImageContentBlock) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *ImageContentBlock) SetWidth(v string) {
	o.Width = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *ImageContentBlock) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentBlock) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *ImageContentBlock) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *ImageContentBlock) SetImageName(v string) {
	o.ImageName = &v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *ImageContentBlock) GetImageType() string {
	if o == nil || IsNil(o.ImageType) {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentBlock) GetImageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImageType) {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *ImageContentBlock) HasImageType() bool {
	if o != nil && !IsNil(o.ImageType) {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *ImageContentBlock) SetImageType(v string) {
	o.ImageType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImageContentBlock) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentBlock) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImageContentBlock) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ImageContentBlock) SetType(v string) {
	o.Type = &v
}

func (o ImageContentBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageContentBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.ImageName) {
		toSerialize["imageName"] = o.ImageName
	}
	if !IsNil(o.ImageType) {
		toSerialize["imageType"] = o.ImageType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableImageContentBlock struct {
	value *ImageContentBlock
	isSet bool
}

func (v NullableImageContentBlock) Get() *ImageContentBlock {
	return v.value
}

func (v *NullableImageContentBlock) Set(val *ImageContentBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableImageContentBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableImageContentBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageContentBlock(val *ImageContentBlock) *NullableImageContentBlock {
	return &NullableImageContentBlock{value: val, isSet: true}
}

func (v NullableImageContentBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageContentBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


