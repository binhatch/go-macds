/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ContentBlock - struct for ContentBlock
type ContentBlock struct {
	BreakContentBlock *BreakContentBlock
	ImageContentBlock *ImageContentBlock
	TableContentBlock *TableContentBlock
	TextContentBlock *TextContentBlock
}

// BreakContentBlockAsContentBlock is a convenience function that returns BreakContentBlock wrapped in ContentBlock
func BreakContentBlockAsContentBlock(v *BreakContentBlock) ContentBlock {
	return ContentBlock{
		BreakContentBlock: v,
	}
}

// ImageContentBlockAsContentBlock is a convenience function that returns ImageContentBlock wrapped in ContentBlock
func ImageContentBlockAsContentBlock(v *ImageContentBlock) ContentBlock {
	return ContentBlock{
		ImageContentBlock: v,
	}
}

// TableContentBlockAsContentBlock is a convenience function that returns TableContentBlock wrapped in ContentBlock
func TableContentBlockAsContentBlock(v *TableContentBlock) ContentBlock {
	return ContentBlock{
		TableContentBlock: v,
	}
}

// TextContentBlockAsContentBlock is a convenience function that returns TextContentBlock wrapped in ContentBlock
func TextContentBlockAsContentBlock(v *TextContentBlock) ContentBlock {
	return ContentBlock{
		TextContentBlock: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentBlock) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BreakContentBlock
	err = newStrictDecoder(data).Decode(&dst.BreakContentBlock)
	if err == nil {
		jsonBreakContentBlock, _ := json.Marshal(dst.BreakContentBlock)
		if string(jsonBreakContentBlock) == "{}" { // empty struct
			dst.BreakContentBlock = nil
		} else {
			if err = validator.Validate(dst.BreakContentBlock); err != nil {
				dst.BreakContentBlock = nil
			} else {
				match++
			}
		}
	} else {
		dst.BreakContentBlock = nil
	}

	// try to unmarshal data into ImageContentBlock
	err = newStrictDecoder(data).Decode(&dst.ImageContentBlock)
	if err == nil {
		jsonImageContentBlock, _ := json.Marshal(dst.ImageContentBlock)
		if string(jsonImageContentBlock) == "{}" { // empty struct
			dst.ImageContentBlock = nil
		} else {
			if err = validator.Validate(dst.ImageContentBlock); err != nil {
				dst.ImageContentBlock = nil
			} else {
				match++
			}
		}
	} else {
		dst.ImageContentBlock = nil
	}

	// try to unmarshal data into TableContentBlock
	err = newStrictDecoder(data).Decode(&dst.TableContentBlock)
	if err == nil {
		jsonTableContentBlock, _ := json.Marshal(dst.TableContentBlock)
		if string(jsonTableContentBlock) == "{}" { // empty struct
			dst.TableContentBlock = nil
		} else {
			if err = validator.Validate(dst.TableContentBlock); err != nil {
				dst.TableContentBlock = nil
			} else {
				match++
			}
		}
	} else {
		dst.TableContentBlock = nil
	}

	// try to unmarshal data into TextContentBlock
	err = newStrictDecoder(data).Decode(&dst.TextContentBlock)
	if err == nil {
		jsonTextContentBlock, _ := json.Marshal(dst.TextContentBlock)
		if string(jsonTextContentBlock) == "{}" { // empty struct
			dst.TextContentBlock = nil
		} else {
			if err = validator.Validate(dst.TextContentBlock); err != nil {
				dst.TextContentBlock = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextContentBlock = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BreakContentBlock = nil
		dst.ImageContentBlock = nil
		dst.TableContentBlock = nil
		dst.TextContentBlock = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentBlock)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentBlock)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentBlock) MarshalJSON() ([]byte, error) {
	if src.BreakContentBlock != nil {
		return json.Marshal(&src.BreakContentBlock)
	}

	if src.ImageContentBlock != nil {
		return json.Marshal(&src.ImageContentBlock)
	}

	if src.TableContentBlock != nil {
		return json.Marshal(&src.TableContentBlock)
	}

	if src.TextContentBlock != nil {
		return json.Marshal(&src.TextContentBlock)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentBlock) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BreakContentBlock != nil {
		return obj.BreakContentBlock
	}

	if obj.ImageContentBlock != nil {
		return obj.ImageContentBlock
	}

	if obj.TableContentBlock != nil {
		return obj.TableContentBlock
	}

	if obj.TextContentBlock != nil {
		return obj.TextContentBlock
	}

	// all schemas are nil
	return nil
}

type NullableContentBlock struct {
	value *ContentBlock
	isSet bool
}

func (v NullableContentBlock) Get() *ContentBlock {
	return v.value
}

func (v *NullableContentBlock) Set(val *ContentBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableContentBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableContentBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentBlock(val *ContentBlock) *NullableContentBlock {
	return &NullableContentBlock{value: val, isSet: true}
}

func (v NullableContentBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


