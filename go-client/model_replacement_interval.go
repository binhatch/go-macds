/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the ReplacementInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacementInterval{}

// ReplacementInterval struct for ReplacementInterval
type ReplacementInterval struct {
	// Identifier uniquely identifying the part name and its array of genArtNos
	ReplacementPartNo *int32 `json:"replacementPartNo,omitempty"`
	// Can be: Interval, AdditionalText, TechnicalData
	ReplacementType *string `json:"replacementType,omitempty"`
	ReplacementIntervalPart *ReplacementIntervalPart `json:"replacementIntervalPart,omitempty"`
}

// NewReplacementInterval instantiates a new ReplacementInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacementInterval() *ReplacementInterval {
	this := ReplacementInterval{}
	return &this
}

// NewReplacementIntervalWithDefaults instantiates a new ReplacementInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacementIntervalWithDefaults() *ReplacementInterval {
	this := ReplacementInterval{}
	return &this
}

// GetReplacementPartNo returns the ReplacementPartNo field value if set, zero value otherwise.
func (o *ReplacementInterval) GetReplacementPartNo() int32 {
	if o == nil || IsNil(o.ReplacementPartNo) {
		var ret int32
		return ret
	}
	return *o.ReplacementPartNo
}

// GetReplacementPartNoOk returns a tuple with the ReplacementPartNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementInterval) GetReplacementPartNoOk() (*int32, bool) {
	if o == nil || IsNil(o.ReplacementPartNo) {
		return nil, false
	}
	return o.ReplacementPartNo, true
}

// HasReplacementPartNo returns a boolean if a field has been set.
func (o *ReplacementInterval) HasReplacementPartNo() bool {
	if o != nil && !IsNil(o.ReplacementPartNo) {
		return true
	}

	return false
}

// SetReplacementPartNo gets a reference to the given int32 and assigns it to the ReplacementPartNo field.
func (o *ReplacementInterval) SetReplacementPartNo(v int32) {
	o.ReplacementPartNo = &v
}

// GetReplacementType returns the ReplacementType field value if set, zero value otherwise.
func (o *ReplacementInterval) GetReplacementType() string {
	if o == nil || IsNil(o.ReplacementType) {
		var ret string
		return ret
	}
	return *o.ReplacementType
}

// GetReplacementTypeOk returns a tuple with the ReplacementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementInterval) GetReplacementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementType) {
		return nil, false
	}
	return o.ReplacementType, true
}

// HasReplacementType returns a boolean if a field has been set.
func (o *ReplacementInterval) HasReplacementType() bool {
	if o != nil && !IsNil(o.ReplacementType) {
		return true
	}

	return false
}

// SetReplacementType gets a reference to the given string and assigns it to the ReplacementType field.
func (o *ReplacementInterval) SetReplacementType(v string) {
	o.ReplacementType = &v
}

// GetReplacementIntervalPart returns the ReplacementIntervalPart field value if set, zero value otherwise.
func (o *ReplacementInterval) GetReplacementIntervalPart() ReplacementIntervalPart {
	if o == nil || IsNil(o.ReplacementIntervalPart) {
		var ret ReplacementIntervalPart
		return ret
	}
	return *o.ReplacementIntervalPart
}

// GetReplacementIntervalPartOk returns a tuple with the ReplacementIntervalPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementInterval) GetReplacementIntervalPartOk() (*ReplacementIntervalPart, bool) {
	if o == nil || IsNil(o.ReplacementIntervalPart) {
		return nil, false
	}
	return o.ReplacementIntervalPart, true
}

// HasReplacementIntervalPart returns a boolean if a field has been set.
func (o *ReplacementInterval) HasReplacementIntervalPart() bool {
	if o != nil && !IsNil(o.ReplacementIntervalPart) {
		return true
	}

	return false
}

// SetReplacementIntervalPart gets a reference to the given ReplacementIntervalPart and assigns it to the ReplacementIntervalPart field.
func (o *ReplacementInterval) SetReplacementIntervalPart(v ReplacementIntervalPart) {
	o.ReplacementIntervalPart = &v
}

func (o ReplacementInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacementInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReplacementPartNo) {
		toSerialize["replacementPartNo"] = o.ReplacementPartNo
	}
	if !IsNil(o.ReplacementType) {
		toSerialize["replacementType"] = o.ReplacementType
	}
	if !IsNil(o.ReplacementIntervalPart) {
		toSerialize["replacementIntervalPart"] = o.ReplacementIntervalPart
	}
	return toSerialize, nil
}

type NullableReplacementInterval struct {
	value *ReplacementInterval
	isSet bool
}

func (v NullableReplacementInterval) Get() *ReplacementInterval {
	return v.value
}

func (v *NullableReplacementInterval) Set(val *ReplacementInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacementInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacementInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacementInterval(val *ReplacementInterval) *NullableReplacementInterval {
	return &NullableReplacementInterval{value: val, isSet: true}
}

func (v NullableReplacementInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacementInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


