/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the SchemaItemOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaItemOperation{}

// SchemaItemOperation struct for SchemaItemOperation
type SchemaItemOperation struct {
	// Id
	Id *string `json:"id,omitempty"`
	Name *NameReference `json:"name,omitempty"`
	// Spare Part only relevant if not okay
	SparepartOnlyRelevantIfNotOkay *bool `json:"sparepartOnlyRelevantIfNotOkay,omitempty"`
}

// NewSchemaItemOperation instantiates a new SchemaItemOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaItemOperation() *SchemaItemOperation {
	this := SchemaItemOperation{}
	return &this
}

// NewSchemaItemOperationWithDefaults instantiates a new SchemaItemOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaItemOperationWithDefaults() *SchemaItemOperation {
	this := SchemaItemOperation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaItemOperation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemOperation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaItemOperation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaItemOperation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaItemOperation) GetName() NameReference {
	if o == nil || IsNil(o.Name) {
		var ret NameReference
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemOperation) GetNameOk() (*NameReference, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaItemOperation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given NameReference and assigns it to the Name field.
func (o *SchemaItemOperation) SetName(v NameReference) {
	o.Name = &v
}

// GetSparepartOnlyRelevantIfNotOkay returns the SparepartOnlyRelevantIfNotOkay field value if set, zero value otherwise.
func (o *SchemaItemOperation) GetSparepartOnlyRelevantIfNotOkay() bool {
	if o == nil || IsNil(o.SparepartOnlyRelevantIfNotOkay) {
		var ret bool
		return ret
	}
	return *o.SparepartOnlyRelevantIfNotOkay
}

// GetSparepartOnlyRelevantIfNotOkayOk returns a tuple with the SparepartOnlyRelevantIfNotOkay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaItemOperation) GetSparepartOnlyRelevantIfNotOkayOk() (*bool, bool) {
	if o == nil || IsNil(o.SparepartOnlyRelevantIfNotOkay) {
		return nil, false
	}
	return o.SparepartOnlyRelevantIfNotOkay, true
}

// HasSparepartOnlyRelevantIfNotOkay returns a boolean if a field has been set.
func (o *SchemaItemOperation) HasSparepartOnlyRelevantIfNotOkay() bool {
	if o != nil && !IsNil(o.SparepartOnlyRelevantIfNotOkay) {
		return true
	}

	return false
}

// SetSparepartOnlyRelevantIfNotOkay gets a reference to the given bool and assigns it to the SparepartOnlyRelevantIfNotOkay field.
func (o *SchemaItemOperation) SetSparepartOnlyRelevantIfNotOkay(v bool) {
	o.SparepartOnlyRelevantIfNotOkay = &v
}

func (o SchemaItemOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaItemOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SparepartOnlyRelevantIfNotOkay) {
		toSerialize["sparepartOnlyRelevantIfNotOkay"] = o.SparepartOnlyRelevantIfNotOkay
	}
	return toSerialize, nil
}

type NullableSchemaItemOperation struct {
	value *SchemaItemOperation
	isSet bool
}

func (v NullableSchemaItemOperation) Get() *SchemaItemOperation {
	return v.value
}

func (v *NullableSchemaItemOperation) Set(val *SchemaItemOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaItemOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaItemOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaItemOperation(val *SchemaItemOperation) *NullableSchemaItemOperation {
	return &NullableSchemaItemOperation{value: val, isSet: true}
}

func (v NullableSchemaItemOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaItemOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


