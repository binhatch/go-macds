/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the ReplacementTextReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacementTextReference{}

// ReplacementTextReference struct for ReplacementTextReference
type ReplacementTextReference struct {
	// Id
	Id *int64 `json:"id,omitempty"`
	// Text
	Text *string `json:"text,omitempty"`
	StaticData *ReplacementStaticData `json:"staticData,omitempty"`
}

// NewReplacementTextReference instantiates a new ReplacementTextReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacementTextReference() *ReplacementTextReference {
	this := ReplacementTextReference{}
	return &this
}

// NewReplacementTextReferenceWithDefaults instantiates a new ReplacementTextReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacementTextReferenceWithDefaults() *ReplacementTextReference {
	this := ReplacementTextReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReplacementTextReference) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTextReference) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReplacementTextReference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ReplacementTextReference) SetId(v int64) {
	o.Id = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ReplacementTextReference) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTextReference) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ReplacementTextReference) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ReplacementTextReference) SetText(v string) {
	o.Text = &v
}

// GetStaticData returns the StaticData field value if set, zero value otherwise.
func (o *ReplacementTextReference) GetStaticData() ReplacementStaticData {
	if o == nil || IsNil(o.StaticData) {
		var ret ReplacementStaticData
		return ret
	}
	return *o.StaticData
}

// GetStaticDataOk returns a tuple with the StaticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTextReference) GetStaticDataOk() (*ReplacementStaticData, bool) {
	if o == nil || IsNil(o.StaticData) {
		return nil, false
	}
	return o.StaticData, true
}

// HasStaticData returns a boolean if a field has been set.
func (o *ReplacementTextReference) HasStaticData() bool {
	if o != nil && !IsNil(o.StaticData) {
		return true
	}

	return false
}

// SetStaticData gets a reference to the given ReplacementStaticData and assigns it to the StaticData field.
func (o *ReplacementTextReference) SetStaticData(v ReplacementStaticData) {
	o.StaticData = &v
}

func (o ReplacementTextReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacementTextReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.StaticData) {
		toSerialize["staticData"] = o.StaticData
	}
	return toSerialize, nil
}

type NullableReplacementTextReference struct {
	value *ReplacementTextReference
	isSet bool
}

func (v NullableReplacementTextReference) Get() *ReplacementTextReference {
	return v.value
}

func (v *NullableReplacementTextReference) Set(val *ReplacementTextReference) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacementTextReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacementTextReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacementTextReference(val *ReplacementTextReference) *NullableReplacementTextReference {
	return &NullableReplacementTextReference{value: val, isSet: true}
}

func (v NullableReplacementTextReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacementTextReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


