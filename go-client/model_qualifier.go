/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the Qualifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Qualifier{}

// Qualifier struct for Qualifier
type Qualifier struct {
	// Id
	Id *int32 `json:"id,omitempty"`
	// Title
	Title *string `json:"title,omitempty"`
}

// NewQualifier instantiates a new Qualifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQualifier() *Qualifier {
	this := Qualifier{}
	return &this
}

// NewQualifierWithDefaults instantiates a new Qualifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQualifierWithDefaults() *Qualifier {
	this := Qualifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Qualifier) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Qualifier) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Qualifier) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Qualifier) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Qualifier) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Qualifier) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Qualifier) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Qualifier) SetTitle(v string) {
	o.Title = &v
}

func (o Qualifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Qualifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableQualifier struct {
	value *Qualifier
	isSet bool
}

func (v NullableQualifier) Get() *Qualifier {
	return v.value
}

func (v *NullableQualifier) Set(val *Qualifier) {
	v.value = val
	v.isSet = true
}

func (v NullableQualifier) IsSet() bool {
	return v.isSet
}

func (v *NullableQualifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQualifier(val *Qualifier) *NullableQualifier {
	return &NullableQualifier{value: val, isSet: true}
}

func (v NullableQualifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQualifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


