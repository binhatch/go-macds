/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the ModelYear type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelYear{}

// ModelYear struct for ModelYear
type ModelYear struct {
	// Year
	Year *string `json:"year,omitempty"`
}

// NewModelYear instantiates a new ModelYear object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelYear() *ModelYear {
	this := ModelYear{}
	return &this
}

// NewModelYearWithDefaults instantiates a new ModelYear object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelYearWithDefaults() *ModelYear {
	this := ModelYear{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *ModelYear) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelYear) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *ModelYear) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *ModelYear) SetYear(v string) {
	o.Year = &v
}

func (o ModelYear) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelYear) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	return toSerialize, nil
}

type NullableModelYear struct {
	value *ModelYear
	isSet bool
}

func (v NullableModelYear) Get() *ModelYear {
	return v.value
}

func (v *NullableModelYear) Set(val *ModelYear) {
	v.value = val
	v.isSet = true
}

func (v NullableModelYear) IsSet() bool {
	return v.isSet
}

func (v *NullableModelYear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelYear(val *ModelYear) *NullableModelYear {
	return &NullableModelYear{value: val, isSet: true}
}

func (v NullableModelYear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelYear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


