/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the Guide type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Guide{}

// Guide struct for Guide
type Guide struct {
	// Id
	Id *string `json:"id,omitempty"`
	Title *TitleText `json:"title,omitempty"`
	// Guide Steps
	GuideSteps []GuideStep `json:"guideSteps,omitempty"`
}

// NewGuide instantiates a new Guide object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuide() *Guide {
	this := Guide{}
	return &this
}

// NewGuideWithDefaults instantiates a new Guide object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuideWithDefaults() *Guide {
	this := Guide{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Guide) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Guide) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Guide) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Guide) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Guide) GetTitle() TitleText {
	if o == nil || IsNil(o.Title) {
		var ret TitleText
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Guide) GetTitleOk() (*TitleText, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Guide) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given TitleText and assigns it to the Title field.
func (o *Guide) SetTitle(v TitleText) {
	o.Title = &v
}

// GetGuideSteps returns the GuideSteps field value if set, zero value otherwise.
func (o *Guide) GetGuideSteps() []GuideStep {
	if o == nil || IsNil(o.GuideSteps) {
		var ret []GuideStep
		return ret
	}
	return o.GuideSteps
}

// GetGuideStepsOk returns a tuple with the GuideSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Guide) GetGuideStepsOk() ([]GuideStep, bool) {
	if o == nil || IsNil(o.GuideSteps) {
		return nil, false
	}
	return o.GuideSteps, true
}

// HasGuideSteps returns a boolean if a field has been set.
func (o *Guide) HasGuideSteps() bool {
	if o != nil && !IsNil(o.GuideSteps) {
		return true
	}

	return false
}

// SetGuideSteps gets a reference to the given []GuideStep and assigns it to the GuideSteps field.
func (o *Guide) SetGuideSteps(v []GuideStep) {
	o.GuideSteps = v
}

func (o Guide) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Guide) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.GuideSteps) {
		toSerialize["guideSteps"] = o.GuideSteps
	}
	return toSerialize, nil
}

type NullableGuide struct {
	value *Guide
	isSet bool
}

func (v NullableGuide) Get() *Guide {
	return v.value
}

func (v *NullableGuide) Set(val *Guide) {
	v.value = val
	v.isSet = true
}

func (v NullableGuide) IsSet() bool {
	return v.isSet
}

func (v *NullableGuide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuide(val *Guide) *NullableGuide {
	return &NullableGuide{value: val, isSet: true}
}

func (v NullableGuide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


