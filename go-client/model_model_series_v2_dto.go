/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the ModelSeriesV2DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelSeriesV2DTO{}

// ModelSeriesV2DTO struct for ModelSeriesV2DTO
type ModelSeriesV2DTO struct {
	// Id of the model
	Id *int32 `json:"id,omitempty"`
	// Name of the model
	Name *string `json:"name,omitempty"`
	// Id of the make
	MakeId *int32 `json:"makeId,omitempty"`
}

// NewModelSeriesV2DTO instantiates a new ModelSeriesV2DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelSeriesV2DTO() *ModelSeriesV2DTO {
	this := ModelSeriesV2DTO{}
	return &this
}

// NewModelSeriesV2DTOWithDefaults instantiates a new ModelSeriesV2DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelSeriesV2DTOWithDefaults() *ModelSeriesV2DTO {
	this := ModelSeriesV2DTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelSeriesV2DTO) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSeriesV2DTO) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelSeriesV2DTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelSeriesV2DTO) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelSeriesV2DTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSeriesV2DTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelSeriesV2DTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelSeriesV2DTO) SetName(v string) {
	o.Name = &v
}

// GetMakeId returns the MakeId field value if set, zero value otherwise.
func (o *ModelSeriesV2DTO) GetMakeId() int32 {
	if o == nil || IsNil(o.MakeId) {
		var ret int32
		return ret
	}
	return *o.MakeId
}

// GetMakeIdOk returns a tuple with the MakeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSeriesV2DTO) GetMakeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MakeId) {
		return nil, false
	}
	return o.MakeId, true
}

// HasMakeId returns a boolean if a field has been set.
func (o *ModelSeriesV2DTO) HasMakeId() bool {
	if o != nil && !IsNil(o.MakeId) {
		return true
	}

	return false
}

// SetMakeId gets a reference to the given int32 and assigns it to the MakeId field.
func (o *ModelSeriesV2DTO) SetMakeId(v int32) {
	o.MakeId = &v
}

func (o ModelSeriesV2DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelSeriesV2DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MakeId) {
		toSerialize["makeId"] = o.MakeId
	}
	return toSerialize, nil
}

type NullableModelSeriesV2DTO struct {
	value *ModelSeriesV2DTO
	isSet bool
}

func (v NullableModelSeriesV2DTO) Get() *ModelSeriesV2DTO {
	return v.value
}

func (v *NullableModelSeriesV2DTO) Set(val *ModelSeriesV2DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSeriesV2DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSeriesV2DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSeriesV2DTO(val *ModelSeriesV2DTO) *NullableModelSeriesV2DTO {
	return &NullableModelSeriesV2DTO{value: val, isSet: true}
}

func (v NullableModelSeriesV2DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSeriesV2DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


