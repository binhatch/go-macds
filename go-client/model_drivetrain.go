/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gomacds

import (
	"encoding/json"
)

// checks if the Drivetrain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Drivetrain{}

// Drivetrain struct for Drivetrain
type Drivetrain struct {
	// Engine Code
	EngineCode *string `json:"engineCode,omitempty"`
	// Engine Code Alias
	EngineCodeAlias *string `json:"engineCodeAlias,omitempty"`
	// Engine Horse Power
	EngineHp *int32 `json:"engineHp,omitempty"`
	// Engine kW
	EngineKw *int32 `json:"engineKw,omitempty"`
	// Propulsion Type as integer value:<table><tbody><tr><td>0</td><td>None</td></tr><tr><td>1</td><td>Benzin</td></tr><tr><td>2</td><td>Diesel</td></tr><tr><td>40</td><td>Elektromotor</td></tr><tr><td>41</td><td>Hybrid_Benzin_Elektromotor</td></tr><tr><td>42</td><td>Hybrid_Diesel_Elektromotor</td></tr><tr><td>46</td><td>Benzin_Gas</td></tr><tr><td>50</td><td>FuelCell</td></tr></tbody></table>
	PropulsionType *int32 `json:"propulsionType,omitempty"`
	// Propulsion Type Name
	PropulsionTypeName *string `json:"propulsionTypeName,omitempty"`
	// Cylinders
	Cylinders *int32 `json:"cylinders,omitempty"`
}

// NewDrivetrain instantiates a new Drivetrain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrivetrain() *Drivetrain {
	this := Drivetrain{}
	return &this
}

// NewDrivetrainWithDefaults instantiates a new Drivetrain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrivetrainWithDefaults() *Drivetrain {
	this := Drivetrain{}
	return &this
}

// GetEngineCode returns the EngineCode field value if set, zero value otherwise.
func (o *Drivetrain) GetEngineCode() string {
	if o == nil || IsNil(o.EngineCode) {
		var ret string
		return ret
	}
	return *o.EngineCode
}

// GetEngineCodeOk returns a tuple with the EngineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetEngineCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCode) {
		return nil, false
	}
	return o.EngineCode, true
}

// HasEngineCode returns a boolean if a field has been set.
func (o *Drivetrain) HasEngineCode() bool {
	if o != nil && !IsNil(o.EngineCode) {
		return true
	}

	return false
}

// SetEngineCode gets a reference to the given string and assigns it to the EngineCode field.
func (o *Drivetrain) SetEngineCode(v string) {
	o.EngineCode = &v
}

// GetEngineCodeAlias returns the EngineCodeAlias field value if set, zero value otherwise.
func (o *Drivetrain) GetEngineCodeAlias() string {
	if o == nil || IsNil(o.EngineCodeAlias) {
		var ret string
		return ret
	}
	return *o.EngineCodeAlias
}

// GetEngineCodeAliasOk returns a tuple with the EngineCodeAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetEngineCodeAliasOk() (*string, bool) {
	if o == nil || IsNil(o.EngineCodeAlias) {
		return nil, false
	}
	return o.EngineCodeAlias, true
}

// HasEngineCodeAlias returns a boolean if a field has been set.
func (o *Drivetrain) HasEngineCodeAlias() bool {
	if o != nil && !IsNil(o.EngineCodeAlias) {
		return true
	}

	return false
}

// SetEngineCodeAlias gets a reference to the given string and assigns it to the EngineCodeAlias field.
func (o *Drivetrain) SetEngineCodeAlias(v string) {
	o.EngineCodeAlias = &v
}

// GetEngineHp returns the EngineHp field value if set, zero value otherwise.
func (o *Drivetrain) GetEngineHp() int32 {
	if o == nil || IsNil(o.EngineHp) {
		var ret int32
		return ret
	}
	return *o.EngineHp
}

// GetEngineHpOk returns a tuple with the EngineHp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetEngineHpOk() (*int32, bool) {
	if o == nil || IsNil(o.EngineHp) {
		return nil, false
	}
	return o.EngineHp, true
}

// HasEngineHp returns a boolean if a field has been set.
func (o *Drivetrain) HasEngineHp() bool {
	if o != nil && !IsNil(o.EngineHp) {
		return true
	}

	return false
}

// SetEngineHp gets a reference to the given int32 and assigns it to the EngineHp field.
func (o *Drivetrain) SetEngineHp(v int32) {
	o.EngineHp = &v
}

// GetEngineKw returns the EngineKw field value if set, zero value otherwise.
func (o *Drivetrain) GetEngineKw() int32 {
	if o == nil || IsNil(o.EngineKw) {
		var ret int32
		return ret
	}
	return *o.EngineKw
}

// GetEngineKwOk returns a tuple with the EngineKw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetEngineKwOk() (*int32, bool) {
	if o == nil || IsNil(o.EngineKw) {
		return nil, false
	}
	return o.EngineKw, true
}

// HasEngineKw returns a boolean if a field has been set.
func (o *Drivetrain) HasEngineKw() bool {
	if o != nil && !IsNil(o.EngineKw) {
		return true
	}

	return false
}

// SetEngineKw gets a reference to the given int32 and assigns it to the EngineKw field.
func (o *Drivetrain) SetEngineKw(v int32) {
	o.EngineKw = &v
}

// GetPropulsionType returns the PropulsionType field value if set, zero value otherwise.
func (o *Drivetrain) GetPropulsionType() int32 {
	if o == nil || IsNil(o.PropulsionType) {
		var ret int32
		return ret
	}
	return *o.PropulsionType
}

// GetPropulsionTypeOk returns a tuple with the PropulsionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetPropulsionTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.PropulsionType) {
		return nil, false
	}
	return o.PropulsionType, true
}

// HasPropulsionType returns a boolean if a field has been set.
func (o *Drivetrain) HasPropulsionType() bool {
	if o != nil && !IsNil(o.PropulsionType) {
		return true
	}

	return false
}

// SetPropulsionType gets a reference to the given int32 and assigns it to the PropulsionType field.
func (o *Drivetrain) SetPropulsionType(v int32) {
	o.PropulsionType = &v
}

// GetPropulsionTypeName returns the PropulsionTypeName field value if set, zero value otherwise.
func (o *Drivetrain) GetPropulsionTypeName() string {
	if o == nil || IsNil(o.PropulsionTypeName) {
		var ret string
		return ret
	}
	return *o.PropulsionTypeName
}

// GetPropulsionTypeNameOk returns a tuple with the PropulsionTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetPropulsionTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropulsionTypeName) {
		return nil, false
	}
	return o.PropulsionTypeName, true
}

// HasPropulsionTypeName returns a boolean if a field has been set.
func (o *Drivetrain) HasPropulsionTypeName() bool {
	if o != nil && !IsNil(o.PropulsionTypeName) {
		return true
	}

	return false
}

// SetPropulsionTypeName gets a reference to the given string and assigns it to the PropulsionTypeName field.
func (o *Drivetrain) SetPropulsionTypeName(v string) {
	o.PropulsionTypeName = &v
}

// GetCylinders returns the Cylinders field value if set, zero value otherwise.
func (o *Drivetrain) GetCylinders() int32 {
	if o == nil || IsNil(o.Cylinders) {
		var ret int32
		return ret
	}
	return *o.Cylinders
}

// GetCylindersOk returns a tuple with the Cylinders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drivetrain) GetCylindersOk() (*int32, bool) {
	if o == nil || IsNil(o.Cylinders) {
		return nil, false
	}
	return o.Cylinders, true
}

// HasCylinders returns a boolean if a field has been set.
func (o *Drivetrain) HasCylinders() bool {
	if o != nil && !IsNil(o.Cylinders) {
		return true
	}

	return false
}

// SetCylinders gets a reference to the given int32 and assigns it to the Cylinders field.
func (o *Drivetrain) SetCylinders(v int32) {
	o.Cylinders = &v
}

func (o Drivetrain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Drivetrain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineCode) {
		toSerialize["engineCode"] = o.EngineCode
	}
	if !IsNil(o.EngineCodeAlias) {
		toSerialize["engineCodeAlias"] = o.EngineCodeAlias
	}
	if !IsNil(o.EngineHp) {
		toSerialize["engineHp"] = o.EngineHp
	}
	if !IsNil(o.EngineKw) {
		toSerialize["engineKw"] = o.EngineKw
	}
	if !IsNil(o.PropulsionType) {
		toSerialize["propulsionType"] = o.PropulsionType
	}
	if !IsNil(o.PropulsionTypeName) {
		toSerialize["propulsionTypeName"] = o.PropulsionTypeName
	}
	if !IsNil(o.Cylinders) {
		toSerialize["cylinders"] = o.Cylinders
	}
	return toSerialize, nil
}

type NullableDrivetrain struct {
	value *Drivetrain
	isSet bool
}

func (v NullableDrivetrain) Get() *Drivetrain {
	return v.value
}

func (v *NullableDrivetrain) Set(val *Drivetrain) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivetrain) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivetrain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivetrain(val *Drivetrain) *NullableDrivetrain {
	return &NullableDrivetrain{value: val, isSet: true}
}

func (v NullableDrivetrain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivetrain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


