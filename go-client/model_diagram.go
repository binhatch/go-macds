/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the Diagram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Diagram{}

// Diagram struct for Diagram
type Diagram struct {
	// A descriptive name for the wiring diagram
	Name *string `json:"name,omitempty"`
	// The URL pointing to the SVG image representation of the wiring diagram.
	DiagramImageUrl *string `json:"diagramImageUrl,omitempty"`
	// A list components and their image coordinates for the diagram.
	ComponentCoordinates []ComponentCoordinates `json:"componentCoordinates,omitempty"`
}

// NewDiagram instantiates a new Diagram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagram() *Diagram {
	this := Diagram{}
	return &this
}

// NewDiagramWithDefaults instantiates a new Diagram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagramWithDefaults() *Diagram {
	this := Diagram{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Diagram) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diagram) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Diagram) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Diagram) SetName(v string) {
	o.Name = &v
}

// GetDiagramImageUrl returns the DiagramImageUrl field value if set, zero value otherwise.
func (o *Diagram) GetDiagramImageUrl() string {
	if o == nil || IsNil(o.DiagramImageUrl) {
		var ret string
		return ret
	}
	return *o.DiagramImageUrl
}

// GetDiagramImageUrlOk returns a tuple with the DiagramImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diagram) GetDiagramImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DiagramImageUrl) {
		return nil, false
	}
	return o.DiagramImageUrl, true
}

// HasDiagramImageUrl returns a boolean if a field has been set.
func (o *Diagram) HasDiagramImageUrl() bool {
	if o != nil && !IsNil(o.DiagramImageUrl) {
		return true
	}

	return false
}

// SetDiagramImageUrl gets a reference to the given string and assigns it to the DiagramImageUrl field.
func (o *Diagram) SetDiagramImageUrl(v string) {
	o.DiagramImageUrl = &v
}

// GetComponentCoordinates returns the ComponentCoordinates field value if set, zero value otherwise.
func (o *Diagram) GetComponentCoordinates() []ComponentCoordinates {
	if o == nil || IsNil(o.ComponentCoordinates) {
		var ret []ComponentCoordinates
		return ret
	}
	return o.ComponentCoordinates
}

// GetComponentCoordinatesOk returns a tuple with the ComponentCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Diagram) GetComponentCoordinatesOk() ([]ComponentCoordinates, bool) {
	if o == nil || IsNil(o.ComponentCoordinates) {
		return nil, false
	}
	return o.ComponentCoordinates, true
}

// HasComponentCoordinates returns a boolean if a field has been set.
func (o *Diagram) HasComponentCoordinates() bool {
	if o != nil && !IsNil(o.ComponentCoordinates) {
		return true
	}

	return false
}

// SetComponentCoordinates gets a reference to the given []ComponentCoordinates and assigns it to the ComponentCoordinates field.
func (o *Diagram) SetComponentCoordinates(v []ComponentCoordinates) {
	o.ComponentCoordinates = v
}

func (o Diagram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Diagram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DiagramImageUrl) {
		toSerialize["diagramImageUrl"] = o.DiagramImageUrl
	}
	if !IsNil(o.ComponentCoordinates) {
		toSerialize["componentCoordinates"] = o.ComponentCoordinates
	}
	return toSerialize, nil
}

type NullableDiagram struct {
	value *Diagram
	isSet bool
}

func (v NullableDiagram) Get() *Diagram {
	return v.value
}

func (v *NullableDiagram) Set(val *Diagram) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagram) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagram(val *Diagram) *NullableDiagram {
	return &NullableDiagram{value: val, isSet: true}
}

func (v NullableDiagram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


