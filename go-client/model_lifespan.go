/*
Hella Gutmann - macsDS (Data Services) - API collection

This document contains all relevant APIs for diagnostics (incl. DTCs), repair & maintenance information (RMI) and vehicle identification.

API version: V20240702-130718
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/binhatch/go-macds

import (
	"encoding/json"
)

// checks if the Lifespan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lifespan{}

// Lifespan struct for Lifespan
type Lifespan struct {
	From *YearMonth `json:"from,omitempty"`
	To *YearMonth `json:"to,omitempty"`
}

// NewLifespan instantiates a new Lifespan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifespan() *Lifespan {
	this := Lifespan{}
	return &this
}

// NewLifespanWithDefaults instantiates a new Lifespan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifespanWithDefaults() *Lifespan {
	this := Lifespan{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Lifespan) GetFrom() YearMonth {
	if o == nil || IsNil(o.From) {
		var ret YearMonth
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lifespan) GetFromOk() (*YearMonth, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Lifespan) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given YearMonth and assigns it to the From field.
func (o *Lifespan) SetFrom(v YearMonth) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Lifespan) GetTo() YearMonth {
	if o == nil || IsNil(o.To) {
		var ret YearMonth
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lifespan) GetToOk() (*YearMonth, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Lifespan) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given YearMonth and assigns it to the To field.
func (o *Lifespan) SetTo(v YearMonth) {
	o.To = &v
}

func (o Lifespan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lifespan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableLifespan struct {
	value *Lifespan
	isSet bool
}

func (v NullableLifespan) Get() *Lifespan {
	return v.value
}

func (v *NullableLifespan) Set(val *Lifespan) {
	v.value = val
	v.isSet = true
}

func (v NullableLifespan) IsSet() bool {
	return v.isSet
}

func (v *NullableLifespan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifespan(val *Lifespan) *NullableLifespan {
	return &NullableLifespan{value: val, isSet: true}
}

func (v NullableLifespan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifespan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


